"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("../utils");
__export(require("./instance"));
function consume(pluginManager, options) {
    const { name, menu, messageTypes, events, controls, params, tooltip } = options;
    const disp = new atom_1.CompositeDisposable();
    if (menu) {
        const menuDisp = atom.menu.add([{
                label: utils_1.MAIN_MENU_LABEL,
                submenu: [{ label: menu.label, submenu: menu.menu }]
            }]);
        disp.add(menuDisp);
    }
    if (messageTypes) {
        for (const type of Object.keys(messageTypes)) {
            const opts = messageTypes[type];
            pluginManager.outputPanel.createTab(type, opts);
        }
    }
    if (events) {
        for (const k in events) {
            if (k.startsWith('on') && pluginManager[k]) {
                let v = events[k];
                if (!Array.isArray(v)) {
                    v = [v];
                }
                for (const i of v) {
                    disp.add(pluginManager[k](i));
                }
            }
        }
    }
    if (tooltip) {
        let handler, priority, eventTypes;
        if (typeof tooltip === 'function') {
            handler = tooltip;
        }
        else {
            ({ handler, priority, eventTypes } = tooltip);
        }
        if (!priority) {
            priority = 100;
        }
        disp.add(pluginManager.tooltipRegistry.register(name, { priority, handler, eventTypes }));
    }
    if (controls) {
        for (const i of controls) {
            disp.add(pluginManager.outputPanel.addPanelControl(i));
        }
    }
    if (params) {
        for (const paramName of Object.keys(params)) {
            const spec = params[paramName];
            disp.add(pluginManager.configParamManager.add(name, paramName, spec));
        }
    }
    return disp;
}
exports.consume = consume;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBpLTMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrQkFBb0Q7QUFPcEQsb0NBQXdDO0FBRXhDLGdDQUEwQjtBQThCMUIsaUJBQXlCLGFBQTRCLEVBQUUsT0FBNkI7SUFDbEYsTUFBTSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBQyxHQUFHLE9BQU8sQ0FBQTtJQUM3RSxNQUFNLElBQUksR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7SUFFdEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNULE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzlCLEtBQUssRUFBRSx1QkFBZTtnQkFDdEIsT0FBTyxFQUFFLENBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBQyxDQUFFO2FBQ3JELENBQUMsQ0FBQyxDQUFBO1FBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNwQixDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUVqQixHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QyxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDL0IsYUFBYSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ2pELENBQUM7SUFDSCxDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDdkIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMzQyxJQUFJLENBQUMsR0FBZ0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUM5RCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUFDLENBQUM7Z0JBQ2xDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2xCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQy9CLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ1osSUFBSSxPQUF3QixFQUFFLFFBQTRCLEVBQUUsVUFBeUMsQ0FBQTtRQUNyRyxFQUFFLENBQUMsQ0FBQyxPQUFPLE9BQU8sS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDbkIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sQ0FBQyxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFDLEdBQUcsT0FBTyxDQUFDLENBQUE7UUFDN0MsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUFDLFFBQVEsR0FBRyxHQUFHLENBQUE7UUFBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUE7SUFDekYsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN4RCxDQUFDO0lBQ0gsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxNQUFNLFNBQVMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7WUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FDTixhQUFhLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQzVELENBQUE7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUE7QUFDYixDQUFDO0FBdERELDBCQXNEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZSwgRGlzcG9zYWJsZX0gZnJvbSAnYXRvbSdcblxuaW1wb3J0IHtQbHVnaW5NYW5hZ2VyfSBmcm9tICcuLi9wbHVnaW4tbWFuYWdlcidcbmltcG9ydCB7VFRleHRCdWZmZXJDYWxsYmFjaywgVEV2ZW50UmFuZ2VUeXBlfSBmcm9tICcuLi9lZGl0b3ItY29udHJvbCdcbmltcG9ydCB7SVNldFR5cGVzUGFyYW1zLCBUQ29udHJvbERlZmluaXRpb259IGZyb20gJy4uL291dHB1dC1wYW5lbCdcbmltcG9ydCB7SVBhcmFtU3BlY30gZnJvbSAnLi4vY29uZmlnLXBhcmFtcydcbmltcG9ydCB7VFRvb2x0aXBIYW5kbGVyfSBmcm9tICcuLi90b29sdGlwLXJlZ2lzdHJ5J1xuaW1wb3J0IHtNQUlOX01FTlVfTEFCRUx9IGZyb20gJy4uL3V0aWxzJ1xuXG5leHBvcnQgKiBmcm9tICcuL2luc3RhbmNlJ1xuXG5leHBvcnQgaW50ZXJmYWNlIElBdG9tTWVudUNvbW1hbmQge1xuICBsYWJlbDogc3RyaW5nXG4gIGNvbW1hbmQ6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElBdG9tU3VibWVudSB7XG4gIGxhYmVsOiBzdHJpbmdcbiAgc3VibWVudTogVEF0b21NZW51W11cbn1cblxuZXhwb3J0IHR5cGUgVEF0b21NZW51ID0gSUF0b21NZW51Q29tbWFuZCB8IElBdG9tU3VibWVudVxuXG5leHBvcnQgdHlwZSBUU2luZ2xlT3JBcnJheTxUPiA9IFQgfCBUW11cblxuZXhwb3J0IGludGVyZmFjZSBJUmVnaXN0cmF0aW9uT3B0aW9ucyB7XG4gIG5hbWU6IHN0cmluZ1xuICBtZW51Pzoge2xhYmVsOiBzdHJpbmcsIG1lbnU6IFRBdG9tTWVudX1cbiAgbWVzc2FnZVR5cGVzPzogSVNldFR5cGVzUGFyYW1zXG4gIGV2ZW50cz86IHtcbiAgICBvbldpbGxTYXZlQnVmZmVyPzogVFNpbmdsZU9yQXJyYXk8VFRleHRCdWZmZXJDYWxsYmFjaz5cbiAgICBvbkRpZFNhdmVCdWZmZXI/OiBUU2luZ2xlT3JBcnJheTxUVGV4dEJ1ZmZlckNhbGxiYWNrPlxuICAgIG9uRGlkU3RvcENoYW5naW5nPzogVFNpbmdsZU9yQXJyYXk8VFRleHRCdWZmZXJDYWxsYmFjaz5cbiAgfVxuICBjb250cm9scz86IEFycmF5PFRDb250cm9sRGVmaW5pdGlvbjxPYmplY3Q+PlxuICBwYXJhbXM/OiB7W3BhcmFtTmFtZTogc3RyaW5nXTogSVBhcmFtU3BlYzxPYmplY3Q+fVxuICB0b29sdGlwPzogVFRvb2x0aXBIYW5kbGVyIHwge3ByaW9yaXR5PzogbnVtYmVyLCBoYW5kbGVyOiBUVG9vbHRpcEhhbmRsZXIsIGV2ZW50VHlwZXM/OiBURXZlbnRSYW5nZVR5cGVbXX1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN1bWUgKHBsdWdpbk1hbmFnZXI6IFBsdWdpbk1hbmFnZXIsIG9wdGlvbnM6IElSZWdpc3RyYXRpb25PcHRpb25zKTogRGlzcG9zYWJsZSB7XG4gIGNvbnN0IHtuYW1lLCBtZW51LCBtZXNzYWdlVHlwZXMsIGV2ZW50cywgY29udHJvbHMsIHBhcmFtcywgdG9vbHRpcH0gPSBvcHRpb25zXG4gIGNvbnN0IGRpc3AgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG5cbiAgaWYgKG1lbnUpIHtcbiAgICBjb25zdCBtZW51RGlzcCA9IGF0b20ubWVudS5hZGQoW3tcbiAgICAgIGxhYmVsOiBNQUlOX01FTlVfTEFCRUwsXG4gICAgICBzdWJtZW51OiBbIHtsYWJlbDogbWVudS5sYWJlbCwgc3VibWVudTogbWVudS5tZW51fSBdXG4gICAgfV0pXG4gICAgZGlzcC5hZGQobWVudURpc3ApXG4gIH1cbiAgaWYgKG1lc3NhZ2VUeXBlcykge1xuICAgIC8vIFRPRE86IG1ha2UgZGlzcG9zYWJsZVxuICAgIGZvciAoY29uc3QgdHlwZSBvZiBPYmplY3Qua2V5cyhtZXNzYWdlVHlwZXMpKSB7XG4gICAgICBjb25zdCBvcHRzID0gbWVzc2FnZVR5cGVzW3R5cGVdXG4gICAgICBwbHVnaW5NYW5hZ2VyLm91dHB1dFBhbmVsLmNyZWF0ZVRhYih0eXBlLCBvcHRzKVxuICAgIH1cbiAgfVxuICBpZiAoZXZlbnRzKSB7XG4gICAgZm9yIChjb25zdCBrIGluIGV2ZW50cykge1xuICAgICAgaWYgKGsuc3RhcnRzV2l0aCgnb24nKSAmJiBwbHVnaW5NYW5hZ2VyW2tdKSB7XG4gICAgICAgIGxldCB2OiBUVGV4dEJ1ZmZlckNhbGxiYWNrIHwgVFRleHRCdWZmZXJDYWxsYmFja1tdID0gZXZlbnRzW2tdXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2KSkgeyB2ID0gW3ZdIH1cbiAgICAgICAgZm9yIChjb25zdCBpIG9mIHYpIHtcbiAgICAgICAgICBkaXNwLmFkZChwbHVnaW5NYW5hZ2VyW2tdKGkpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICh0b29sdGlwKSB7XG4gICAgbGV0IGhhbmRsZXI6IFRUb29sdGlwSGFuZGxlciwgcHJpb3JpdHk6IG51bWJlciB8IHVuZGVmaW5lZCwgZXZlbnRUeXBlczogVEV2ZW50UmFuZ2VUeXBlW10gfCB1bmRlZmluZWRcbiAgICBpZiAodHlwZW9mIHRvb2x0aXAgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGhhbmRsZXIgPSB0b29sdGlwXG4gICAgfSBlbHNlIHtcbiAgICAgICh7aGFuZGxlciwgcHJpb3JpdHksIGV2ZW50VHlwZXN9ID0gdG9vbHRpcClcbiAgICB9XG4gICAgaWYgKCFwcmlvcml0eSkgeyBwcmlvcml0eSA9IDEwMCB9XG4gICAgZGlzcC5hZGQocGx1Z2luTWFuYWdlci50b29sdGlwUmVnaXN0cnkucmVnaXN0ZXIobmFtZSwge3ByaW9yaXR5LCBoYW5kbGVyLCBldmVudFR5cGVzfSkpXG4gIH1cbiAgaWYgKGNvbnRyb2xzKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIGNvbnRyb2xzKSB7XG4gICAgICBkaXNwLmFkZChwbHVnaW5NYW5hZ2VyLm91dHB1dFBhbmVsLmFkZFBhbmVsQ29udHJvbChpKSlcbiAgICB9XG4gIH1cbiAgaWYgKHBhcmFtcykge1xuICAgIGZvciAoY29uc3QgcGFyYW1OYW1lIG9mIE9iamVjdC5rZXlzKHBhcmFtcykpIHtcbiAgICAgIGNvbnN0IHNwZWMgPSBwYXJhbXNbcGFyYW1OYW1lXVxuICAgICAgZGlzcC5hZGQoXG4gICAgICAgIHBsdWdpbk1hbmFnZXIuY29uZmlnUGFyYW1NYW5hZ2VyLmFkZChuYW1lLCBwYXJhbU5hbWUsIHNwZWMpXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRpc3Bcbn1cbiJdfQ==