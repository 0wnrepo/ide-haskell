"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("../utils");
__export(require("./instance"));
function consume(pluginManager, options) {
    const { name, menu, messageTypes, events, controls, params, tooltip } = options;
    const disp = new atom_1.CompositeDisposable();
    if (menu) {
        const menuDisp = atom.menu.add([{
                label: utils_1.MAIN_MENU_LABEL,
                submenu: [{ label: menu.label, submenu: menu.menu }]
            }]);
        disp.add(menuDisp);
    }
    if (messageTypes) {
        for (const type of Object.keys(messageTypes)) {
            const opts = messageTypes[type];
            pluginManager.outputPanel.createTab(type, opts);
        }
    }
    if (events) {
        for (const k in events) {
            if (k.startsWith('on') && pluginManager[k]) {
                let v = events[k];
                if (!Array.isArray(v)) {
                    v = [v];
                }
                for (const i of v) {
                    disp.add(pluginManager[k](i));
                }
            }
        }
    }
    if (tooltip) {
        let handler, priority, eventTypes;
        if (typeof tooltip === 'function') {
            handler = tooltip;
        }
        else {
            ({ handler, priority, eventTypes } = tooltip);
        }
        if (!priority) {
            priority = 100;
        }
        disp.add(pluginManager.tooltipRegistry.register(name, { priority, handler, eventTypes }));
    }
    if (controls) {
        for (const i of controls) {
            disp.add(pluginManager.outputPanel.addPanelControl(i));
        }
    }
    if (params) {
        for (const paramName of Object.keys(params)) {
            const spec = params[paramName];
            disp.add(pluginManager.configParamManager.add(name, paramName, spec));
        }
    }
    return disp;
}
exports.consume = consume;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBpLTMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrQkFBb0Q7QUFHcEQsb0NBQXdDO0FBRXhDLGdDQUEwQjtBQUUxQixpQkFBeUIsYUFBNEIsRUFBRSxPQUFpQztJQUN0RixNQUFNLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFDLEdBQUcsT0FBTyxDQUFBO0lBQzdFLE1BQU0sSUFBSSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtJQUV0QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ1QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDOUIsS0FBSyxFQUFFLHVCQUFlO2dCQUN0QixPQUFPLEVBQUUsQ0FBRSxFQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFDLENBQUU7YUFDckQsQ0FBQyxDQUFDLENBQUE7UUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3BCLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBRWpCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUMvQixhQUFhLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDakQsQ0FBQztJQUNILENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN2QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNDLElBQUksQ0FBQyxHQUF3RCxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQ3RFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQUMsQ0FBQztnQkFDbEMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDL0IsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDWixJQUFJLE9BQTRCLEVBQUUsUUFBNEIsRUFBRSxVQUE2QyxDQUFBO1FBQzdHLEVBQUUsQ0FBQyxDQUFDLE9BQU8sT0FBTyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDbEMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtRQUNuQixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixDQUFDLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQTtRQUM3QyxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQTtRQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBQyxDQUFDLENBQUMsQ0FBQTtJQUN6RixDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3hELENBQUM7SUFDSCxDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLE1BQU0sU0FBUyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtZQUM5QixJQUFJLENBQUMsR0FBRyxDQUNOLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FDNUQsQ0FBQTtRQUNILENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQTtBQUNiLENBQUM7QUF0REQsMEJBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb3NpdGVEaXNwb3NhYmxlLCBEaXNwb3NhYmxlfSBmcm9tICdhdG9tJ1xuXG5pbXBvcnQge1BsdWdpbk1hbmFnZXJ9IGZyb20gJy4uL3BsdWdpbi1tYW5hZ2VyJ1xuaW1wb3J0IHtNQUlOX01FTlVfTEFCRUx9IGZyb20gJy4uL3V0aWxzJ1xuXG5leHBvcnQgKiBmcm9tICcuL2luc3RhbmNlJ1xuXG5leHBvcnQgZnVuY3Rpb24gY29uc3VtZSAocGx1Z2luTWFuYWdlcjogUGx1Z2luTWFuYWdlciwgb3B0aW9uczogVVBJLklSZWdpc3RyYXRpb25PcHRpb25zKTogRGlzcG9zYWJsZSB7XG4gIGNvbnN0IHtuYW1lLCBtZW51LCBtZXNzYWdlVHlwZXMsIGV2ZW50cywgY29udHJvbHMsIHBhcmFtcywgdG9vbHRpcH0gPSBvcHRpb25zXG4gIGNvbnN0IGRpc3AgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG5cbiAgaWYgKG1lbnUpIHtcbiAgICBjb25zdCBtZW51RGlzcCA9IGF0b20ubWVudS5hZGQoW3tcbiAgICAgIGxhYmVsOiBNQUlOX01FTlVfTEFCRUwsXG4gICAgICBzdWJtZW51OiBbIHtsYWJlbDogbWVudS5sYWJlbCwgc3VibWVudTogbWVudS5tZW51fSBdXG4gICAgfV0pXG4gICAgZGlzcC5hZGQobWVudURpc3ApXG4gIH1cbiAgaWYgKG1lc3NhZ2VUeXBlcykge1xuICAgIC8vIFRPRE86IG1ha2UgZGlzcG9zYWJsZVxuICAgIGZvciAoY29uc3QgdHlwZSBvZiBPYmplY3Qua2V5cyhtZXNzYWdlVHlwZXMpKSB7XG4gICAgICBjb25zdCBvcHRzID0gbWVzc2FnZVR5cGVzW3R5cGVdXG4gICAgICBwbHVnaW5NYW5hZ2VyLm91dHB1dFBhbmVsLmNyZWF0ZVRhYih0eXBlLCBvcHRzKVxuICAgIH1cbiAgfVxuICBpZiAoZXZlbnRzKSB7XG4gICAgZm9yIChjb25zdCBrIGluIGV2ZW50cykge1xuICAgICAgaWYgKGsuc3RhcnRzV2l0aCgnb24nKSAmJiBwbHVnaW5NYW5hZ2VyW2tdKSB7XG4gICAgICAgIGxldCB2OiBVUEkuVFRleHRCdWZmZXJDYWxsYmFjayB8IFVQSS5UVGV4dEJ1ZmZlckNhbGxiYWNrW10gPSBldmVudHNba11cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHYpKSB7IHYgPSBbdl0gfVxuICAgICAgICBmb3IgKGNvbnN0IGkgb2Ygdikge1xuICAgICAgICAgIGRpc3AuYWRkKHBsdWdpbk1hbmFnZXJba10oaSkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHRvb2x0aXApIHtcbiAgICBsZXQgaGFuZGxlcjogVVBJLlRUb29sdGlwSGFuZGxlciwgcHJpb3JpdHk6IG51bWJlciB8IHVuZGVmaW5lZCwgZXZlbnRUeXBlczogVVBJLlRFdmVudFJhbmdlVHlwZVtdIHwgdW5kZWZpbmVkXG4gICAgaWYgKHR5cGVvZiB0b29sdGlwID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBoYW5kbGVyID0gdG9vbHRpcFxuICAgIH0gZWxzZSB7XG4gICAgICAoe2hhbmRsZXIsIHByaW9yaXR5LCBldmVudFR5cGVzfSA9IHRvb2x0aXApXG4gICAgfVxuICAgIGlmICghcHJpb3JpdHkpIHsgcHJpb3JpdHkgPSAxMDAgfVxuICAgIGRpc3AuYWRkKHBsdWdpbk1hbmFnZXIudG9vbHRpcFJlZ2lzdHJ5LnJlZ2lzdGVyKG5hbWUsIHtwcmlvcml0eSwgaGFuZGxlciwgZXZlbnRUeXBlc30pKVxuICB9XG4gIGlmIChjb250cm9scykge1xuICAgIGZvciAoY29uc3QgaSBvZiBjb250cm9scykge1xuICAgICAgZGlzcC5hZGQocGx1Z2luTWFuYWdlci5vdXRwdXRQYW5lbC5hZGRQYW5lbENvbnRyb2woaSkpXG4gICAgfVxuICB9XG4gIGlmIChwYXJhbXMpIHtcbiAgICBmb3IgKGNvbnN0IHBhcmFtTmFtZSBvZiBPYmplY3Qua2V5cyhwYXJhbXMpKSB7XG4gICAgICBjb25zdCBzcGVjID0gcGFyYW1zW3BhcmFtTmFtZV1cbiAgICAgIGRpc3AuYWRkKFxuICAgICAgICBwbHVnaW5NYW5hZ2VyLmNvbmZpZ1BhcmFtTWFuYWdlci5hZGQobmFtZSwgcGFyYW1OYW1lLCBzcGVjKVxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkaXNwXG59XG4iXX0=