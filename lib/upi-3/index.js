"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("../utils");
__export(require("./instance"));
function consume(pluginManager, options) {
    const { name, menu, messageTypes, events, controls, params, tooltip } = options;
    const disp = new atom_1.CompositeDisposable();
    if (menu) {
        const menuDisp = atom.menu.add([{
                label: utils_1.MAIN_MENU_LABEL,
                submenu: [{ label: menu.label, submenu: menu.menu }],
            }]);
        disp.add(menuDisp);
    }
    if (messageTypes) {
        for (const type of Object.keys(messageTypes)) {
            const opts = messageTypes[type];
            pluginManager.outputPanel.createTab(type, opts);
        }
    }
    if (events) {
        if (events.onWillSaveBuffer) {
            disp.add(registerEvent(events.onWillSaveBuffer, pluginManager.onWillSaveBuffer.bind(pluginManager)));
        }
        if (events.onDidSaveBuffer) {
            disp.add(registerEvent(events.onDidSaveBuffer, pluginManager.onDidSaveBuffer.bind(pluginManager)));
        }
        if (events.onDidStopChanging) {
            disp.add(registerEvent(events.onDidStopChanging, pluginManager.onDidStopChanging.bind(pluginManager)));
        }
    }
    if (tooltip) {
        let handler;
        let priority;
        let eventTypes;
        if (typeof tooltip === 'function') {
            handler = tooltip;
        }
        else {
            ({ handler, priority, eventTypes } = tooltip);
        }
        if (!priority) {
            priority = 100;
        }
        disp.add(pluginManager.tooltipRegistry.register(name, { priority, handler, eventTypes }));
    }
    if (controls) {
        for (const i of controls) {
            disp.add(pluginManager.outputPanel.addPanelControl(i));
        }
    }
    if (params) {
        for (const paramName of Object.keys(params)) {
            const spec = params[paramName];
            disp.add(pluginManager.configParamManager.add(name, paramName, spec));
        }
    }
    return disp;
}
exports.consume = consume;
function registerEvent(cb, reg) {
    if (Array.isArray(cb)) {
        const disp = new atom_1.CompositeDisposable();
        for (const i of cb) {
            disp.add(reg(i));
        }
        return disp;
    }
    else {
        return reg(cb);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBpLTMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrQkFBc0Q7QUFHdEQsb0NBQTBDO0FBRzFDLGdDQUEwQjtBQUUxQixpQkFBd0IsYUFBNEIsRUFBRSxPQUFpQztJQUNyRixNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsT0FBTyxDQUFBO0lBQy9FLE1BQU0sSUFBSSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtJQUV0QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ1QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDOUIsS0FBSyxFQUFFLHVCQUFlO2dCQUN0QixPQUFPLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDckQsQ0FBQyxDQUFDLENBQUE7UUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3BCLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBRWpCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUUvQixhQUFhLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDakQsQ0FBQztJQUNILENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ1gsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsYUFBYSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDdEcsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsYUFBYSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3BHLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1lBQzdCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN4RyxDQUFDO0lBQ0gsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDWixJQUFJLE9BQTRCLENBQUE7UUFDaEMsSUFBSSxRQUE0QixDQUFBO1FBQ2hDLElBQUksVUFBeUMsQ0FBQTtRQUM3QyxFQUFFLENBQUMsQ0FBQyxPQUFPLE9BQU8sS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDbkIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUE7UUFDL0MsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUFDLFFBQVEsR0FBRyxHQUFHLENBQUE7UUFBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDM0YsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN4RCxDQUFDO0lBQ0gsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxNQUFNLFNBQVMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7WUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FDTixhQUFhLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQzVELENBQUE7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUE7QUFDYixDQUFDO0FBekRELDBCQXlEQztBQUVELHVCQUNFLEVBQStDLEVBQy9DLEdBQWdEO0lBRWhELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sSUFBSSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtRQUN0QyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDbEIsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUE7SUFDYixDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2hCLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgRGlzcG9zYWJsZSB9IGZyb20gJ2F0b20nXG5cbmltcG9ydCB7IFBsdWdpbk1hbmFnZXIgfSBmcm9tICcuLi9wbHVnaW4tbWFuYWdlcidcbmltcG9ydCB7IE1BSU5fTUVOVV9MQUJFTCB9IGZyb20gJy4uL3V0aWxzJ1xuaW1wb3J0ICogYXMgVVBJIGZyb20gJ2F0b20taGFza2VsbC11cGknXG5cbmV4cG9ydCAqIGZyb20gJy4vaW5zdGFuY2UnXG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zdW1lKHBsdWdpbk1hbmFnZXI6IFBsdWdpbk1hbmFnZXIsIG9wdGlvbnM6IFVQSS5JUmVnaXN0cmF0aW9uT3B0aW9ucyk6IERpc3Bvc2FibGUge1xuICBjb25zdCB7IG5hbWUsIG1lbnUsIG1lc3NhZ2VUeXBlcywgZXZlbnRzLCBjb250cm9scywgcGFyYW1zLCB0b29sdGlwIH0gPSBvcHRpb25zXG4gIGNvbnN0IGRpc3AgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG5cbiAgaWYgKG1lbnUpIHtcbiAgICBjb25zdCBtZW51RGlzcCA9IGF0b20ubWVudS5hZGQoW3tcbiAgICAgIGxhYmVsOiBNQUlOX01FTlVfTEFCRUwsXG4gICAgICBzdWJtZW51OiBbeyBsYWJlbDogbWVudS5sYWJlbCwgc3VibWVudTogbWVudS5tZW51IH1dLFxuICAgIH1dKVxuICAgIGRpc3AuYWRkKG1lbnVEaXNwKVxuICB9XG4gIGlmIChtZXNzYWdlVHlwZXMpIHtcbiAgICAvLyBUT0RPOiBtYWtlIGRpc3Bvc2FibGVcbiAgICBmb3IgKGNvbnN0IHR5cGUgb2YgT2JqZWN0LmtleXMobWVzc2FnZVR5cGVzKSkge1xuICAgICAgY29uc3Qgb3B0cyA9IG1lc3NhZ2VUeXBlc1t0eXBlXVxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgICBwbHVnaW5NYW5hZ2VyLm91dHB1dFBhbmVsLmNyZWF0ZVRhYih0eXBlLCBvcHRzKVxuICAgIH1cbiAgfVxuICBpZiAoZXZlbnRzKSB7XG4gICAgaWYgKGV2ZW50cy5vbldpbGxTYXZlQnVmZmVyKSB7XG4gICAgICBkaXNwLmFkZChyZWdpc3RlckV2ZW50KGV2ZW50cy5vbldpbGxTYXZlQnVmZmVyLCBwbHVnaW5NYW5hZ2VyLm9uV2lsbFNhdmVCdWZmZXIuYmluZChwbHVnaW5NYW5hZ2VyKSkpXG4gICAgfVxuICAgIGlmIChldmVudHMub25EaWRTYXZlQnVmZmVyKSB7XG4gICAgICBkaXNwLmFkZChyZWdpc3RlckV2ZW50KGV2ZW50cy5vbkRpZFNhdmVCdWZmZXIsIHBsdWdpbk1hbmFnZXIub25EaWRTYXZlQnVmZmVyLmJpbmQocGx1Z2luTWFuYWdlcikpKVxuICAgIH1cbiAgICBpZiAoZXZlbnRzLm9uRGlkU3RvcENoYW5naW5nKSB7XG4gICAgICBkaXNwLmFkZChyZWdpc3RlckV2ZW50KGV2ZW50cy5vbkRpZFN0b3BDaGFuZ2luZywgcGx1Z2luTWFuYWdlci5vbkRpZFN0b3BDaGFuZ2luZy5iaW5kKHBsdWdpbk1hbmFnZXIpKSlcbiAgICB9XG4gIH1cbiAgaWYgKHRvb2x0aXApIHtcbiAgICBsZXQgaGFuZGxlcjogVVBJLlRUb29sdGlwSGFuZGxlclxuICAgIGxldCBwcmlvcml0eTogbnVtYmVyIHwgdW5kZWZpbmVkXG4gICAgbGV0IGV2ZW50VHlwZXM6IFRFdmVudFJhbmdlVHlwZVtdIHwgdW5kZWZpbmVkXG4gICAgaWYgKHR5cGVvZiB0b29sdGlwID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBoYW5kbGVyID0gdG9vbHRpcFxuICAgIH0gZWxzZSB7XG4gICAgICAoeyBoYW5kbGVyLCBwcmlvcml0eSwgZXZlbnRUeXBlcyB9ID0gdG9vbHRpcClcbiAgICB9XG4gICAgaWYgKCFwcmlvcml0eSkgeyBwcmlvcml0eSA9IDEwMCB9XG4gICAgZGlzcC5hZGQocGx1Z2luTWFuYWdlci50b29sdGlwUmVnaXN0cnkucmVnaXN0ZXIobmFtZSwgeyBwcmlvcml0eSwgaGFuZGxlciwgZXZlbnRUeXBlcyB9KSlcbiAgfVxuICBpZiAoY29udHJvbHMpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgY29udHJvbHMpIHtcbiAgICAgIGRpc3AuYWRkKHBsdWdpbk1hbmFnZXIub3V0cHV0UGFuZWwuYWRkUGFuZWxDb250cm9sKGkpKVxuICAgIH1cbiAgfVxuICBpZiAocGFyYW1zKSB7XG4gICAgZm9yIChjb25zdCBwYXJhbU5hbWUgb2YgT2JqZWN0LmtleXMocGFyYW1zKSkge1xuICAgICAgY29uc3Qgc3BlYyA9IHBhcmFtc1twYXJhbU5hbWVdXG4gICAgICBkaXNwLmFkZChcbiAgICAgICAgcGx1Z2luTWFuYWdlci5jb25maWdQYXJhbU1hbmFnZXIuYWRkKG5hbWUsIHBhcmFtTmFtZSwgc3BlYyksXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRpc3Bcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJFdmVudChcbiAgY2I6IFVQSS5UU2luZ2xlT3JBcnJheTxVUEkuVFRleHRCdWZmZXJDYWxsYmFjaz4sXG4gIHJlZzogKGNiOiBVUEkuVFRleHRCdWZmZXJDYWxsYmFjaykgPT4gRGlzcG9zYWJsZSxcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShjYikpIHtcbiAgICBjb25zdCBkaXNwID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICAgIGZvciAoY29uc3QgaSBvZiBjYikge1xuICAgICAgZGlzcC5hZGQocmVnKGkpKVxuICAgIH1cbiAgICByZXR1cm4gZGlzcFxuICB9IGVsc2Uge1xuICAgIHJldHVybiByZWcoY2IpXG4gIH1cbn1cbiJdfQ==