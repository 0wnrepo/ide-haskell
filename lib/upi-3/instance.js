"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const _1 = require("./");
const AtomTypes = require("atom");
var CompositeDisposable = AtomTypes.CompositeDisposable;
function instance(pluginManager, options) {
    const pluginName = options.name;
    const disposables = new CompositeDisposable();
    const messageProvider = pluginManager.resultsDB.registerProvider();
    disposables.add(messageProvider);
    disposables.add(_1.consume(pluginManager, options));
    return {
        setMenu(name, menu) {
            const menuDisp = atom.menu.add([
                {
                    label: utils_1.MAIN_MENU_LABEL,
                    submenu: [{ label: name, submenu: menu }],
                },
            ]);
            disposables.add(menuDisp);
            return menuDisp;
        },
        setStatus(status) {
            return pluginManager.backendStatus(pluginName, status);
        },
        setMessages(messages) {
            messageProvider.setMessages(messages);
        },
        async addMessageTab(name, opts) {
            return pluginManager.outputPanel.createTab(name, opts);
        },
        async showTooltip({ editor, eventType, detail, tooltip, }) {
            if (!eventType) {
                eventType = utils_1.getEventType(detail);
            }
            return pluginManager.tooltipRegistry.showTooltip(editor, eventType, {
                pluginName,
                tooltip,
            });
        },
        addPanelControl(def) {
            return pluginManager.outputPanel.addPanelControl(def);
        },
        addConfigParam(paramName, spec) {
            return pluginManager.configParamManager.add(pluginName, paramName, spec);
        },
        async getConfigParam(name) {
            return pluginManager.configParamManager.get(pluginName, name);
        },
        async getOthersConfigParam(plugin, name) {
            return pluginManager.configParamManager.get(plugin, name);
        },
        async setConfigParam(name, value) {
            return pluginManager.configParamManager.set(pluginName, name, value);
        },
        getEventRange(editor, typeOrDetail) {
            let type;
            if (utils_1.isTEventRangeType(typeOrDetail)) {
                type = typeOrDetail;
            }
            else {
                type = utils_1.getEventType(typeOrDetail);
            }
            const controller = pluginManager.controller(editor);
            if (!controller) {
                return undefined;
            }
            return controller.getEventRange(type);
        },
        dispose() {
            disposables.dispose();
        },
    };
}
exports.instance = instance;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBpLTMvaW5zdGFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBMkU7QUFFM0UseUJBQTRCO0FBRTVCLGtDQUFpQztBQUNqQyxJQUFPLG1CQUFtQixHQUFHLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQTtBQUkxRCxrQkFDRSxhQUE0QixFQUM1QixPQUFpQztJQUVqQyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFBO0lBQy9CLE1BQU0sV0FBVyxHQUFHLElBQUksbUJBQW1CLEVBQUUsQ0FBQTtJQUM3QyxNQUFNLGVBQWUsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUE7SUFDbEUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUNoQyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQU8sQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQTtJQUVoRCxNQUFNLENBQUM7UUFDTCxPQUFPLENBQUMsSUFBWSxFQUFFLElBQTBDO1lBQzlELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2dCQUM3QjtvQkFDRSxLQUFLLEVBQUUsdUJBQWU7b0JBQ3RCLE9BQU8sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7aUJBQzFDO2FBQ0YsQ0FBQyxDQUFBO1lBQ0YsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUN6QixNQUFNLENBQUMsUUFBUSxDQUFBO1FBQ2pCLENBQUM7UUFDRCxTQUFTLENBQUMsTUFBbUI7WUFDM0IsTUFBTSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQ3hELENBQUM7UUFDRCxXQUFXLENBQUMsUUFBMkI7WUFDckMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUN2QyxDQUFDO1FBQ0QsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFZLEVBQUUsSUFBZ0M7WUFDaEUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUN4RCxDQUFDO1FBQ0QsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUNoQixNQUFNLEVBQ04sU0FBUyxFQUNULE1BQU0sRUFDTixPQUFPLEdBQ2dCO1lBQ3ZCLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDZixTQUFTLEdBQUcsb0JBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUNsQyxDQUFDO1lBQ0QsTUFBTSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUU7Z0JBQ2xFLFVBQVU7Z0JBQ1YsT0FBTzthQUNSLENBQUMsQ0FBQTtRQUNKLENBQUM7UUFDRCxlQUFlLENBQUksR0FBOEI7WUFDL0MsTUFBTSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3ZELENBQUM7UUFDRCxjQUFjLENBQUksU0FBaUIsRUFBRSxJQUF1QjtZQUMxRCxNQUFNLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzFFLENBQUM7UUFDRCxLQUFLLENBQUMsY0FBYyxDQUFJLElBQVk7WUFDbEMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUksVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ2xFLENBQUM7UUFDRCxLQUFLLENBQUMsb0JBQW9CLENBQ3hCLE1BQWMsRUFDZCxJQUFZO1lBRVosTUFBTSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUksTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzlELENBQUM7UUFDRCxLQUFLLENBQUMsY0FBYyxDQUFJLElBQVksRUFBRSxLQUFTO1lBQzdDLE1BQU0sQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFJLFVBQVUsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDekUsQ0FBQztRQUNELGFBQWEsQ0FBQyxNQUFrQixFQUFFLFlBQXNDO1lBQ3RFLElBQUksSUFBcUIsQ0FBQTtZQUN6QixFQUFFLENBQUMsQ0FBQyx5QkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BDLElBQUksR0FBRyxZQUFZLENBQUE7WUFDckIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLElBQUksR0FBRyxvQkFBWSxDQUFDLFlBQVksQ0FBQyxDQUFBO1lBQ25DLENBQUM7WUFDRCxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQ25ELEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDaEIsTUFBTSxDQUFDLFNBQVMsQ0FBQTtZQUNsQixDQUFDO1lBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkMsQ0FBQztRQUNELE9BQU87WUFDTCxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDdkIsQ0FBQztLQUNGLENBQUE7QUFDSCxDQUFDO0FBL0VELDRCQStFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1BSU5fTUVOVV9MQUJFTCwgZ2V0RXZlbnRUeXBlLCBpc1RFdmVudFJhbmdlVHlwZSB9IGZyb20gJy4uL3V0aWxzJ1xuaW1wb3J0IHsgUGx1Z2luTWFuYWdlciB9IGZyb20gJy4uL3BsdWdpbi1tYW5hZ2VyJ1xuaW1wb3J0IHsgY29uc3VtZSB9IGZyb20gJy4vJ1xuaW1wb3J0ICogYXMgVVBJIGZyb20gJ2F0b20taGFza2VsbC11cGknXG5pbXBvcnQgKiBhcyBBdG9tVHlwZXMgZnJvbSAnYXRvbSdcbmltcG9ydCBDb21wb3NpdGVEaXNwb3NhYmxlID0gQXRvbVR5cGVzLkNvbXBvc2l0ZURpc3Bvc2FibGVcbmltcG9ydCBUZXh0RWRpdG9yID0gQXRvbVR5cGVzLlRleHRFZGl0b3JcbmltcG9ydCBURXZlbnRSYW5nZVR5cGUgPSBVUEkuVEV2ZW50UmFuZ2VUeXBlXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YW5jZShcbiAgcGx1Z2luTWFuYWdlcjogUGx1Z2luTWFuYWdlcixcbiAgb3B0aW9uczogVVBJLklSZWdpc3RyYXRpb25PcHRpb25zLFxuKTogVVBJLklVUElJbnN0YW5jZSB7XG4gIGNvbnN0IHBsdWdpbk5hbWUgPSBvcHRpb25zLm5hbWVcbiAgY29uc3QgZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gIGNvbnN0IG1lc3NhZ2VQcm92aWRlciA9IHBsdWdpbk1hbmFnZXIucmVzdWx0c0RCLnJlZ2lzdGVyUHJvdmlkZXIoKVxuICBkaXNwb3NhYmxlcy5hZGQobWVzc2FnZVByb3ZpZGVyKVxuICBkaXNwb3NhYmxlcy5hZGQoY29uc3VtZShwbHVnaW5NYW5hZ2VyLCBvcHRpb25zKSlcblxuICByZXR1cm4ge1xuICAgIHNldE1lbnUobmFtZTogc3RyaW5nLCBtZW51OiBSZWFkb25seUFycmF5PEF0b21UeXBlcy5NZW51T3B0aW9ucz4pIHtcbiAgICAgIGNvbnN0IG1lbnVEaXNwID0gYXRvbS5tZW51LmFkZChbXG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogTUFJTl9NRU5VX0xBQkVMLFxuICAgICAgICAgIHN1Ym1lbnU6IFt7IGxhYmVsOiBuYW1lLCBzdWJtZW51OiBtZW51IH1dLFxuICAgICAgICB9LFxuICAgICAgXSlcbiAgICAgIGRpc3Bvc2FibGVzLmFkZChtZW51RGlzcClcbiAgICAgIHJldHVybiBtZW51RGlzcFxuICAgIH0sXG4gICAgc2V0U3RhdHVzKHN0YXR1czogVVBJLklTdGF0dXMpIHtcbiAgICAgIHJldHVybiBwbHVnaW5NYW5hZ2VyLmJhY2tlbmRTdGF0dXMocGx1Z2luTmFtZSwgc3RhdHVzKVxuICAgIH0sXG4gICAgc2V0TWVzc2FnZXMobWVzc2FnZXM6IFVQSS5JUmVzdWx0SXRlbVtdKSB7XG4gICAgICBtZXNzYWdlUHJvdmlkZXIuc2V0TWVzc2FnZXMobWVzc2FnZXMpXG4gICAgfSxcbiAgICBhc3luYyBhZGRNZXNzYWdlVGFiKG5hbWU6IHN0cmluZywgb3B0czogVVBJLklTZXZlcml0eVRhYkRlZmluaXRpb24pIHtcbiAgICAgIHJldHVybiBwbHVnaW5NYW5hZ2VyLm91dHB1dFBhbmVsLmNyZWF0ZVRhYihuYW1lLCBvcHRzKVxuICAgIH0sXG4gICAgYXN5bmMgc2hvd1Rvb2x0aXAoe1xuICAgICAgZWRpdG9yLFxuICAgICAgZXZlbnRUeXBlLFxuICAgICAgZGV0YWlsLFxuICAgICAgdG9vbHRpcCxcbiAgICB9OiBVUEkuSVNob3dUb29sdGlwUGFyYW1zKSB7XG4gICAgICBpZiAoIWV2ZW50VHlwZSkge1xuICAgICAgICBldmVudFR5cGUgPSBnZXRFdmVudFR5cGUoZGV0YWlsKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHBsdWdpbk1hbmFnZXIudG9vbHRpcFJlZ2lzdHJ5LnNob3dUb29sdGlwKGVkaXRvciwgZXZlbnRUeXBlLCB7XG4gICAgICAgIHBsdWdpbk5hbWUsXG4gICAgICAgIHRvb2x0aXAsXG4gICAgICB9KVxuICAgIH0sXG4gICAgYWRkUGFuZWxDb250cm9sPFQ+KGRlZjogVVBJLlRDb250cm9sRGVmaW5pdGlvbjxUPikge1xuICAgICAgcmV0dXJuIHBsdWdpbk1hbmFnZXIub3V0cHV0UGFuZWwuYWRkUGFuZWxDb250cm9sKGRlZilcbiAgICB9LFxuICAgIGFkZENvbmZpZ1BhcmFtPFQ+KHBhcmFtTmFtZTogc3RyaW5nLCBzcGVjOiBVUEkuSVBhcmFtU3BlYzxUPikge1xuICAgICAgcmV0dXJuIHBsdWdpbk1hbmFnZXIuY29uZmlnUGFyYW1NYW5hZ2VyLmFkZChwbHVnaW5OYW1lLCBwYXJhbU5hbWUsIHNwZWMpXG4gICAgfSxcbiAgICBhc3luYyBnZXRDb25maWdQYXJhbTxUPihuYW1lOiBzdHJpbmcpOiBQcm9taXNlPFQgfCB1bmRlZmluZWQ+IHtcbiAgICAgIHJldHVybiBwbHVnaW5NYW5hZ2VyLmNvbmZpZ1BhcmFtTWFuYWdlci5nZXQ8VD4ocGx1Z2luTmFtZSwgbmFtZSlcbiAgICB9LFxuICAgIGFzeW5jIGdldE90aGVyc0NvbmZpZ1BhcmFtPFQ+KFxuICAgICAgcGx1Z2luOiBzdHJpbmcsXG4gICAgICBuYW1lOiBzdHJpbmcsXG4gICAgKTogUHJvbWlzZTxUIHwgdW5kZWZpbmVkPiB7XG4gICAgICByZXR1cm4gcGx1Z2luTWFuYWdlci5jb25maWdQYXJhbU1hbmFnZXIuZ2V0PFQ+KHBsdWdpbiwgbmFtZSlcbiAgICB9LFxuICAgIGFzeW5jIHNldENvbmZpZ1BhcmFtPFQ+KG5hbWU6IHN0cmluZywgdmFsdWU/OiBUKTogUHJvbWlzZTxUIHwgdW5kZWZpbmVkPiB7XG4gICAgICByZXR1cm4gcGx1Z2luTWFuYWdlci5jb25maWdQYXJhbU1hbmFnZXIuc2V0PFQ+KHBsdWdpbk5hbWUsIG5hbWUsIHZhbHVlKVxuICAgIH0sXG4gICAgZ2V0RXZlbnRSYW5nZShlZGl0b3I6IFRleHRFZGl0b3IsIHR5cGVPckRldGFpbDogVEV2ZW50UmFuZ2VUeXBlIHwgT2JqZWN0KSB7XG4gICAgICBsZXQgdHlwZTogVEV2ZW50UmFuZ2VUeXBlXG4gICAgICBpZiAoaXNURXZlbnRSYW5nZVR5cGUodHlwZU9yRGV0YWlsKSkge1xuICAgICAgICB0eXBlID0gdHlwZU9yRGV0YWlsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0eXBlID0gZ2V0RXZlbnRUeXBlKHR5cGVPckRldGFpbClcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBwbHVnaW5NYW5hZ2VyLmNvbnRyb2xsZXIoZWRpdG9yKVxuICAgICAgaWYgKCFjb250cm9sbGVyKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250cm9sbGVyLmdldEV2ZW50UmFuZ2UodHlwZSlcbiAgICB9LFxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICBkaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgICB9LFxuICB9XG59XG4iXX0=