"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
class EventTable {
    constructor(editor, groups) {
        this.editor = editor;
        this.table = Object.create(null);
        for (const i of utils_1.eventRangeTypeVals) {
            this.table[i] = new Map();
        }
        this.layers = new Set();
        for (const i of groups) {
            const layer = this.editor.addMarkerLayer();
            this.layers.add(layer);
            for (const { type, source } of i) {
                this.table[type].set(source, layer);
            }
        }
    }
    destroy() {
        for (const i of this.layers.values()) {
            i.destroy();
        }
        for (const i of this.values()) {
            i.clear();
        }
    }
    get(type, source) {
        let res = this.table[type].get(source);
        if (!res) {
            res = this.table[type].get(undefined);
        }
        if (!res) {
            throw new Error(`Failed to classify ${type}:${source}`);
        }
        return res;
    }
    clear() {
        for (const i of this.layers.values()) {
            i.clear();
        }
    }
    getMarkerCount() {
        let count = 0;
        for (const i of this.layers.values()) {
            count += i.getMarkerCount();
        }
        return count;
    }
    *values() {
        for (const i of utils_1.eventRangeTypeVals) {
            yield this.table[i];
        }
    }
    *entries() {
        for (const i of utils_1.eventRangeTypeVals) {
            yield [i, this.table[i]];
        }
    }
}
exports.EventTable = EventTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtdGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZWRpdG9yLWNvbnRyb2wvZXZlbnQtdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxvQ0FBMkM7QUFJM0M7SUFLRSxZQUFxQixNQUFrQixFQUFFLE1BQXNCO1FBQTFDLFdBQU0sR0FBTixNQUFNLENBQVk7UUFFckMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2hDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLDBCQUFrQixDQUFDLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7UUFDM0IsQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtRQUN2QixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUE7WUFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDdEIsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFDckMsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRU0sT0FBTztRQUNaLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUNiLENBQUM7UUFDRCxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlCLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNYLENBQUM7SUFDSCxDQUFDO0lBRU0sR0FBRyxDQUFFLElBQXlCLEVBQUUsTUFBZTtRQUNwRCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN0QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDVCxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDdkMsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLElBQUksSUFBSSxNQUFNLEVBQUUsQ0FBQyxDQUFBO1FBQ3pELENBQUM7UUFDRCxNQUFNLENBQUMsR0FBRyxDQUFBO0lBQ1osQ0FBQztJQUVNLEtBQUs7UUFDVixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDWCxDQUFDO0lBQ0gsQ0FBQztJQUVNLGNBQWM7UUFDbkIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFBO1FBQ2IsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckMsS0FBSyxJQUFJLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtRQUM3QixDQUFDO1FBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQTtJQUNkLENBQUM7SUFFRCxDQUFTLE1BQU07UUFDYixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSwwQkFBa0IsQ0FBQyxDQUFBLENBQUM7WUFDbEMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3JCLENBQUM7SUFDSCxDQUFDO0lBRUQsQ0FBUyxPQUFPO1FBQ2QsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksMEJBQWtCLENBQUMsQ0FBQSxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzFCLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFsRUQsZ0NBa0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZXh0RWRpdG9yLCBEaXNwbGF5TWFya2VyTGF5ZXJ9IGZyb20gJ2F0b20nXG5pbXBvcnQge2V2ZW50UmFuZ2VUeXBlVmFsc30gZnJvbSAnLi4vdXRpbHMnXG5cbmV4cG9ydCB0eXBlIElNYXJrZXJHcm91cCA9IEFycmF5PHt0eXBlOiBVUEkuVEV2ZW50UmFuZ2VUeXBlLCBzb3VyY2U/OiBzdHJpbmd9PlxuXG5leHBvcnQgY2xhc3MgRXZlbnRUYWJsZSB7XG4gIHByaXZhdGUgdGFibGU6IHtcbiAgICBbSyBpbiBVUEkuVEV2ZW50UmFuZ2VUeXBlXTogTWFwPHN0cmluZyB8IHVuZGVmaW5lZCwgRGlzcGxheU1hcmtlckxheWVyPlxuICB9XG4gIHByaXZhdGUgbGF5ZXJzOiBTZXQ8RGlzcGxheU1hcmtlckxheWVyPlxuICBjb25zdHJ1Y3RvciAocHJpdmF0ZSBlZGl0b3I6IFRleHRFZGl0b3IsIGdyb3VwczogSU1hcmtlckdyb3VwW10pIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tbnVsbC1rZXl3b3JkXG4gICAgdGhpcy50YWJsZSA9IE9iamVjdC5jcmVhdGUobnVsbClcbiAgICBmb3IgKGNvbnN0IGkgb2YgZXZlbnRSYW5nZVR5cGVWYWxzKSB7XG4gICAgICB0aGlzLnRhYmxlW2ldID0gbmV3IE1hcCgpXG4gICAgfVxuICAgIHRoaXMubGF5ZXJzID0gbmV3IFNldCgpXG4gICAgZm9yIChjb25zdCBpIG9mIGdyb3Vwcykge1xuICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLmVkaXRvci5hZGRNYXJrZXJMYXllcigpXG4gICAgICB0aGlzLmxheWVycy5hZGQobGF5ZXIpXG4gICAgICBmb3IgKGNvbnN0IHt0eXBlLCBzb3VyY2V9IG9mIGkpIHtcbiAgICAgICAgdGhpcy50YWJsZVt0eXBlXS5zZXQoc291cmNlLCBsYXllcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSAoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMubGF5ZXJzLnZhbHVlcygpKSB7XG4gICAgICBpLmRlc3Ryb3koKVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy52YWx1ZXMoKSkge1xuICAgICAgaS5jbGVhcigpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldCAodHlwZTogVVBJLlRFdmVudFJhbmdlVHlwZSwgc291cmNlPzogc3RyaW5nKSB7XG4gICAgbGV0IHJlcyA9IHRoaXMudGFibGVbdHlwZV0uZ2V0KHNvdXJjZSlcbiAgICBpZiAoIXJlcykge1xuICAgICAgcmVzID0gdGhpcy50YWJsZVt0eXBlXS5nZXQodW5kZWZpbmVkKVxuICAgIH1cbiAgICBpZiAoIXJlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gY2xhc3NpZnkgJHt0eXBlfToke3NvdXJjZX1gKVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICBwdWJsaWMgY2xlYXIgKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLmxheWVycy52YWx1ZXMoKSkge1xuICAgICAgaS5jbGVhcigpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldE1hcmtlckNvdW50ICgpIHtcbiAgICBsZXQgY291bnQgPSAwXG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMubGF5ZXJzLnZhbHVlcygpKSB7XG4gICAgICBjb3VudCArPSBpLmdldE1hcmtlckNvdW50KClcbiAgICB9XG4gICAgcmV0dXJuIGNvdW50XG4gIH1cblxuICBwdWJsaWMgKiB2YWx1ZXMgKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiBldmVudFJhbmdlVHlwZVZhbHMpe1xuICAgICAgeWllbGQgdGhpcy50YWJsZVtpXVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyAqIGVudHJpZXMgKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiBldmVudFJhbmdlVHlwZVZhbHMpe1xuICAgICAgeWllbGQgW2ksIHRoaXMudGFibGVbaV1dXG4gICAgfVxuICB9XG59XG4iXX0=