"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
class EventTable {
    constructor(editor, groups) {
        this.editor = editor;
        this.table = Object.create(null);
        for (const i of utils_1.eventRangeTypeVals) {
            this.table[i] = new Map();
        }
        this.layers = new Set();
        for (const i of groups) {
            const layer = this.editor.addMarkerLayer();
            this.layers.add(layer);
            for (const { type, source } of i) {
                this.table[type].set(source, layer);
            }
        }
    }
    destroy() {
        for (const i of this.layers.values()) {
            i.destroy();
        }
        for (const i of this.values()) {
            i.clear();
        }
    }
    get(type, source) {
        const tbl = this.table[type];
        let res = tbl.get(source);
        if (!res) {
            res = tbl.get(undefined);
        }
        if (!res) {
            throw new Error(`Failed to classify ${type}:${source}`);
        }
        return res;
    }
    clear() {
        for (const i of this.layers.values()) {
            i.clear();
        }
    }
    getMarkerCount() {
        let count = 0;
        for (const i of this.layers.values()) {
            count += i.getMarkerCount();
        }
        return count;
    }
    *values() {
        for (const i of utils_1.eventRangeTypeVals) {
            yield this.table[i];
        }
    }
    *entries() {
        for (const i of utils_1.eventRangeTypeVals) {
            yield [i, this.table[i]];
        }
    }
}
exports.EventTable = EventTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtdGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZWRpdG9yLWNvbnRyb2wvZXZlbnQtdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxvQ0FBMkM7QUFJM0M7SUFLRSxZQUFxQixNQUFrQixFQUFFLE1BQXNCO1FBQTFDLFdBQU0sR0FBTixNQUFNLENBQVk7UUFFckMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2hDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLDBCQUFrQixDQUFDLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7UUFDM0IsQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtRQUN2QixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUE7WUFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDdEIsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFDckMsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRU0sT0FBTztRQUNaLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUNiLENBQUM7UUFDRCxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlCLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNYLENBQUM7SUFDSCxDQUFDO0lBRU0sR0FBRyxDQUFFLElBQXlCLEVBQUUsTUFBZTtRQUNwRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBZ0QsQ0FBQTtRQUMzRSxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3pCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNULEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQzFCLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixJQUFJLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQTtRQUN6RCxDQUFDO1FBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQTtJQUNaLENBQUM7SUFFTSxLQUFLO1FBQ1YsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ1gsQ0FBQztJQUNILENBQUM7SUFFTSxjQUFjO1FBQ25CLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQTtRQUNiLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLEtBQUssSUFBSSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUE7UUFDN0IsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUE7SUFDZCxDQUFDO0lBRUQsQ0FBUyxNQUFNO1FBQ2IsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksMEJBQWtCLENBQUMsQ0FBQSxDQUFDO1lBQ2xDLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNyQixDQUFDO0lBQ0gsQ0FBQztJQUVELENBQVMsT0FBTztRQUNkLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLDBCQUFrQixDQUFDLENBQUEsQ0FBQztZQUNsQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUMxQixDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBbkVELGdDQW1FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VGV4dEVkaXRvciwgRGlzcGxheU1hcmtlckxheWVyfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHtldmVudFJhbmdlVHlwZVZhbHN9IGZyb20gJy4uL3V0aWxzJ1xuXG5leHBvcnQgdHlwZSBJTWFya2VyR3JvdXAgPSBBcnJheTx7dHlwZTogVVBJLlRFdmVudFJhbmdlVHlwZSwgc291cmNlPzogc3RyaW5nfT5cblxuZXhwb3J0IGNsYXNzIEV2ZW50VGFibGUge1xuICBwcml2YXRlIHRhYmxlOiB7XG4gICAgW0sgaW4gVVBJLlRFdmVudFJhbmdlVHlwZV06IE1hcDxzdHJpbmcgfCB1bmRlZmluZWQsIERpc3BsYXlNYXJrZXJMYXllcj5cbiAgfVxuICBwcml2YXRlIGxheWVyczogU2V0PERpc3BsYXlNYXJrZXJMYXllcj5cbiAgY29uc3RydWN0b3IgKHByaXZhdGUgZWRpdG9yOiBUZXh0RWRpdG9yLCBncm91cHM6IElNYXJrZXJHcm91cFtdKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLW51bGwta2V5d29yZFxuICAgIHRoaXMudGFibGUgPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gICAgZm9yIChjb25zdCBpIG9mIGV2ZW50UmFuZ2VUeXBlVmFscykge1xuICAgICAgdGhpcy50YWJsZVtpXSA9IG5ldyBNYXAoKVxuICAgIH1cbiAgICB0aGlzLmxheWVycyA9IG5ldyBTZXQoKVxuICAgIGZvciAoY29uc3QgaSBvZiBncm91cHMpIHtcbiAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5lZGl0b3IuYWRkTWFya2VyTGF5ZXIoKVxuICAgICAgdGhpcy5sYXllcnMuYWRkKGxheWVyKVxuICAgICAgZm9yIChjb25zdCB7dHlwZSwgc291cmNlfSBvZiBpKSB7XG4gICAgICAgIHRoaXMudGFibGVbdHlwZV0uc2V0KHNvdXJjZSwgbGF5ZXIpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGRlc3Ryb3kgKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLmxheWVycy52YWx1ZXMoKSkge1xuICAgICAgaS5kZXN0cm95KClcbiAgICB9XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMudmFsdWVzKCkpIHtcbiAgICAgIGkuY2xlYXIoKVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXQgKHR5cGU6IFVQSS5URXZlbnRSYW5nZVR5cGUsIHNvdXJjZT86IHN0cmluZykge1xuICAgIGNvbnN0IHRibCA9IHRoaXMudGFibGVbdHlwZV0gYXMgTWFwPHN0cmluZyB8IHVuZGVmaW5lZCwgRGlzcGxheU1hcmtlckxheWVyPlxuICAgIGxldCByZXMgPSB0YmwuZ2V0KHNvdXJjZSlcbiAgICBpZiAoIXJlcykge1xuICAgICAgcmVzID0gdGJsLmdldCh1bmRlZmluZWQpXG4gICAgfVxuICAgIGlmICghcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBjbGFzc2lmeSAke3R5cGV9OiR7c291cmNlfWApXG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIHB1YmxpYyBjbGVhciAoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMubGF5ZXJzLnZhbHVlcygpKSB7XG4gICAgICBpLmNsZWFyKClcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0TWFya2VyQ291bnQgKCkge1xuICAgIGxldCBjb3VudCA9IDBcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5sYXllcnMudmFsdWVzKCkpIHtcbiAgICAgIGNvdW50ICs9IGkuZ2V0TWFya2VyQ291bnQoKVxuICAgIH1cbiAgICByZXR1cm4gY291bnRcbiAgfVxuXG4gIHB1YmxpYyAqIHZhbHVlcyAoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIGV2ZW50UmFuZ2VUeXBlVmFscyl7XG4gICAgICB5aWVsZCB0aGlzLnRhYmxlW2ldXG4gICAgfVxuICB9XG5cbiAgcHVibGljICogZW50cmllcyAoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIGV2ZW50UmFuZ2VUeXBlVmFscyl7XG4gICAgICB5aWVsZCBbaSwgdGhpcy50YWJsZVtpXV1cbiAgICB9XG4gIH1cbn1cbiJdfQ==