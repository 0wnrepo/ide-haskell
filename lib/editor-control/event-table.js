"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
class EventTable {
    constructor(editor, groups) {
        this.editor = editor;
        this.table = Object.create(null);
        for (const i of utils_1.eventRangeTypeVals) {
            this.table[i] = new Map();
        }
        this.layers = new Set();
        for (const i of groups) {
            const layer = this.editor.addMarkerLayer();
            this.layers.add(layer);
            for (const { type, source } of i) {
                this.table[type].set(source, layer);
            }
        }
    }
    destroy() {
        for (const i of this.layers.values()) {
            i.destroy();
        }
        for (const i of this.values()) {
            i.clear();
        }
    }
    get(type, source) {
        const tbl = this.table[type];
        let res = tbl.get(source);
        if (!res) {
            res = tbl.get(undefined);
        }
        if (!res) {
            throw new Error(`Failed to classify ${type}:${source}`);
        }
        return res;
    }
    clear() {
        for (const i of this.layers.values()) {
            i.clear();
        }
    }
    getMarkerCount() {
        let count = 0;
        for (const i of this.layers.values()) {
            count += i.getMarkerCount();
        }
        return count;
    }
    *values() {
        for (const i of utils_1.eventRangeTypeVals) {
            yield this.table[i];
        }
    }
    *entries() {
        for (const i of utils_1.eventRangeTypeVals) {
            yield [i, this.table[i]];
        }
    }
}
exports.EventTable = EventTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtdGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZWRpdG9yLWNvbnRyb2wvZXZlbnQtdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxvQ0FBNkM7QUFVN0M7SUFHRSxZQUFvQixNQUFrQixFQUFFLE1BQXNCO1FBQTFDLFdBQU0sR0FBTixNQUFNLENBQVk7UUFFcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2hDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLDBCQUFrQixDQUFDLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7UUFDM0IsQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtRQUN2QixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUE7WUFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDdEIsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBZ0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFBO1lBQ3JELENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVNLE9BQU87UUFDWixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDYixDQUFDO1FBQ0QsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM5QixDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDWCxDQUFDO0lBQ0gsQ0FBQztJQUVNLEdBQUcsQ0FBQyxJQUF5QixFQUFFLE1BQWU7UUFDbkQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQWdELENBQUE7UUFDM0UsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN6QixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDVCxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUMxQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsSUFBSSxJQUFJLE1BQU0sRUFBRSxDQUFDLENBQUE7UUFDekQsQ0FBQztRQUNELE1BQU0sQ0FBQyxHQUFHLENBQUE7SUFDWixDQUFDO0lBRU0sS0FBSztRQUNWLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNYLENBQUM7SUFDSCxDQUFDO0lBRU0sY0FBYztRQUNuQixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUE7UUFDYixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyQyxLQUFLLElBQUksQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQzdCLENBQUM7UUFDRCxNQUFNLENBQUMsS0FBSyxDQUFBO0lBQ2QsQ0FBQztJQUVNLENBQUUsTUFBTTtRQUNiLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLDBCQUFrQixDQUFDLENBQUMsQ0FBQztZQUNuQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFlLENBQUE7UUFDbkMsQ0FBQztJQUNILENBQUM7SUFFTSxDQUFFLE9BQU87UUFDZCxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSwwQkFBa0IsQ0FBQyxDQUFDLENBQUM7WUFDbkMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDMUIsQ0FBQztJQUNILENBQUM7Q0FDRjtBQWpFRCxnQ0FpRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXh0RWRpdG9yLCBEaXNwbGF5TWFya2VyTGF5ZXIgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgZXZlbnRSYW5nZVR5cGVWYWxzIH0gZnJvbSAnLi4vdXRpbHMnXG5cbmV4cG9ydCB0eXBlIElNYXJrZXJHcm91cCA9IEFycmF5PHsgdHlwZTogVVBJLlRFdmVudFJhbmdlVHlwZSwgc291cmNlPzogc3RyaW5nIH0+XG5cbmV4cG9ydCB0eXBlIFRUYWJsZUNlbGwgPSBNYXA8c3RyaW5nIHwgdW5kZWZpbmVkLCBEaXNwbGF5TWFya2VyTGF5ZXI+XG5cbmV4cG9ydCB0eXBlIFRUYWJsZSA9IHtcbiAgW0sgaW4gVVBJLlRFdmVudFJhbmdlVHlwZV06IFRUYWJsZUNlbGxcbn1cblxuZXhwb3J0IGNsYXNzIEV2ZW50VGFibGUge1xuICBwcml2YXRlIHRhYmxlOiBUVGFibGVcbiAgcHJpdmF0ZSBsYXllcnM6IFNldDxEaXNwbGF5TWFya2VyTGF5ZXI+XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWRpdG9yOiBUZXh0RWRpdG9yLCBncm91cHM6IElNYXJrZXJHcm91cFtdKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLW51bGwta2V5d29yZCBuby11bnNhZmUtYW55XG4gICAgdGhpcy50YWJsZSA9IE9iamVjdC5jcmVhdGUobnVsbClcbiAgICBmb3IgKGNvbnN0IGkgb2YgZXZlbnRSYW5nZVR5cGVWYWxzKSB7XG4gICAgICB0aGlzLnRhYmxlW2ldID0gbmV3IE1hcCgpXG4gICAgfVxuICAgIHRoaXMubGF5ZXJzID0gbmV3IFNldCgpXG4gICAgZm9yIChjb25zdCBpIG9mIGdyb3Vwcykge1xuICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLmVkaXRvci5hZGRNYXJrZXJMYXllcigpXG4gICAgICB0aGlzLmxheWVycy5hZGQobGF5ZXIpXG4gICAgICBmb3IgKGNvbnN0IHsgdHlwZSwgc291cmNlIH0gb2YgaSkge1xuICAgICAgICAodGhpcy50YWJsZVt0eXBlXSBhcyBUVGFibGVDZWxsKS5zZXQoc291cmNlLCBsYXllcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5sYXllcnMudmFsdWVzKCkpIHtcbiAgICAgIGkuZGVzdHJveSgpXG4gICAgfVxuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLnZhbHVlcygpKSB7XG4gICAgICBpLmNsZWFyKClcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0KHR5cGU6IFVQSS5URXZlbnRSYW5nZVR5cGUsIHNvdXJjZT86IHN0cmluZykge1xuICAgIGNvbnN0IHRibCA9IHRoaXMudGFibGVbdHlwZV0gYXMgTWFwPHN0cmluZyB8IHVuZGVmaW5lZCwgRGlzcGxheU1hcmtlckxheWVyPlxuICAgIGxldCByZXMgPSB0YmwuZ2V0KHNvdXJjZSlcbiAgICBpZiAoIXJlcykge1xuICAgICAgcmVzID0gdGJsLmdldCh1bmRlZmluZWQpXG4gICAgfVxuICAgIGlmICghcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBjbGFzc2lmeSAke3R5cGV9OiR7c291cmNlfWApXG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIHB1YmxpYyBjbGVhcigpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5sYXllcnMudmFsdWVzKCkpIHtcbiAgICAgIGkuY2xlYXIoKVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRNYXJrZXJDb3VudCgpIHtcbiAgICBsZXQgY291bnQgPSAwXG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMubGF5ZXJzLnZhbHVlcygpKSB7XG4gICAgICBjb3VudCArPSBpLmdldE1hcmtlckNvdW50KClcbiAgICB9XG4gICAgcmV0dXJuIGNvdW50XG4gIH1cblxuICBwdWJsaWMgKiB2YWx1ZXMoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIGV2ZW50UmFuZ2VUeXBlVmFscykge1xuICAgICAgeWllbGQgdGhpcy50YWJsZVtpXSBhcyBUVGFibGVDZWxsXG4gICAgfVxuICB9XG5cbiAgcHVibGljICogZW50cmllcygpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgZXZlbnRSYW5nZVR5cGVWYWxzKSB7XG4gICAgICB5aWVsZCBbaSwgdGhpcy50YWJsZVtpXV1cbiAgICB9XG4gIH1cbn1cbiJdfQ==