"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const enumVals = [
    "context",
    "keyboard",
    "mouse",
    "selection",
];
function isTEventRangeType(x) {
    return typeof x === 'string' && enumVals.includes(x);
}
exports.isTEventRangeType = isTEventRangeType;
class EventTable {
    constructor(editor, groups) {
        this.editor = editor;
        this.table = Object.create(null);
        for (const i of enumVals) {
            this.table[i] = new Map();
        }
        this.layers = new Set();
        for (const i of groups) {
            const layer = this.editor.addMarkerLayer();
            this.layers.add(layer);
            for (const { type, source } of i) {
                this.table[type].set(source, layer);
            }
        }
    }
    destroy() {
        for (const i of this.layers.values()) {
            i.destroy();
        }
        for (const i of this.values()) {
            i.clear();
        }
    }
    get(type, source) {
        let res = this.table[type].get(source);
        if (!res) {
            res = this.table[type].get(undefined);
        }
        if (!res) {
            throw new Error(`Failed to classify ${type}:${source}`);
        }
        return res;
    }
    clear() {
        for (const i of this.layers.values()) {
            i.clear();
        }
    }
    getMarkerCount() {
        let count = 0;
        for (const i of this.layers.values()) {
            count += i.getMarkerCount();
        }
        return count;
    }
    *values() {
        for (const i of enumVals) {
            yield this.table[i];
        }
    }
    *entries() {
        for (const i of enumVals) {
            yield [i, this.table[i]];
        }
    }
}
exports.EventTable = EventTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtdGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZWRpdG9yLWNvbnRyb2wvZXZlbnQtdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQSxNQUFNLFFBQVEsR0FBRzs7Ozs7Q0FLaEIsQ0FBQTtBQUVELDJCQUFtQyxDQUFTO0lBQzFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUF3QixDQUFDLENBQUE7QUFDN0UsQ0FBQztBQUZELDhDQUVDO0FBSUQ7SUFLRSxZQUFxQixNQUFrQixFQUFFLE1BQXNCO1FBQTFDLFdBQU0sR0FBTixNQUFNLENBQVk7UUFFckMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2hDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBO1FBQzNCLENBQUM7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7UUFDdkIsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN2QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFBO1lBQzFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3RCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFBO1lBQ3JDLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVNLE9BQU87UUFDWixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDYixDQUFDO1FBQ0QsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM5QixDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDWCxDQUFDO0lBQ0gsQ0FBQztJQUVNLEdBQUcsQ0FBRSxJQUF5QixFQUFFLE1BQWU7UUFDcEQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDdEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ1QsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3ZDLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixJQUFJLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQTtRQUN6RCxDQUFDO1FBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQTtJQUNaLENBQUM7SUFFTSxLQUFLO1FBQ1YsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ1gsQ0FBQztJQUNILENBQUM7SUFFTSxjQUFjO1FBQ25CLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQTtRQUNiLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLEtBQUssSUFBSSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUE7UUFDN0IsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUE7SUFDZCxDQUFDO0lBRUQsQ0FBUyxNQUFNO1FBQ2IsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLENBQUEsQ0FBQztZQUN4QixNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDckIsQ0FBQztJQUNILENBQUM7SUFFRCxDQUFTLE9BQU87UUFDZCxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQSxDQUFDO1lBQ3hCLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzFCLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFsRUQsZ0NBa0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgVGV4dEVkaXRvciwgRGlzcGxheU1hcmtlckxheWVyXG59IGZyb20gJ2F0b20nXG5cbmNvbnN0IGVudW1WYWxzID0gW1xuICBVUEkuVEV2ZW50UmFuZ2VUeXBlLmNvbnRleHQsXG4gIFVQSS5URXZlbnRSYW5nZVR5cGUua2V5Ym9hcmQsXG4gIFVQSS5URXZlbnRSYW5nZVR5cGUubW91c2UsXG4gIFVQSS5URXZlbnRSYW5nZVR5cGUuc2VsZWN0aW9uLFxuXVxuXG5leHBvcnQgZnVuY3Rpb24gaXNURXZlbnRSYW5nZVR5cGUgKHg6IE9iamVjdCk6IHggaXMgVVBJLlRFdmVudFJhbmdlVHlwZSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ3N0cmluZycgJiYgZW51bVZhbHMuaW5jbHVkZXMoeCBhcyBVUEkuVEV2ZW50UmFuZ2VUeXBlKVxufVxuXG5leHBvcnQgdHlwZSBJTWFya2VyR3JvdXAgPSBBcnJheTx7dHlwZTogVVBJLlRFdmVudFJhbmdlVHlwZSwgc291cmNlPzogc3RyaW5nfT5cblxuZXhwb3J0IGNsYXNzIEV2ZW50VGFibGUge1xuICBwcml2YXRlIHRhYmxlOiB7XG4gICAgW0sgaW4gVVBJLlRFdmVudFJhbmdlVHlwZV06IE1hcDxzdHJpbmcgfCB1bmRlZmluZWQsIERpc3BsYXlNYXJrZXJMYXllcj5cbiAgfVxuICBwcml2YXRlIGxheWVyczogU2V0PERpc3BsYXlNYXJrZXJMYXllcj5cbiAgY29uc3RydWN0b3IgKHByaXZhdGUgZWRpdG9yOiBUZXh0RWRpdG9yLCBncm91cHM6IElNYXJrZXJHcm91cFtdKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLW51bGwta2V5d29yZFxuICAgIHRoaXMudGFibGUgPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gICAgZm9yIChjb25zdCBpIG9mIGVudW1WYWxzKSB7XG4gICAgICB0aGlzLnRhYmxlW2ldID0gbmV3IE1hcCgpXG4gICAgfVxuICAgIHRoaXMubGF5ZXJzID0gbmV3IFNldCgpXG4gICAgZm9yIChjb25zdCBpIG9mIGdyb3Vwcykge1xuICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLmVkaXRvci5hZGRNYXJrZXJMYXllcigpXG4gICAgICB0aGlzLmxheWVycy5hZGQobGF5ZXIpXG4gICAgICBmb3IgKGNvbnN0IHt0eXBlLCBzb3VyY2V9IG9mIGkpIHtcbiAgICAgICAgdGhpcy50YWJsZVt0eXBlXS5zZXQoc291cmNlLCBsYXllcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSAoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMubGF5ZXJzLnZhbHVlcygpKSB7XG4gICAgICBpLmRlc3Ryb3koKVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy52YWx1ZXMoKSkge1xuICAgICAgaS5jbGVhcigpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldCAodHlwZTogVVBJLlRFdmVudFJhbmdlVHlwZSwgc291cmNlPzogc3RyaW5nKSB7XG4gICAgbGV0IHJlcyA9IHRoaXMudGFibGVbdHlwZV0uZ2V0KHNvdXJjZSlcbiAgICBpZiAoIXJlcykge1xuICAgICAgcmVzID0gdGhpcy50YWJsZVt0eXBlXS5nZXQodW5kZWZpbmVkKVxuICAgIH1cbiAgICBpZiAoIXJlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gY2xhc3NpZnkgJHt0eXBlfToke3NvdXJjZX1gKVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICBwdWJsaWMgY2xlYXIgKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLmxheWVycy52YWx1ZXMoKSkge1xuICAgICAgaS5jbGVhcigpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldE1hcmtlckNvdW50ICgpIHtcbiAgICBsZXQgY291bnQgPSAwXG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMubGF5ZXJzLnZhbHVlcygpKSB7XG4gICAgICBjb3VudCArPSBpLmdldE1hcmtlckNvdW50KClcbiAgICB9XG4gICAgcmV0dXJuIGNvdW50XG4gIH1cblxuICBwdWJsaWMgKiB2YWx1ZXMgKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiBlbnVtVmFscyl7XG4gICAgICB5aWVsZCB0aGlzLnRhYmxlW2ldXG4gICAgfVxuICB9XG5cbiAgcHVibGljICogZW50cmllcyAoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIGVudW1WYWxzKXtcbiAgICAgIHlpZWxkIFtpLCB0aGlzLnRhYmxlW2ldXVxuICAgIH1cbiAgfVxufVxuIl19