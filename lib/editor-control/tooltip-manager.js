"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tooltip_view_1 = require("./tooltip-view");
const event_table_1 = require("./event-table");
exports.TEventRangeType = event_table_1.TEventRangeType;
class TooltipManager {
    constructor(editor) {
        this.editor = editor;
        this.markers = new event_table_1.EventTable(editor, [
            [{ type: 'keyboard' }, { type: 'context' }],
            [{ type: 'mouse' }, { type: 'selection' }],
        ]);
    }
    dispose() {
        this.markers.destroy();
    }
    show(range, text, type, source, detail) {
        this.hide(type, source);
        const highlightMarker = this.markers.get(type, source).markBufferRange(range);
        highlightMarker.setProperties(detail);
        this.decorate(highlightMarker, new tooltip_view_1.TooltipMessage(text));
    }
    hide(type, source, template) {
        if (!type) {
            this.markers.clear();
            return;
        }
        if (!template) {
            this.markers.get(type, source).clear();
        }
        else {
            this.markers.get(type, source).findMarkers(template).forEach((m) => m.destroy());
        }
    }
    has(type, source, template) {
        if (!type) {
            return this.markers.getMarkerCount() > 0;
        }
        if (!template) {
            return this.markers.get(type, source).getMarkerCount();
        }
        else {
            return this.markers.get(type, source).findMarkers(template).length > 0;
        }
    }
    decorate(marker, tooltipView) {
        this.editor.decorateMarker(marker, {
            type: 'overlay',
            position: 'tail',
            item: tooltipView
        });
        this.editor.decorateMarker(marker, {
            type: 'highlight',
            class: 'ide-haskell-type'
        });
    }
}
exports.TooltipManager = TooltipManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VkaXRvci1jb250cm9sL3Rvb2x0aXAtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLGlEQUE2QztBQUU3QywrQ0FBeUQ7QUFDakQsMEJBRFksNkJBQWUsQ0FDWjtBQUt2QjtJQUVFLFlBQXFCLE1BQWtCO1FBQWxCLFdBQU0sR0FBTixNQUFNLENBQVk7UUFDckMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLHdCQUFVLENBQUMsTUFBTSxFQUFFO1lBQ3BDLENBQUMsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFDLENBQUM7WUFDdkMsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUMsRUFBRSxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUMsQ0FBQztTQUN2QyxDQUFDLENBQUE7SUFDSixDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDeEIsQ0FBQztJQUVNLElBQUksQ0FDVCxLQUFZLEVBQUUsSUFBcUMsRUFDbkQsSUFBcUIsRUFBRSxNQUFjLEVBQUUsTUFBeUI7UUFFaEUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDdkIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUM3RSxlQUFlLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLElBQUksNkJBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBQzFELENBQUM7SUFFTSxJQUFJLENBQUUsSUFBc0IsRUFBRSxNQUFlLEVBQUUsUUFBNEI7UUFDaEYsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtZQUNwQixNQUFNLENBQUE7UUFDUixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3hDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO1FBQ2xGLENBQUM7SUFDSCxDQUFDO0lBRU0sR0FBRyxDQUFFLElBQXNCLEVBQUUsTUFBZSxFQUFFLFFBQTRCO1FBQy9FLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUMxQyxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtRQUN4RCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO1FBQ3hFLENBQUM7SUFDSCxDQUFDO0lBRU8sUUFBUSxDQUFFLE1BQXFCLEVBQUUsV0FBMkI7UUFDbEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ2pDLElBQUksRUFBRSxTQUFTO1lBQ2YsUUFBUSxFQUFFLE1BQU07WUFDaEIsSUFBSSxFQUFFLFdBQVc7U0FDbEIsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ2pDLElBQUksRUFBRSxXQUFXO1lBQ2pCLEtBQUssRUFBRSxrQkFBa0I7U0FDMUIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGO0FBekRELHdDQXlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFJhbmdlLCBUZXh0RWRpdG9yLCBEaXNwbGF5TWFya2VyLFxufSBmcm9tICdhdG9tJ1xuXG5pbXBvcnQge1Rvb2x0aXBNZXNzYWdlfSBmcm9tICcuL3Rvb2x0aXAtdmlldydcbmltcG9ydCB7TWVzc2FnZU9iamVjdH0gZnJvbSAnLi4vdXRpbHMnXG5pbXBvcnQge0V2ZW50VGFibGUsIFRFdmVudFJhbmdlVHlwZX0gZnJvbSAnLi9ldmVudC10YWJsZSdcbmV4cG9ydCB7VEV2ZW50UmFuZ2VUeXBlfVxuZXhwb3J0IGludGVyZmFjZSBJTWFya2VyUHJvcGVydGllcyB7XG4gIHBlcnNpc3RPbkN1cnNvck1vdmU6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNsYXNzIFRvb2x0aXBNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBtYXJrZXJzOiBFdmVudFRhYmxlXG4gIGNvbnN0cnVjdG9yIChwcml2YXRlIGVkaXRvcjogVGV4dEVkaXRvcikge1xuICAgIHRoaXMubWFya2VycyA9IG5ldyBFdmVudFRhYmxlKGVkaXRvciwgW1xuICAgICAgW3t0eXBlOiAna2V5Ym9hcmQnfSwge3R5cGU6ICdjb250ZXh0J31dLFxuICAgICAgW3t0eXBlOiAnbW91c2UnfSwge3R5cGU6ICdzZWxlY3Rpb24nfV0sXG4gICAgXSlcbiAgfVxuXG4gIHB1YmxpYyBkaXNwb3NlICgpIHtcbiAgICB0aGlzLm1hcmtlcnMuZGVzdHJveSgpXG4gIH1cblxuICBwdWJsaWMgc2hvdyAoXG4gICAgcmFuZ2U6IFJhbmdlLCB0ZXh0OiBNZXNzYWdlT2JqZWN0IHwgTWVzc2FnZU9iamVjdFtdLFxuICAgIHR5cGU6IFRFdmVudFJhbmdlVHlwZSwgc291cmNlOiBzdHJpbmcsIGRldGFpbDogSU1hcmtlclByb3BlcnRpZXNcbiAgKSB7XG4gICAgdGhpcy5oaWRlKHR5cGUsIHNvdXJjZSlcbiAgICBjb25zdCBoaWdobGlnaHRNYXJrZXIgPSB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkubWFya0J1ZmZlclJhbmdlKHJhbmdlKVxuICAgIGhpZ2hsaWdodE1hcmtlci5zZXRQcm9wZXJ0aWVzKGRldGFpbClcbiAgICB0aGlzLmRlY29yYXRlKGhpZ2hsaWdodE1hcmtlciwgbmV3IFRvb2x0aXBNZXNzYWdlKHRleHQpKVxuICB9XG5cbiAgcHVibGljIGhpZGUgKHR5cGU/OiBURXZlbnRSYW5nZVR5cGUsIHNvdXJjZT86IHN0cmluZywgdGVtcGxhdGU/OiBJTWFya2VyUHJvcGVydGllcykge1xuICAgIGlmICghdHlwZSkge1xuICAgICAgdGhpcy5tYXJrZXJzLmNsZWFyKClcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkuY2xlYXIoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkuZmluZE1hcmtlcnModGVtcGxhdGUpLmZvckVhY2goKG0pID0+IG0uZGVzdHJveSgpKVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBoYXMgKHR5cGU/OiBURXZlbnRSYW5nZVR5cGUsIHNvdXJjZT86IHN0cmluZywgdGVtcGxhdGU/OiBJTWFya2VyUHJvcGVydGllcykge1xuICAgIGlmICghdHlwZSkge1xuICAgICAgcmV0dXJuIHRoaXMubWFya2Vycy5nZXRNYXJrZXJDb3VudCgpID4gMFxuICAgIH1cbiAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXJrZXJzLmdldCh0eXBlLCBzb3VyY2UpLmdldE1hcmtlckNvdW50KClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMubWFya2Vycy5nZXQodHlwZSwgc291cmNlKS5maW5kTWFya2Vycyh0ZW1wbGF0ZSkubGVuZ3RoID4gMFxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZGVjb3JhdGUgKG1hcmtlcjogRGlzcGxheU1hcmtlciwgdG9vbHRpcFZpZXc6IFRvb2x0aXBNZXNzYWdlKSB7XG4gICAgdGhpcy5lZGl0b3IuZGVjb3JhdGVNYXJrZXIobWFya2VyLCB7XG4gICAgICB0eXBlOiAnb3ZlcmxheScsXG4gICAgICBwb3NpdGlvbjogJ3RhaWwnLFxuICAgICAgaXRlbTogdG9vbHRpcFZpZXdcbiAgICB9KVxuICAgIHRoaXMuZWRpdG9yLmRlY29yYXRlTWFya2VyKG1hcmtlciwge1xuICAgICAgdHlwZTogJ2hpZ2hsaWdodCcsXG4gICAgICBjbGFzczogJ2lkZS1oYXNrZWxsLXR5cGUnXG4gICAgfSlcbiAgfVxufVxuIl19