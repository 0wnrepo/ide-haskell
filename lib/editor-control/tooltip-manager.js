"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tooltip_view_1 = require("./tooltip-view");
const event_table_1 = require("./event-table");
class TooltipManager {
    constructor(editor) {
        this.editor = editor;
        this.markers = new event_table_1.EventTable(editor, [
            [{ type: "keyboard" }, { type: "context" }],
            [{ type: "mouse" }, { type: "selection" }],
        ]);
        this.editorElement = atom.views.getView(this.editor);
    }
    dispose() {
        this.markers.destroy();
        this.editorElement.classList.remove('ide-haskell--has-tooltips');
    }
    show(range, text, type, source, detail) {
        this.hide(type, source);
        const highlightMarker = this.markers.get(type, source).markBufferRange(range);
        highlightMarker.setProperties(detail);
        this.decorate(highlightMarker, new tooltip_view_1.TooltipMessage(text));
        this.editorElement.classList.add('ide-haskell--has-tooltips');
    }
    hide(type, source, template) {
        if (!type) {
            this.markers.clear();
            return;
        }
        if (!template) {
            this.markers.get(type, source).clear();
        }
        else {
            this.markers.get(type, source).findMarkers(template).forEach((m) => m.destroy());
        }
        if (!this.has()) {
            this.editorElement.classList.remove('ide-haskell--has-tooltips');
        }
    }
    has(type, source, template) {
        if (!type) {
            return this.markers.getMarkerCount() > 0;
        }
        if (!template) {
            return this.markers.get(type, source).getMarkerCount();
        }
        else {
            return this.markers.get(type, source).findMarkers(template).length > 0;
        }
    }
    decorate(marker, tooltipView) {
        this.editor.decorateMarker(marker, {
            type: 'overlay',
            position: 'tail',
            item: tooltipView,
        });
        this.editor.decorateMarker(marker, {
            type: 'highlight',
            class: 'ide-haskell-type',
        });
    }
}
exports.TooltipManager = TooltipManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VkaXRvci1jb250cm9sL3Rvb2x0aXAtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLGlEQUErQztBQUMvQywrQ0FBMEM7QUFNMUM7SUFHRSxZQUFvQixNQUFrQjtRQUFsQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ3BDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSx3QkFBVSxDQUFDLE1BQU0sRUFBRTtZQUNwQyxDQUFDLEVBQUUsSUFBSSxZQUE4QixFQUFFLEVBQUUsRUFBRSxJQUFJLFdBQTZCLEVBQUUsQ0FBQztZQUMvRSxDQUFDLEVBQUUsSUFBSSxTQUEyQixFQUFFLEVBQUUsRUFBRSxJQUFJLGFBQStCLEVBQUUsQ0FBQztTQUMvRSxDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN0RCxDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUE7SUFDbEUsQ0FBQztJQUVNLElBQUksQ0FDVCxLQUFZLEVBQUUsSUFBK0MsRUFDN0QsSUFBeUIsRUFBRSxNQUFjLEVBQUUsTUFBeUI7UUFFcEUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDdkIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUM3RSxlQUFlLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLElBQUksNkJBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ3hELElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO0lBQy9ELENBQUM7SUFFTSxJQUFJLENBQUMsSUFBMEIsRUFBRSxNQUFlLEVBQUUsUUFBNEI7UUFDbkYsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtZQUNwQixNQUFNLENBQUE7UUFDUixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3hDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBZ0IsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUNqRyxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUE7UUFBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFTSxHQUFHLENBQUMsSUFBMEIsRUFBRSxNQUFlLEVBQUUsUUFBNEI7UUFDbEYsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1YsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQzFDLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQ3hELENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7UUFDeEUsQ0FBQztJQUNILENBQUM7SUFFTyxRQUFRLENBQUMsTUFBcUIsRUFBRSxXQUEyQjtRQUNqRSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUU7WUFDakMsSUFBSSxFQUFFLFNBQVM7WUFDZixRQUFRLEVBQUUsTUFBTTtZQUNoQixJQUFJLEVBQUUsV0FBVztTQUNsQixDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUU7WUFDakMsSUFBSSxFQUFFLFdBQVc7WUFDakIsS0FBSyxFQUFFLGtCQUFrQjtTQUMxQixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0Y7QUE5REQsd0NBOERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgUmFuZ2UsIFRleHRFZGl0b3IsIERpc3BsYXlNYXJrZXIsXG59IGZyb20gJ2F0b20nXG5cbmltcG9ydCB7IFRvb2x0aXBNZXNzYWdlIH0gZnJvbSAnLi90b29sdGlwLXZpZXcnXG5pbXBvcnQgeyBFdmVudFRhYmxlIH0gZnJvbSAnLi9ldmVudC10YWJsZSdcblxuZXhwb3J0IGludGVyZmFjZSBJTWFya2VyUHJvcGVydGllcyB7XG4gIHBlcnNpc3RlbnQ6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNsYXNzIFRvb2x0aXBNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBtYXJrZXJzOiBFdmVudFRhYmxlXG4gIHByaXZhdGUgZWRpdG9yRWxlbWVudDogSFRNTEVsZW1lbnRcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlZGl0b3I6IFRleHRFZGl0b3IpIHtcbiAgICB0aGlzLm1hcmtlcnMgPSBuZXcgRXZlbnRUYWJsZShlZGl0b3IsIFtcbiAgICAgIFt7IHR5cGU6IFVQSS5URXZlbnRSYW5nZVR5cGUua2V5Ym9hcmQgfSwgeyB0eXBlOiBVUEkuVEV2ZW50UmFuZ2VUeXBlLmNvbnRleHQgfV0sXG4gICAgICBbeyB0eXBlOiBVUEkuVEV2ZW50UmFuZ2VUeXBlLm1vdXNlIH0sIHsgdHlwZTogVVBJLlRFdmVudFJhbmdlVHlwZS5zZWxlY3Rpb24gfV0sXG4gICAgXSlcbiAgICB0aGlzLmVkaXRvckVsZW1lbnQgPSBhdG9tLnZpZXdzLmdldFZpZXcodGhpcy5lZGl0b3IpXG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpIHtcbiAgICB0aGlzLm1hcmtlcnMuZGVzdHJveSgpXG4gICAgdGhpcy5lZGl0b3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lkZS1oYXNrZWxsLS1oYXMtdG9vbHRpcHMnKVxuICB9XG5cbiAgcHVibGljIHNob3coXG4gICAgcmFuZ2U6IFJhbmdlLCB0ZXh0OiBVUEkuSU1lc3NhZ2VPYmplY3QgfCBVUEkuSU1lc3NhZ2VPYmplY3RbXSxcbiAgICB0eXBlOiBVUEkuVEV2ZW50UmFuZ2VUeXBlLCBzb3VyY2U6IHN0cmluZywgZGV0YWlsOiBJTWFya2VyUHJvcGVydGllcyxcbiAgKSB7XG4gICAgdGhpcy5oaWRlKHR5cGUsIHNvdXJjZSlcbiAgICBjb25zdCBoaWdobGlnaHRNYXJrZXIgPSB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkubWFya0J1ZmZlclJhbmdlKHJhbmdlKVxuICAgIGhpZ2hsaWdodE1hcmtlci5zZXRQcm9wZXJ0aWVzKGRldGFpbClcbiAgICB0aGlzLmRlY29yYXRlKGhpZ2hsaWdodE1hcmtlciwgbmV3IFRvb2x0aXBNZXNzYWdlKHRleHQpKVxuICAgIHRoaXMuZWRpdG9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpZGUtaGFza2VsbC0taGFzLXRvb2x0aXBzJylcbiAgfVxuXG4gIHB1YmxpYyBoaWRlKHR5cGU/OiBVUEkuVEV2ZW50UmFuZ2VUeXBlLCBzb3VyY2U/OiBzdHJpbmcsIHRlbXBsYXRlPzogSU1hcmtlclByb3BlcnRpZXMpIHtcbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHRoaXMubWFya2Vycy5jbGVhcigpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgdGhpcy5tYXJrZXJzLmdldCh0eXBlLCBzb3VyY2UpLmNsZWFyKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tYXJrZXJzLmdldCh0eXBlLCBzb3VyY2UpLmZpbmRNYXJrZXJzKHRlbXBsYXRlKS5mb3JFYWNoKChtOiBEaXNwbGF5TWFya2VyKSA9PiBtLmRlc3Ryb3koKSlcbiAgICB9XG4gICAgaWYgKCF0aGlzLmhhcygpKSB7IHRoaXMuZWRpdG9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpZGUtaGFza2VsbC0taGFzLXRvb2x0aXBzJykgfVxuICB9XG5cbiAgcHVibGljIGhhcyh0eXBlPzogVVBJLlRFdmVudFJhbmdlVHlwZSwgc291cmNlPzogc3RyaW5nLCB0ZW1wbGF0ZT86IElNYXJrZXJQcm9wZXJ0aWVzKSB7XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXJrZXJzLmdldE1hcmtlckNvdW50KCkgPiAwXG4gICAgfVxuICAgIGlmICghdGVtcGxhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkuZ2V0TWFya2VyQ291bnQoKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXJrZXJzLmdldCh0eXBlLCBzb3VyY2UpLmZpbmRNYXJrZXJzKHRlbXBsYXRlKS5sZW5ndGggPiAwXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkZWNvcmF0ZShtYXJrZXI6IERpc3BsYXlNYXJrZXIsIHRvb2x0aXBWaWV3OiBUb29sdGlwTWVzc2FnZSkge1xuICAgIHRoaXMuZWRpdG9yLmRlY29yYXRlTWFya2VyKG1hcmtlciwge1xuICAgICAgdHlwZTogJ292ZXJsYXknLFxuICAgICAgcG9zaXRpb246ICd0YWlsJyxcbiAgICAgIGl0ZW06IHRvb2x0aXBWaWV3LFxuICAgIH0pXG4gICAgdGhpcy5lZGl0b3IuZGVjb3JhdGVNYXJrZXIobWFya2VyLCB7XG4gICAgICB0eXBlOiAnaGlnaGxpZ2h0JyxcbiAgICAgIGNsYXNzOiAnaWRlLWhhc2tlbGwtdHlwZScsXG4gICAgfSlcbiAgfVxufVxuIl19