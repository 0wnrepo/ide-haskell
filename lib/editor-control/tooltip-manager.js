"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tooltip_view_1 = require("./tooltip-view");
const event_table_1 = require("./event-table");
const UPI = require("atom-haskell-upi");
class TooltipManager {
    constructor(editor) {
        this.editor = editor;
        this.markers = new event_table_1.EventTable(editor, [
            [{ type: "keyboard" }, { type: "context" }],
            [{ type: "mouse" }, { type: "selection" }],
        ]);
        this.editorElement = atom.views.getView(this.editor);
    }
    dispose() {
        this.markers.destroy();
        this.editorElement.classList.remove('ide-haskell--has-tooltips');
    }
    show(range, text, type, source, detail) {
        this.hide(type, source);
        const highlightMarker = this.markers.get(type, source).markBufferRange(range);
        highlightMarker.setProperties(detail);
        this.decorate(highlightMarker, new tooltip_view_1.TooltipMessage(text));
        this.editorElement.classList.add('ide-haskell--has-tooltips');
    }
    hide(type, source, template) {
        if (!type) {
            this.markers.clear();
            return;
        }
        if (!template) {
            this.markers.get(type, source).clear();
        }
        else {
            this.markers.get(type, source).findMarkers(template).forEach((m) => m.destroy());
        }
        if (!this.has()) {
            this.editorElement.classList.remove('ide-haskell--has-tooltips');
        }
    }
    has(type, source, template) {
        if (!type) {
            return this.markers.getMarkerCount() > 0;
        }
        if (!template) {
            return this.markers.get(type, source).getMarkerCount();
        }
        else {
            return this.markers.get(type, source).findMarkers(template).length > 0;
        }
    }
    decorate(marker, tooltipView) {
        this.editor.decorateMarker(marker, {
            type: 'overlay',
            position: 'tail',
            item: tooltipView,
        });
        this.editor.decorateMarker(marker, {
            type: 'highlight',
            class: 'ide-haskell-type',
        });
    }
}
exports.TooltipManager = TooltipManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VkaXRvci1jb250cm9sL3Rvb2x0aXAtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUErQztBQUMvQywrQ0FBMEM7QUFFMUMsd0NBQXVDO0FBU3ZDO0lBR0UsWUFBb0IsTUFBa0I7UUFBbEIsV0FBTSxHQUFOLE1BQU0sQ0FBWTtRQUNwQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksd0JBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDcEMsQ0FBQyxFQUFFLElBQUksWUFBOEIsRUFBRSxFQUFFLEVBQUUsSUFBSSxXQUE2QixFQUFFLENBQUM7WUFDL0UsQ0FBQyxFQUFFLElBQUksU0FBMkIsRUFBRSxFQUFFLEVBQUUsSUFBSSxhQUErQixFQUFFLENBQUM7U0FDL0UsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDdEQsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO0lBQ2xFLENBQUM7SUFFTSxJQUFJLENBQ1QsS0FBWSxFQUFFLElBQStDLEVBQzdELElBQXlCLEVBQUUsTUFBYyxFQUFFLE1BQXlCO1FBRXBFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQ3ZCLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDN0UsZUFBZSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNyQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxJQUFJLDZCQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUN4RCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0lBRU0sSUFBSSxDQUFDLElBQTBCLEVBQUUsTUFBZSxFQUFFLFFBQTRCO1FBQ25GLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNWLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUE7WUFDcEIsTUFBTSxDQUFBO1FBQ1IsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUN4QyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO1FBQ2pHLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQTtRQUFDLENBQUM7SUFDdkYsQ0FBQztJQUVNLEdBQUcsQ0FBQyxJQUEwQixFQUFFLE1BQWUsRUFBRSxRQUE0QjtRQUNsRixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDVixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDMUMsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUE7UUFDeEQsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtRQUN4RSxDQUFDO0lBQ0gsQ0FBQztJQUVPLFFBQVEsQ0FBQyxNQUFxQixFQUFFLFdBQTJCO1FBQ2pFLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUNqQyxJQUFJLEVBQUUsU0FBUztZQUNmLFFBQVEsRUFBRSxNQUFNO1lBQ2hCLElBQUksRUFBRSxXQUFXO1NBQ2xCLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUNqQyxJQUFJLEVBQUUsV0FBVztZQUNqQixLQUFLLEVBQUUsa0JBQWtCO1NBQzFCLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRjtBQTlERCx3Q0E4REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUb29sdGlwTWVzc2FnZSB9IGZyb20gJy4vdG9vbHRpcC12aWV3J1xuaW1wb3J0IHsgRXZlbnRUYWJsZSB9IGZyb20gJy4vZXZlbnQtdGFibGUnXG5pbXBvcnQgKiBhcyBBdG9tVHlwZXMgZnJvbSAnYXRvbSdcbmltcG9ydCAqIGFzIFVQSSBmcm9tICdhdG9tLWhhc2tlbGwtdXBpJ1xuaW1wb3J0IFJhbmdlID0gQXRvbVR5cGVzLlJhbmdlXG5pbXBvcnQgVGV4dEVkaXRvciA9IEF0b21UeXBlcy5UZXh0RWRpdG9yXG5pbXBvcnQgRGlzcGxheU1hcmtlciA9IEF0b21UeXBlcy5EaXNwbGF5TWFya2VyXG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1hcmtlclByb3BlcnRpZXMgZXh0ZW5kcyBBdG9tVHlwZXMuRmluZERpc3BsYXlNYXJrZXJPcHRpb25zIHtcbiAgcGVyc2lzdGVudDogYm9vbGVhblxufVxuXG5leHBvcnQgY2xhc3MgVG9vbHRpcE1hbmFnZXIge1xuICBwcml2YXRlIG1hcmtlcnM6IEV2ZW50VGFibGVcbiAgcHJpdmF0ZSBlZGl0b3JFbGVtZW50OiBIVE1MRWxlbWVudFxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVkaXRvcjogVGV4dEVkaXRvcikge1xuICAgIHRoaXMubWFya2VycyA9IG5ldyBFdmVudFRhYmxlKGVkaXRvciwgW1xuICAgICAgW3sgdHlwZTogVVBJLlRFdmVudFJhbmdlVHlwZS5rZXlib2FyZCB9LCB7IHR5cGU6IFVQSS5URXZlbnRSYW5nZVR5cGUuY29udGV4dCB9XSxcbiAgICAgIFt7IHR5cGU6IFVQSS5URXZlbnRSYW5nZVR5cGUubW91c2UgfSwgeyB0eXBlOiBVUEkuVEV2ZW50UmFuZ2VUeXBlLnNlbGVjdGlvbiB9XSxcbiAgICBdKVxuICAgIHRoaXMuZWRpdG9yRWxlbWVudCA9IGF0b20udmlld3MuZ2V0Vmlldyh0aGlzLmVkaXRvcilcbiAgfVxuXG4gIHB1YmxpYyBkaXNwb3NlKCkge1xuICAgIHRoaXMubWFya2Vycy5kZXN0cm95KClcbiAgICB0aGlzLmVkaXRvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaWRlLWhhc2tlbGwtLWhhcy10b29sdGlwcycpXG4gIH1cblxuICBwdWJsaWMgc2hvdyhcbiAgICByYW5nZTogUmFuZ2UsIHRleHQ6IFVQSS5JTWVzc2FnZU9iamVjdCB8IFVQSS5JTWVzc2FnZU9iamVjdFtdLFxuICAgIHR5cGU6IFVQSS5URXZlbnRSYW5nZVR5cGUsIHNvdXJjZTogc3RyaW5nLCBkZXRhaWw6IElNYXJrZXJQcm9wZXJ0aWVzLFxuICApIHtcbiAgICB0aGlzLmhpZGUodHlwZSwgc291cmNlKVxuICAgIGNvbnN0IGhpZ2hsaWdodE1hcmtlciA9IHRoaXMubWFya2Vycy5nZXQodHlwZSwgc291cmNlKS5tYXJrQnVmZmVyUmFuZ2UocmFuZ2UpXG4gICAgaGlnaGxpZ2h0TWFya2VyLnNldFByb3BlcnRpZXMoZGV0YWlsKVxuICAgIHRoaXMuZGVjb3JhdGUoaGlnaGxpZ2h0TWFya2VyLCBuZXcgVG9vbHRpcE1lc3NhZ2UodGV4dCkpXG4gICAgdGhpcy5lZGl0b3JFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lkZS1oYXNrZWxsLS1oYXMtdG9vbHRpcHMnKVxuICB9XG5cbiAgcHVibGljIGhpZGUodHlwZT86IFVQSS5URXZlbnRSYW5nZVR5cGUsIHNvdXJjZT86IHN0cmluZywgdGVtcGxhdGU/OiBJTWFya2VyUHJvcGVydGllcykge1xuICAgIGlmICghdHlwZSkge1xuICAgICAgdGhpcy5tYXJrZXJzLmNsZWFyKClcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkuY2xlYXIoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkuZmluZE1hcmtlcnModGVtcGxhdGUpLmZvckVhY2goKG06IERpc3BsYXlNYXJrZXIpID0+IG0uZGVzdHJveSgpKVxuICAgIH1cbiAgICBpZiAoIXRoaXMuaGFzKCkpIHsgdGhpcy5lZGl0b3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lkZS1oYXNrZWxsLS1oYXMtdG9vbHRpcHMnKSB9XG4gIH1cblxuICBwdWJsaWMgaGFzKHR5cGU/OiBVUEkuVEV2ZW50UmFuZ2VUeXBlLCBzb3VyY2U/OiBzdHJpbmcsIHRlbXBsYXRlPzogSU1hcmtlclByb3BlcnRpZXMpIHtcbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcmtlcnMuZ2V0TWFya2VyQ291bnQoKSA+IDBcbiAgICB9XG4gICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMubWFya2Vycy5nZXQodHlwZSwgc291cmNlKS5nZXRNYXJrZXJDb3VudCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkuZmluZE1hcmtlcnModGVtcGxhdGUpLmxlbmd0aCA+IDBcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGRlY29yYXRlKG1hcmtlcjogRGlzcGxheU1hcmtlciwgdG9vbHRpcFZpZXc6IFRvb2x0aXBNZXNzYWdlKSB7XG4gICAgdGhpcy5lZGl0b3IuZGVjb3JhdGVNYXJrZXIobWFya2VyLCB7XG4gICAgICB0eXBlOiAnb3ZlcmxheScsXG4gICAgICBwb3NpdGlvbjogJ3RhaWwnLFxuICAgICAgaXRlbTogdG9vbHRpcFZpZXcsXG4gICAgfSlcbiAgICB0aGlzLmVkaXRvci5kZWNvcmF0ZU1hcmtlcihtYXJrZXIsIHtcbiAgICAgIHR5cGU6ICdoaWdobGlnaHQnLFxuICAgICAgY2xhc3M6ICdpZGUtaGFza2VsbC10eXBlJyxcbiAgICB9KVxuICB9XG59XG4iXX0=