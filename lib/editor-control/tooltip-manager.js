"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tooltip_view_1 = require("./tooltip-view");
const event_table_1 = require("./event-table");
exports.TEventRangeType = event_table_1.TEventRangeType;
class TooltipManager {
    constructor(editor) {
        this.editor = editor;
        this.markers = new event_table_1.EventTable(editor, [
            [{ type: 'keyboard' }, { type: 'context' }],
            [{ type: 'mouse' }, { type: 'selection' }],
        ]);
        this.editorElement = atom.views.getView(this.editor);
    }
    dispose() {
        this.markers.destroy();
        this.editorElement.classList.remove('ide-haskell--has-tooltips');
    }
    show(range, text, type, source, detail) {
        this.hide(type, source);
        const highlightMarker = this.markers.get(type, source).markBufferRange(range);
        highlightMarker.setProperties(detail);
        this.decorate(highlightMarker, new tooltip_view_1.TooltipMessage(text));
        this.editorElement.classList.add('ide-haskell--has-tooltips');
    }
    hide(type, source, template) {
        if (!type) {
            this.markers.clear();
            return;
        }
        if (!template) {
            this.markers.get(type, source).clear();
        }
        else {
            this.markers.get(type, source).findMarkers(template).forEach((m) => m.destroy());
        }
        if (!this.has()) {
            this.editorElement.classList.remove('ide-haskell--has-tooltips');
        }
    }
    has(type, source, template) {
        if (!type) {
            return this.markers.getMarkerCount() > 0;
        }
        if (!template) {
            return this.markers.get(type, source).getMarkerCount();
        }
        else {
            return this.markers.get(type, source).findMarkers(template).length > 0;
        }
    }
    decorate(marker, tooltipView) {
        this.editor.decorateMarker(marker, {
            type: 'overlay',
            position: 'tail',
            item: tooltipView
        });
        this.editor.decorateMarker(marker, {
            type: 'highlight',
            class: 'ide-haskell-type'
        });
    }
}
exports.TooltipManager = TooltipManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VkaXRvci1jb250cm9sL3Rvb2x0aXAtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLGlEQUE2QztBQUU3QywrQ0FBeUQ7QUFDakQsMEJBRFksNkJBQWUsQ0FDWjtBQUt2QjtJQUdFLFlBQXFCLE1BQWtCO1FBQWxCLFdBQU0sR0FBTixNQUFNLENBQVk7UUFDckMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLHdCQUFVLENBQUMsTUFBTSxFQUFFO1lBQ3BDLENBQUMsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFDLENBQUM7WUFDdkMsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUMsRUFBRSxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUMsQ0FBQztTQUN2QyxDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN0RCxDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUE7SUFDbEUsQ0FBQztJQUVNLElBQUksQ0FDVCxLQUFZLEVBQUUsSUFBcUMsRUFDbkQsSUFBcUIsRUFBRSxNQUFjLEVBQUUsTUFBeUI7UUFFaEUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDdkIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUM3RSxlQUFlLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLElBQUksNkJBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ3hELElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO0lBQy9ELENBQUM7SUFFTSxJQUFJLENBQUUsSUFBc0IsRUFBRSxNQUFlLEVBQUUsUUFBNEI7UUFDaEYsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtZQUNwQixNQUFNLENBQUE7UUFDUixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3hDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO1FBQ2xGLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQTtRQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVNLEdBQUcsQ0FBRSxJQUFzQixFQUFFLE1BQWUsRUFBRSxRQUE0QjtRQUMvRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDVixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDMUMsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUE7UUFDeEQsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtRQUN4RSxDQUFDO0lBQ0gsQ0FBQztJQUVPLFFBQVEsQ0FBRSxNQUFxQixFQUFFLFdBQTJCO1FBQ2xFLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUNqQyxJQUFJLEVBQUUsU0FBUztZQUNmLFFBQVEsRUFBRSxNQUFNO1lBQ2hCLElBQUksRUFBRSxXQUFXO1NBQ2xCLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUNqQyxJQUFJLEVBQUUsV0FBVztZQUNqQixLQUFLLEVBQUUsa0JBQWtCO1NBQzFCLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRjtBQTlERCx3Q0E4REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBSYW5nZSwgVGV4dEVkaXRvciwgRGlzcGxheU1hcmtlcixcbn0gZnJvbSAnYXRvbSdcblxuaW1wb3J0IHtUb29sdGlwTWVzc2FnZX0gZnJvbSAnLi90b29sdGlwLXZpZXcnXG5pbXBvcnQge01lc3NhZ2VPYmplY3R9IGZyb20gJy4uL3V0aWxzJ1xuaW1wb3J0IHtFdmVudFRhYmxlLCBURXZlbnRSYW5nZVR5cGV9IGZyb20gJy4vZXZlbnQtdGFibGUnXG5leHBvcnQge1RFdmVudFJhbmdlVHlwZX1cbmV4cG9ydCBpbnRlcmZhY2UgSU1hcmtlclByb3BlcnRpZXMge1xuICBwZXJzaXN0T25DdXJzb3JNb3ZlOiBib29sZWFuXG59XG5cbmV4cG9ydCBjbGFzcyBUb29sdGlwTWFuYWdlciB7XG4gIHByaXZhdGUgbWFya2VyczogRXZlbnRUYWJsZVxuICBwcml2YXRlIGVkaXRvckVsZW1lbnQ6IEhUTUxFbGVtZW50XG4gIGNvbnN0cnVjdG9yIChwcml2YXRlIGVkaXRvcjogVGV4dEVkaXRvcikge1xuICAgIHRoaXMubWFya2VycyA9IG5ldyBFdmVudFRhYmxlKGVkaXRvciwgW1xuICAgICAgW3t0eXBlOiAna2V5Ym9hcmQnfSwge3R5cGU6ICdjb250ZXh0J31dLFxuICAgICAgW3t0eXBlOiAnbW91c2UnfSwge3R5cGU6ICdzZWxlY3Rpb24nfV0sXG4gICAgXSlcbiAgICB0aGlzLmVkaXRvckVsZW1lbnQgPSBhdG9tLnZpZXdzLmdldFZpZXcodGhpcy5lZGl0b3IpXG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSAoKSB7XG4gICAgdGhpcy5tYXJrZXJzLmRlc3Ryb3koKVxuICAgIHRoaXMuZWRpdG9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpZGUtaGFza2VsbC0taGFzLXRvb2x0aXBzJylcbiAgfVxuXG4gIHB1YmxpYyBzaG93IChcbiAgICByYW5nZTogUmFuZ2UsIHRleHQ6IE1lc3NhZ2VPYmplY3QgfCBNZXNzYWdlT2JqZWN0W10sXG4gICAgdHlwZTogVEV2ZW50UmFuZ2VUeXBlLCBzb3VyY2U6IHN0cmluZywgZGV0YWlsOiBJTWFya2VyUHJvcGVydGllc1xuICApIHtcbiAgICB0aGlzLmhpZGUodHlwZSwgc291cmNlKVxuICAgIGNvbnN0IGhpZ2hsaWdodE1hcmtlciA9IHRoaXMubWFya2Vycy5nZXQodHlwZSwgc291cmNlKS5tYXJrQnVmZmVyUmFuZ2UocmFuZ2UpXG4gICAgaGlnaGxpZ2h0TWFya2VyLnNldFByb3BlcnRpZXMoZGV0YWlsKVxuICAgIHRoaXMuZGVjb3JhdGUoaGlnaGxpZ2h0TWFya2VyLCBuZXcgVG9vbHRpcE1lc3NhZ2UodGV4dCkpXG4gICAgdGhpcy5lZGl0b3JFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lkZS1oYXNrZWxsLS1oYXMtdG9vbHRpcHMnKVxuICB9XG5cbiAgcHVibGljIGhpZGUgKHR5cGU/OiBURXZlbnRSYW5nZVR5cGUsIHNvdXJjZT86IHN0cmluZywgdGVtcGxhdGU/OiBJTWFya2VyUHJvcGVydGllcykge1xuICAgIGlmICghdHlwZSkge1xuICAgICAgdGhpcy5tYXJrZXJzLmNsZWFyKClcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkuY2xlYXIoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkuZmluZE1hcmtlcnModGVtcGxhdGUpLmZvckVhY2goKG0pID0+IG0uZGVzdHJveSgpKVxuICAgIH1cbiAgICBpZiAoISB0aGlzLmhhcygpKSB7IHRoaXMuZWRpdG9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpZGUtaGFza2VsbC0taGFzLXRvb2x0aXBzJykgfVxuICB9XG5cbiAgcHVibGljIGhhcyAodHlwZT86IFRFdmVudFJhbmdlVHlwZSwgc291cmNlPzogc3RyaW5nLCB0ZW1wbGF0ZT86IElNYXJrZXJQcm9wZXJ0aWVzKSB7XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXJrZXJzLmdldE1hcmtlckNvdW50KCkgPiAwXG4gICAgfVxuICAgIGlmICghdGVtcGxhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkuZ2V0TWFya2VyQ291bnQoKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXJrZXJzLmdldCh0eXBlLCBzb3VyY2UpLmZpbmRNYXJrZXJzKHRlbXBsYXRlKS5sZW5ndGggPiAwXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkZWNvcmF0ZSAobWFya2VyOiBEaXNwbGF5TWFya2VyLCB0b29sdGlwVmlldzogVG9vbHRpcE1lc3NhZ2UpIHtcbiAgICB0aGlzLmVkaXRvci5kZWNvcmF0ZU1hcmtlcihtYXJrZXIsIHtcbiAgICAgIHR5cGU6ICdvdmVybGF5JyxcbiAgICAgIHBvc2l0aW9uOiAndGFpbCcsXG4gICAgICBpdGVtOiB0b29sdGlwVmlld1xuICAgIH0pXG4gICAgdGhpcy5lZGl0b3IuZGVjb3JhdGVNYXJrZXIobWFya2VyLCB7XG4gICAgICB0eXBlOiAnaGlnaGxpZ2h0JyxcbiAgICAgIGNsYXNzOiAnaWRlLWhhc2tlbGwtdHlwZSdcbiAgICB9KVxuICB9XG59XG4iXX0=