"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tooltip_view_1 = require("./tooltip-view");
const event_table_1 = require("./event-table");
class TooltipManager {
    constructor(editor) {
        this.editor = editor;
        this.markers = new event_table_1.EventTable(editor, [
            [{ type: "keyboard" }, { type: "context" }],
            [{ type: "mouse" }, { type: "selection" }],
        ]);
        this.editorElement = atom.views.getView(this.editor);
    }
    dispose() {
        this.markers.destroy();
        this.editorElement.classList.remove('ide-haskell--has-tooltips');
    }
    show(range, text, type, source, detail) {
        this.hide(type, source);
        const highlightMarker = this.markers.get(type, source).markBufferRange(range);
        highlightMarker.setProperties(detail);
        this.decorate(highlightMarker, new tooltip_view_1.TooltipMessage(text));
        this.editorElement.classList.add('ide-haskell--has-tooltips');
    }
    hide(type, source, template) {
        if (!type) {
            this.markers.clear();
            return;
        }
        if (!template) {
            this.markers.get(type, source).clear();
        }
        else {
            this.markers.get(type, source).findMarkers(template).forEach((m) => m.destroy());
        }
        if (!this.has()) {
            this.editorElement.classList.remove('ide-haskell--has-tooltips');
        }
    }
    has(type, source, template) {
        if (!type) {
            return this.markers.getMarkerCount() > 0;
        }
        if (!template) {
            return this.markers.get(type, source).getMarkerCount();
        }
        else {
            return this.markers.get(type, source).findMarkers(template).length > 0;
        }
    }
    decorate(marker, tooltipView) {
        this.editor.decorateMarker(marker, {
            type: 'overlay',
            position: 'tail',
            item: tooltipView
        });
        this.editor.decorateMarker(marker, {
            type: 'highlight',
            class: 'ide-haskell-type'
        });
    }
}
exports.TooltipManager = TooltipManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VkaXRvci1jb250cm9sL3Rvb2x0aXAtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLGlEQUE2QztBQUU3QywrQ0FBd0M7QUFNeEM7SUFHRSxZQUFxQixNQUFrQjtRQUFsQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ3JDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSx3QkFBVSxDQUFDLE1BQU0sRUFBRTtZQUNwQyxDQUFDLEVBQUMsSUFBSSxZQUE4QixFQUFDLEVBQUUsRUFBQyxJQUFJLFdBQTZCLEVBQUMsQ0FBQztZQUMzRSxDQUFDLEVBQUMsSUFBSSxTQUEyQixFQUFDLEVBQUUsRUFBQyxJQUFJLGFBQStCLEVBQUMsQ0FBQztTQUMzRSxDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN0RCxDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUE7SUFDbEUsQ0FBQztJQUVNLElBQUksQ0FDVCxLQUFZLEVBQUUsSUFBcUMsRUFDbkQsSUFBeUIsRUFBRSxNQUFjLEVBQUUsTUFBeUI7UUFFcEUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDdkIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUM3RSxlQUFlLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLElBQUksNkJBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ3hELElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO0lBQy9ELENBQUM7SUFFTSxJQUFJLENBQUUsSUFBMEIsRUFBRSxNQUFlLEVBQUUsUUFBNEI7UUFDcEYsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtZQUNwQixNQUFNLENBQUE7UUFDUixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3hDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBZ0IsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUNqRyxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUE7UUFBQyxDQUFDO0lBQ3hGLENBQUM7SUFFTSxHQUFHLENBQUUsSUFBMEIsRUFBRSxNQUFlLEVBQUUsUUFBNEI7UUFDbkYsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1YsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQzFDLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQ3hELENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7UUFDeEUsQ0FBQztJQUNILENBQUM7SUFFTyxRQUFRLENBQUUsTUFBcUIsRUFBRSxXQUEyQjtRQUNsRSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUU7WUFDakMsSUFBSSxFQUFFLFNBQVM7WUFDZixRQUFRLEVBQUUsTUFBTTtZQUNoQixJQUFJLEVBQUUsV0FBVztTQUNsQixDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUU7WUFDakMsSUFBSSxFQUFFLFdBQVc7WUFDakIsS0FBSyxFQUFFLGtCQUFrQjtTQUMxQixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0Y7QUE5REQsd0NBOERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgUmFuZ2UsIFRleHRFZGl0b3IsIERpc3BsYXlNYXJrZXIsXG59IGZyb20gJ2F0b20nXG5cbmltcG9ydCB7VG9vbHRpcE1lc3NhZ2V9IGZyb20gJy4vdG9vbHRpcC12aWV3J1xuaW1wb3J0IHtNZXNzYWdlT2JqZWN0fSBmcm9tICcuLi91dGlscydcbmltcG9ydCB7RXZlbnRUYWJsZX0gZnJvbSAnLi9ldmVudC10YWJsZSdcblxuZXhwb3J0IGludGVyZmFjZSBJTWFya2VyUHJvcGVydGllcyB7XG4gIHBlcnNpc3RPbkN1cnNvck1vdmU6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNsYXNzIFRvb2x0aXBNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBtYXJrZXJzOiBFdmVudFRhYmxlXG4gIHByaXZhdGUgZWRpdG9yRWxlbWVudDogSFRNTEVsZW1lbnRcbiAgY29uc3RydWN0b3IgKHByaXZhdGUgZWRpdG9yOiBUZXh0RWRpdG9yKSB7XG4gICAgdGhpcy5tYXJrZXJzID0gbmV3IEV2ZW50VGFibGUoZWRpdG9yLCBbXG4gICAgICBbe3R5cGU6IFVQSS5URXZlbnRSYW5nZVR5cGUua2V5Ym9hcmR9LCB7dHlwZTogVVBJLlRFdmVudFJhbmdlVHlwZS5jb250ZXh0fV0sXG4gICAgICBbe3R5cGU6IFVQSS5URXZlbnRSYW5nZVR5cGUubW91c2V9LCB7dHlwZTogVVBJLlRFdmVudFJhbmdlVHlwZS5zZWxlY3Rpb259XSxcbiAgICBdKVxuICAgIHRoaXMuZWRpdG9yRWxlbWVudCA9IGF0b20udmlld3MuZ2V0Vmlldyh0aGlzLmVkaXRvcilcbiAgfVxuXG4gIHB1YmxpYyBkaXNwb3NlICgpIHtcbiAgICB0aGlzLm1hcmtlcnMuZGVzdHJveSgpXG4gICAgdGhpcy5lZGl0b3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lkZS1oYXNrZWxsLS1oYXMtdG9vbHRpcHMnKVxuICB9XG5cbiAgcHVibGljIHNob3cgKFxuICAgIHJhbmdlOiBSYW5nZSwgdGV4dDogTWVzc2FnZU9iamVjdCB8IE1lc3NhZ2VPYmplY3RbXSxcbiAgICB0eXBlOiBVUEkuVEV2ZW50UmFuZ2VUeXBlLCBzb3VyY2U6IHN0cmluZywgZGV0YWlsOiBJTWFya2VyUHJvcGVydGllc1xuICApIHtcbiAgICB0aGlzLmhpZGUodHlwZSwgc291cmNlKVxuICAgIGNvbnN0IGhpZ2hsaWdodE1hcmtlciA9IHRoaXMubWFya2Vycy5nZXQodHlwZSwgc291cmNlKS5tYXJrQnVmZmVyUmFuZ2UocmFuZ2UpXG4gICAgaGlnaGxpZ2h0TWFya2VyLnNldFByb3BlcnRpZXMoZGV0YWlsKVxuICAgIHRoaXMuZGVjb3JhdGUoaGlnaGxpZ2h0TWFya2VyLCBuZXcgVG9vbHRpcE1lc3NhZ2UodGV4dCkpXG4gICAgdGhpcy5lZGl0b3JFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lkZS1oYXNrZWxsLS1oYXMtdG9vbHRpcHMnKVxuICB9XG5cbiAgcHVibGljIGhpZGUgKHR5cGU/OiBVUEkuVEV2ZW50UmFuZ2VUeXBlLCBzb3VyY2U/OiBzdHJpbmcsIHRlbXBsYXRlPzogSU1hcmtlclByb3BlcnRpZXMpIHtcbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHRoaXMubWFya2Vycy5jbGVhcigpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgdGhpcy5tYXJrZXJzLmdldCh0eXBlLCBzb3VyY2UpLmNsZWFyKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tYXJrZXJzLmdldCh0eXBlLCBzb3VyY2UpLmZpbmRNYXJrZXJzKHRlbXBsYXRlKS5mb3JFYWNoKChtOiBEaXNwbGF5TWFya2VyKSA9PiBtLmRlc3Ryb3koKSlcbiAgICB9XG4gICAgaWYgKCEgdGhpcy5oYXMoKSkgeyB0aGlzLmVkaXRvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaWRlLWhhc2tlbGwtLWhhcy10b29sdGlwcycpIH1cbiAgfVxuXG4gIHB1YmxpYyBoYXMgKHR5cGU/OiBVUEkuVEV2ZW50UmFuZ2VUeXBlLCBzb3VyY2U/OiBzdHJpbmcsIHRlbXBsYXRlPzogSU1hcmtlclByb3BlcnRpZXMpIHtcbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcmtlcnMuZ2V0TWFya2VyQ291bnQoKSA+IDBcbiAgICB9XG4gICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMubWFya2Vycy5nZXQodHlwZSwgc291cmNlKS5nZXRNYXJrZXJDb3VudCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkuZmluZE1hcmtlcnModGVtcGxhdGUpLmxlbmd0aCA+IDBcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGRlY29yYXRlIChtYXJrZXI6IERpc3BsYXlNYXJrZXIsIHRvb2x0aXBWaWV3OiBUb29sdGlwTWVzc2FnZSkge1xuICAgIHRoaXMuZWRpdG9yLmRlY29yYXRlTWFya2VyKG1hcmtlciwge1xuICAgICAgdHlwZTogJ292ZXJsYXknLFxuICAgICAgcG9zaXRpb246ICd0YWlsJyxcbiAgICAgIGl0ZW06IHRvb2x0aXBWaWV3XG4gICAgfSlcbiAgICB0aGlzLmVkaXRvci5kZWNvcmF0ZU1hcmtlcihtYXJrZXIsIHtcbiAgICAgIHR5cGU6ICdoaWdobGlnaHQnLFxuICAgICAgY2xhc3M6ICdpZGUtaGFza2VsbC10eXBlJ1xuICAgIH0pXG4gIH1cbn1cbiJdfQ==