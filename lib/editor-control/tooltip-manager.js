"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tooltip_view_1 = require("./tooltip-view");
const event_table_1 = require("./event-table");
class TooltipManager {
    constructor(editor) {
        this.editor = editor;
        this.markers = new event_table_1.EventTable(editor, [
            [{ type: 'keyboard' }, { type: 'context' }],
            [{ type: 'mouse' }, { type: 'selection' }],
        ]);
        this.editorElement = atom.views.getView(this.editor);
    }
    dispose() {
        this.markers.destroy();
        this.editorElement.classList.remove('ide-haskell--has-tooltips');
    }
    show(range, text, type, source, detail) {
        this.hide(type, source);
        const highlightMarker = this.markers.get(type, source).markBufferRange(range);
        highlightMarker.setProperties(detail);
        this.decorate(highlightMarker, new tooltip_view_1.TooltipMessage(text));
        this.editorElement.classList.add('ide-haskell--has-tooltips');
    }
    hide(type, source, template) {
        if (!type) {
            this.markers.clear();
            return;
        }
        if (!template) {
            this.markers.get(type, source).clear();
        }
        else {
            this.markers.get(type, source).findMarkers(template).forEach((m) => m.destroy());
        }
        if (!this.has()) {
            this.editorElement.classList.remove('ide-haskell--has-tooltips');
        }
    }
    has(type, source, template) {
        if (!type) {
            return this.markers.getMarkerCount() > 0;
        }
        if (!template) {
            return this.markers.get(type, source).getMarkerCount();
        }
        else {
            return this.markers.get(type, source).findMarkers(template).length > 0;
        }
    }
    decorate(marker, tooltipView) {
        this.editor.decorateMarker(marker, {
            type: 'overlay',
            position: 'tail',
            item: tooltipView
        });
        this.editor.decorateMarker(marker, {
            type: 'highlight',
            class: 'ide-haskell-type'
        });
    }
}
exports.TooltipManager = TooltipManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VkaXRvci1jb250cm9sL3Rvb2x0aXAtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLGlEQUE2QztBQUU3QywrQ0FBd0M7QUFNeEM7SUFHRSxZQUFxQixNQUFrQjtRQUFsQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ3JDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSx3QkFBVSxDQUFDLE1BQU0sRUFBRTtZQUNwQyxDQUFDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBQyxFQUFFLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBQyxDQUFDO1lBQ3ZDLENBQUMsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFDLENBQUM7U0FDdkMsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDdEQsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO0lBQ2xFLENBQUM7SUFFTSxJQUFJLENBQ1QsS0FBWSxFQUFFLElBQXFDLEVBQ25ELElBQXlCLEVBQUUsTUFBYyxFQUFFLE1BQXlCO1FBRXBFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQ3ZCLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDN0UsZUFBZSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNyQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxJQUFJLDZCQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUN4RCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0lBRU0sSUFBSSxDQUFFLElBQTBCLEVBQUUsTUFBZSxFQUFFLFFBQTRCO1FBQ3BGLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNWLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUE7WUFDcEIsTUFBTSxDQUFBO1FBQ1IsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUN4QyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQWdCLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFDakcsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO1FBQUMsQ0FBQztJQUN4RixDQUFDO0lBRU0sR0FBRyxDQUFFLElBQTBCLEVBQUUsTUFBZSxFQUFFLFFBQTRCO1FBQ25GLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUMxQyxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtRQUN4RCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO1FBQ3hFLENBQUM7SUFDSCxDQUFDO0lBRU8sUUFBUSxDQUFFLE1BQXFCLEVBQUUsV0FBMkI7UUFDbEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ2pDLElBQUksRUFBRSxTQUFTO1lBQ2YsUUFBUSxFQUFFLE1BQU07WUFDaEIsSUFBSSxFQUFFLFdBQVc7U0FDbEIsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ2pDLElBQUksRUFBRSxXQUFXO1lBQ2pCLEtBQUssRUFBRSxrQkFBa0I7U0FDMUIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGO0FBOURELHdDQThEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFJhbmdlLCBUZXh0RWRpdG9yLCBEaXNwbGF5TWFya2VyLFxufSBmcm9tICdhdG9tJ1xuXG5pbXBvcnQge1Rvb2x0aXBNZXNzYWdlfSBmcm9tICcuL3Rvb2x0aXAtdmlldydcbmltcG9ydCB7TWVzc2FnZU9iamVjdH0gZnJvbSAnLi4vdXRpbHMnXG5pbXBvcnQge0V2ZW50VGFibGV9IGZyb20gJy4vZXZlbnQtdGFibGUnXG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1hcmtlclByb3BlcnRpZXMge1xuICBwZXJzaXN0T25DdXJzb3JNb3ZlOiBib29sZWFuXG59XG5cbmV4cG9ydCBjbGFzcyBUb29sdGlwTWFuYWdlciB7XG4gIHByaXZhdGUgbWFya2VyczogRXZlbnRUYWJsZVxuICBwcml2YXRlIGVkaXRvckVsZW1lbnQ6IEhUTUxFbGVtZW50XG4gIGNvbnN0cnVjdG9yIChwcml2YXRlIGVkaXRvcjogVGV4dEVkaXRvcikge1xuICAgIHRoaXMubWFya2VycyA9IG5ldyBFdmVudFRhYmxlKGVkaXRvciwgW1xuICAgICAgW3t0eXBlOiAna2V5Ym9hcmQnfSwge3R5cGU6ICdjb250ZXh0J31dLFxuICAgICAgW3t0eXBlOiAnbW91c2UnfSwge3R5cGU6ICdzZWxlY3Rpb24nfV0sXG4gICAgXSlcbiAgICB0aGlzLmVkaXRvckVsZW1lbnQgPSBhdG9tLnZpZXdzLmdldFZpZXcodGhpcy5lZGl0b3IpXG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSAoKSB7XG4gICAgdGhpcy5tYXJrZXJzLmRlc3Ryb3koKVxuICAgIHRoaXMuZWRpdG9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpZGUtaGFza2VsbC0taGFzLXRvb2x0aXBzJylcbiAgfVxuXG4gIHB1YmxpYyBzaG93IChcbiAgICByYW5nZTogUmFuZ2UsIHRleHQ6IE1lc3NhZ2VPYmplY3QgfCBNZXNzYWdlT2JqZWN0W10sXG4gICAgdHlwZTogVVBJLlRFdmVudFJhbmdlVHlwZSwgc291cmNlOiBzdHJpbmcsIGRldGFpbDogSU1hcmtlclByb3BlcnRpZXNcbiAgKSB7XG4gICAgdGhpcy5oaWRlKHR5cGUsIHNvdXJjZSlcbiAgICBjb25zdCBoaWdobGlnaHRNYXJrZXIgPSB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkubWFya0J1ZmZlclJhbmdlKHJhbmdlKVxuICAgIGhpZ2hsaWdodE1hcmtlci5zZXRQcm9wZXJ0aWVzKGRldGFpbClcbiAgICB0aGlzLmRlY29yYXRlKGhpZ2hsaWdodE1hcmtlciwgbmV3IFRvb2x0aXBNZXNzYWdlKHRleHQpKVxuICAgIHRoaXMuZWRpdG9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpZGUtaGFza2VsbC0taGFzLXRvb2x0aXBzJylcbiAgfVxuXG4gIHB1YmxpYyBoaWRlICh0eXBlPzogVVBJLlRFdmVudFJhbmdlVHlwZSwgc291cmNlPzogc3RyaW5nLCB0ZW1wbGF0ZT86IElNYXJrZXJQcm9wZXJ0aWVzKSB7XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICB0aGlzLm1hcmtlcnMuY2xlYXIoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICghdGVtcGxhdGUpIHtcbiAgICAgIHRoaXMubWFya2Vycy5nZXQodHlwZSwgc291cmNlKS5jbGVhcigpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWFya2Vycy5nZXQodHlwZSwgc291cmNlKS5maW5kTWFya2Vycyh0ZW1wbGF0ZSkuZm9yRWFjaCgobTogRGlzcGxheU1hcmtlcikgPT4gbS5kZXN0cm95KCkpXG4gICAgfVxuICAgIGlmICghIHRoaXMuaGFzKCkpIHsgdGhpcy5lZGl0b3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lkZS1oYXNrZWxsLS1oYXMtdG9vbHRpcHMnKSB9XG4gIH1cblxuICBwdWJsaWMgaGFzICh0eXBlPzogVVBJLlRFdmVudFJhbmdlVHlwZSwgc291cmNlPzogc3RyaW5nLCB0ZW1wbGF0ZT86IElNYXJrZXJQcm9wZXJ0aWVzKSB7XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXJrZXJzLmdldE1hcmtlckNvdW50KCkgPiAwXG4gICAgfVxuICAgIGlmICghdGVtcGxhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkuZ2V0TWFya2VyQ291bnQoKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXJrZXJzLmdldCh0eXBlLCBzb3VyY2UpLmZpbmRNYXJrZXJzKHRlbXBsYXRlKS5sZW5ndGggPiAwXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkZWNvcmF0ZSAobWFya2VyOiBEaXNwbGF5TWFya2VyLCB0b29sdGlwVmlldzogVG9vbHRpcE1lc3NhZ2UpIHtcbiAgICB0aGlzLmVkaXRvci5kZWNvcmF0ZU1hcmtlcihtYXJrZXIsIHtcbiAgICAgIHR5cGU6ICdvdmVybGF5JyxcbiAgICAgIHBvc2l0aW9uOiAndGFpbCcsXG4gICAgICBpdGVtOiB0b29sdGlwVmlld1xuICAgIH0pXG4gICAgdGhpcy5lZGl0b3IuZGVjb3JhdGVNYXJrZXIobWFya2VyLCB7XG4gICAgICB0eXBlOiAnaGlnaGxpZ2h0JyxcbiAgICAgIGNsYXNzOiAnaWRlLWhhc2tlbGwtdHlwZSdcbiAgICB9KVxuICB9XG59XG4iXX0=