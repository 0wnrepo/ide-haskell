"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const editor_control_1 = require("./editor-control");
class CheckResultsProvider {
    constructor(editor, pluginManager) {
        const tooltipRegistry = pluginManager.tooltipRegistry;
        this.editorMap = new WeakMap();
        this.disposables = new atom_1.CompositeDisposable();
        this.disposables.add(tooltipRegistry.register('builtin:check-results', {
            priority: 1000,
            handler: this.tooltipProvider.bind(this),
            eventTypes: ['mouse', 'keyboard'],
        }));
        pluginManager.addEditorController(editor_control_1.CREditorControl, this.editorMap);
    }
    destroy() {
        this.disposables.dispose();
    }
    tooltipProvider(editor, crange, type) {
        const controller = this.editorMap.get(editor);
        if (!controller) {
            return;
        }
        if (type === 'keyboard' && atom.config.get('ide-haskell.onCursorMove') !== 'Show Tooltip') {
            return;
        }
        const msg = controller.getMessageAt(crange.start, type);
        if (msg.length > 0) {
            return { range: crange, text: msg };
        }
    }
}
exports.CheckResultsProvider = CheckResultsProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2hlY2stcmVzdWx0cy1wcm92aWRlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUVhO0FBSWIscURBQWdEO0FBRWhEO0lBR0UsWUFBYSxNQUFrQixFQUFFLGFBQTRCO1FBQzNELE1BQU0sZUFBZSxHQUFHLGFBQWEsQ0FBQyxlQUFlLENBQUE7UUFFckQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFBO1FBQzlCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1FBQzVDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLEVBQUU7WUFDckUsUUFBUSxFQUFFLElBQUk7WUFDZCxPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3hDLFVBQVUsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUM7U0FDbEMsQ0FBQyxDQUFDLENBQUE7UUFDSCxhQUFhLENBQUMsbUJBQW1CLENBQUMsZ0NBQWUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDcEUsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFFTyxlQUFlLENBQUUsTUFBa0IsRUFBRSxNQUFhLEVBQUUsSUFBcUI7UUFDL0UsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDN0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFBO1FBQUMsQ0FBQztRQUMzQixFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssVUFBVSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLEtBQUssY0FBYyxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQTtRQUFDLENBQUM7UUFDckcsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ3ZELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQTtRQUNyQyxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBN0JELG9EQTZCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFJhbmdlLCBUZXh0RWRpdG9yLCBDb21wb3NpdGVEaXNwb3NhYmxlXG59IGZyb20gJ2F0b20nXG5cbmltcG9ydCB7VEV2ZW50UmFuZ2VUeXBlfSBmcm9tICcuLi9lZGl0b3ItY29udHJvbC90b29sdGlwLW1hbmFnZXInXG5pbXBvcnQge1BsdWdpbk1hbmFnZXJ9IGZyb20gJy4uL3BsdWdpbi1tYW5hZ2VyJ1xuaW1wb3J0IHtDUkVkaXRvckNvbnRyb2x9IGZyb20gJy4vZWRpdG9yLWNvbnRyb2wnXG5cbmV4cG9ydCBjbGFzcyBDaGVja1Jlc3VsdHNQcm92aWRlciB7XG4gIHByaXZhdGUgZGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGVcbiAgcHJpdmF0ZSBlZGl0b3JNYXA6IFdlYWtNYXA8VGV4dEVkaXRvciwgQ1JFZGl0b3JDb250cm9sPlxuICBjb25zdHJ1Y3RvciAoZWRpdG9yOiBUZXh0RWRpdG9yLCBwbHVnaW5NYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyKSB7XG4gICAgY29uc3QgdG9vbHRpcFJlZ2lzdHJ5ID0gcGx1Z2luTWFuYWdlci50b29sdGlwUmVnaXN0cnlcblxuICAgIHRoaXMuZWRpdG9yTWFwID0gbmV3IFdlYWtNYXAoKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQodG9vbHRpcFJlZ2lzdHJ5LnJlZ2lzdGVyKCdidWlsdGluOmNoZWNrLXJlc3VsdHMnLCB7XG4gICAgICBwcmlvcml0eTogMTAwMCxcbiAgICAgIGhhbmRsZXI6IHRoaXMudG9vbHRpcFByb3ZpZGVyLmJpbmQodGhpcyksXG4gICAgICBldmVudFR5cGVzOiBbJ21vdXNlJywgJ2tleWJvYXJkJ10sXG4gICAgfSkpXG4gICAgcGx1Z2luTWFuYWdlci5hZGRFZGl0b3JDb250cm9sbGVyKENSRWRpdG9yQ29udHJvbCwgdGhpcy5lZGl0b3JNYXApXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgfVxuXG4gIHByaXZhdGUgdG9vbHRpcFByb3ZpZGVyIChlZGl0b3I6IFRleHRFZGl0b3IsIGNyYW5nZTogUmFuZ2UsIHR5cGU6IFRFdmVudFJhbmdlVHlwZSkge1xuICAgIGNvbnN0IGNvbnRyb2xsZXIgPSB0aGlzLmVkaXRvck1hcC5nZXQoZWRpdG9yKVxuICAgIGlmICghY29udHJvbGxlcikgeyByZXR1cm4gfVxuICAgIGlmICh0eXBlID09PSAna2V5Ym9hcmQnICYmIGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwub25DdXJzb3JNb3ZlJykgIT09ICdTaG93IFRvb2x0aXAnKSB7IHJldHVybiB9XG4gICAgY29uc3QgbXNnID0gY29udHJvbGxlci5nZXRNZXNzYWdlQXQoY3JhbmdlLnN0YXJ0LCB0eXBlKVxuICAgIGlmIChtc2cubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHsgcmFuZ2U6IGNyYW5nZSwgdGV4dDogbXNnIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==