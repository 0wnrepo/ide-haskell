"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const dummy_element_1 = require("./dummy-element");
const UPI3 = require("../upi-3");
function instance(pluginManager, outerDisposables, pluginName) {
    return new UPIInstance(pluginManager, outerDisposables, pluginName);
}
exports.instance = instance;
class UPIInstance {
    constructor(pluginManager, outerDisposables, pluginName) {
        this.pluginManager = pluginManager;
        this.pluginName = pluginName;
        this.messages = [];
        this.disposables = new atom_1.CompositeDisposable();
        this.upi3 = UPI3.instance(pluginManager, { name: pluginName });
        this.disposables.add(this.upi3);
        outerDisposables.add(this.disposables);
    }
    setMenu(name, menu) {
        return this.upi3.setMenu(name, menu);
    }
    setStatus(status) {
        return this.upi3.setStatus(status);
    }
    addMessages(newMessages, types) {
        this.messages.push(...newMessages);
        this.upi3.setMessages(this.messages);
    }
    setMessages(newMessages, types) {
        this.messages = [...newMessages];
        this.upi3.setMessages(this.messages);
    }
    clearMessages(types) {
        this.messages = this.messages.filter(({ severity }) => !types.includes(severity));
        this.upi3.setMessages(this.messages);
    }
    setMessageTypes(types) {
        for (const type of Object.keys(types)) {
            const opts = types[type];
            this.upi3.addMessageTab(type, opts);
        }
    }
    onShouldShowTooltip(callback) {
        const disp = this.pluginManager.tooltipRegistry.register(this.pluginName, { priority: 100, handler: callback });
        this.disposables.add(disp);
        return disp;
    }
    showTooltip(opts) {
        this.upi3.showTooltip(opts);
    }
    onWillSaveBuffer(callback) {
        const disp = this.pluginManager.onWillSaveBuffer(callback);
        this.disposables.add(disp);
        return disp;
    }
    onDidSaveBuffer(callback) {
        const disp = this.pluginManager.onDidSaveBuffer(callback);
        this.disposables.add(disp);
        return disp;
    }
    onDidStopChanging(callback) {
        const disp = this.pluginManager.onDidStopChanging(callback);
        this.disposables.add(disp);
        return disp;
    }
    addPanelControl(element, opts) {
        if (typeof element === 'string') {
            return this.upi3.addPanelControl({ element, opts });
        }
        else {
            const newOpts = Object.assign({}, opts, { element });
            return this.upi3.addPanelControl({ element: dummy_element_1.DummyElement, opts: newOpts });
        }
    }
    addConfigParam(specs) {
        const disp = new atom_1.CompositeDisposable();
        for (const [n, s] of Object.entries(specs)) {
            disp.add(this.upi3.addConfigParam(n, s));
        }
        return disp;
    }
    getConfigParam(otherPluginName, name) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!name) {
                return this.upi3.getConfigParam(otherPluginName);
            }
            else {
                return this.upi3.getOthersConfigParam(otherPluginName, name);
            }
        });
    }
    setConfigParam(name, value) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.pluginManager.configParamManager.set(this.pluginName, name, value);
        });
    }
    withEventRange({ editor, detail, eventType }, callback) {
        const res = this.upi3.getEventRange(editor, eventType || detail || {});
        if (!res) {
            return;
        }
        return callback(res);
    }
}
exports.UPIInstance = UPIInstance;
//# sourceMappingURL=data:application/json;base64,