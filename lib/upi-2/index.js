"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("../utils");
const dummy_element_1 = require("./dummy-element");
function instance(pluginManager, outerDisposables, pluginName) {
    return new UPIInstance(pluginManager, outerDisposables, pluginName);
}
exports.instance = instance;
class UPIInstance {
    constructor(pluginManager, outerDisposables, pluginName) {
        this.pluginManager = pluginManager;
        this.pluginName = pluginName;
        this.messages = [];
        this.disposables = new atom_1.CompositeDisposable();
        outerDisposables.add(this.disposables);
        this.messageProvider = pluginManager.resultsDB.registerProvider(pluginName);
        this.disposables.add(this.messageProvider);
    }
    setMenu(name, menu) {
        let menuDisp;
        this.disposables.add(menuDisp = atom.menu.add([{
                label: utils_1.MAIN_MENU_LABEL,
                submenu: [{ label: name, submenu: menu }]
            }
        ]));
        return menuDisp;
    }
    setStatus(status) {
        return this.pluginManager.outputPanel.backendStatus(this.pluginName, status);
    }
    addMessages(newMessages, types) {
        this.messages.push(...newMessages);
        this.messageProvider.setMessages(this.messages);
    }
    setMessages(newMessages, types) {
        this.messages = [...newMessages];
        this.messageProvider.setMessages(this.messages);
    }
    clearMessages(types) {
        this.messages = this.messages.filter(({ severity }) => !types.includes(severity));
        this.messageProvider.setMessages(this.messages);
    }
    setMessageTypes(types) {
        return (() => {
            const result = [];
            for (const type of Object.keys(types)) {
                const opts = types[type];
                result.push(this.pluginManager.outputPanel.createTab(type, opts));
            }
            return result;
        })();
    }
    onShouldShowTooltip(callback) {
        const disp = this.pluginManager.tooltipRegistry.register(this.pluginName, { priority: 100, handler: callback });
        this.disposables.add(disp);
        return disp;
    }
    showTooltip({ editor, pos, eventType, detail, tooltip }) {
        if (!eventType) {
            eventType = utils_1.getEventType(detail);
        }
        this.pluginManager.tooltipRegistry.showTooltip(editor, eventType, { pluginName: this.pluginName, tooltip });
    }
    onWillSaveBuffer(callback) {
        const disp = this.pluginManager.onWillSaveBuffer(callback);
        this.disposables.add(disp);
        return disp;
    }
    onDidSaveBuffer(callback) {
        const disp = this.pluginManager.onDidSaveBuffer(callback);
        this.disposables.add(disp);
        return disp;
    }
    onDidStopChanging(callback) {
        const disp = this.pluginManager.onDidStopChanging(callback);
        this.disposables.add(disp);
        return disp;
    }
    addPanelControl(element, opts) {
        if (typeof element === 'string') {
            return this.pluginManager.outputPanel.addPanelControl({ element, opts });
        }
        else {
            const newOpts = Object.assign({}, opts, { element });
            return this.pluginManager.outputPanel.addPanelControl({ element: dummy_element_1.DummyElement, opts: newOpts });
        }
    }
    addConfigParam(specs) {
        const disp = new atom_1.CompositeDisposable();
        for (const name of Object.keys(specs)) {
            const spec = specs[name];
            disp.add(this.pluginManager.configParamManager.add(this.pluginName, name, spec));
        }
        return disp;
    }
    getConfigParam(otherPluginName, name) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!name) {
                name = otherPluginName;
                otherPluginName = this.pluginName;
            }
            return this.pluginManager.configParamManager.get(otherPluginName, name);
        });
    }
    setConfigParam(name, value) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.pluginManager.configParamManager.set(this.pluginName, name, value);
        });
    }
    withEventRange({ editor, detail, eventType, pos }, callback) {
        let ppos;
        if (pos) {
            ppos = atom_1.Point.fromObject(pos);
        }
        if (!eventType) {
            eventType = utils_1.getEventType(detail);
        }
        const controller = this.pluginManager.controller(editor);
        if (!controller) {
            return;
        }
        const res = controller.getEventRange(eventType);
        if (!res) {
            return;
        }
        return callback(res);
    }
}
exports.UPIInstance = UPIInstance;
//# sourceMappingURL=data:application/json;base64,