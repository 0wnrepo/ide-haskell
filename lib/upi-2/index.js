"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("../utils");
const dummy_element_1 = require("./dummy-element");
function instance(pluginManager, outerDisposables, pluginName) {
    return new UPIInstance(pluginManager, outerDisposables, pluginName);
}
exports.instance = instance;
class UPIInstance {
    constructor(pluginManager, outerDisposables, pluginName) {
        this.pluginManager = pluginManager;
        this.pluginName = pluginName;
        this.messages = [];
        this.disposables = new atom_1.CompositeDisposable();
        outerDisposables.add(this.disposables);
        this.messageProvider = pluginManager.resultsDB.registerProvider();
        this.disposables.add(this.messageProvider);
    }
    setMenu(name, menu) {
        let menuDisp;
        this.disposables.add(menuDisp = atom.menu.add([{
                label: utils_1.MAIN_MENU_LABEL,
                submenu: [{ label: name, submenu: menu }]
            }
        ]));
        return menuDisp;
    }
    setStatus(status) {
        return this.pluginManager.backendStatus(this.pluginName, status);
    }
    addMessages(newMessages, types) {
        this.messages.push(...newMessages);
        this.messageProvider.setMessages(this.messages);
    }
    setMessages(newMessages, types) {
        this.messages = [...newMessages];
        this.messageProvider.setMessages(this.messages);
    }
    clearMessages(types) {
        this.messages = this.messages.filter(({ severity }) => !types.includes(severity));
        this.messageProvider.setMessages(this.messages);
    }
    setMessageTypes(types) {
        return (() => {
            const result = [];
            for (const type of Object.keys(types)) {
                const opts = types[type];
                result.push(this.pluginManager.outputPanel.createTab(type, opts));
            }
            return result;
        })();
    }
    onShouldShowTooltip(callback) {
        const disp = this.pluginManager.tooltipRegistry.register(this.pluginName, { priority: 100, handler: callback });
        this.disposables.add(disp);
        return disp;
    }
    showTooltip({ editor, pos, eventType, detail, tooltip }) {
        if (!eventType) {
            eventType = utils_1.getEventType(detail);
        }
        this.pluginManager.tooltipRegistry.showTooltip(editor, eventType, { pluginName: this.pluginName, tooltip });
    }
    onWillSaveBuffer(callback) {
        const disp = this.pluginManager.onWillSaveBuffer(callback);
        this.disposables.add(disp);
        return disp;
    }
    onDidSaveBuffer(callback) {
        const disp = this.pluginManager.onDidSaveBuffer(callback);
        this.disposables.add(disp);
        return disp;
    }
    onDidStopChanging(callback) {
        const disp = this.pluginManager.onDidStopChanging(callback);
        this.disposables.add(disp);
        return disp;
    }
    addPanelControl(element, opts) {
        if (typeof element === 'string') {
            return this.pluginManager.outputPanel.addPanelControl({ element, opts });
        }
        else {
            const newOpts = Object.assign({}, opts, { element });
            return this.pluginManager.outputPanel.addPanelControl({ element: dummy_element_1.DummyElement, opts: newOpts });
        }
    }
    addConfigParam(specs) {
        const disp = new atom_1.CompositeDisposable();
        for (const name of Object.keys(specs)) {
            const spec = specs[name];
            disp.add(this.pluginManager.configParamManager.add(this.pluginName, name, spec));
        }
        return disp;
    }
    getConfigParam(otherPluginName, name) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!name) {
                name = otherPluginName;
                otherPluginName = this.pluginName;
            }
            return this.pluginManager.configParamManager.get(otherPluginName, name);
        });
    }
    setConfigParam(name, value) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.pluginManager.configParamManager.set(this.pluginName, name, value);
        });
    }
    withEventRange({ editor, detail, eventType, pos }, callback) {
        let ppos;
        if (pos) {
            ppos = atom_1.Point.fromObject(pos);
        }
        if (!eventType) {
            eventType = utils_1.getEventType(detail);
        }
        const controller = this.pluginManager.controller(editor);
        if (!controller) {
            return;
        }
        const res = controller.getEventRange(eventType);
        if (!res) {
            return;
        }
        return callback(res);
    }
}
exports.UPIInstance = UPIInstance;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBpLTIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUNBLCtCQUFvRTtBQUNwRSxvQ0FBd0Q7QUFVeEQsbURBQTRDO0FBc0M1QyxrQkFBMEIsYUFBNEIsRUFBRSxnQkFBcUMsRUFBRSxVQUFrQjtJQUMvRyxNQUFNLENBQUMsSUFBSSxXQUFXLENBQUMsYUFBYSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsQ0FBQyxDQUFBO0FBQ3JFLENBQUM7QUFGRCw0QkFFQztBQUVEO0lBSUUsWUFDVSxhQUE0QixFQUFFLGdCQUFxQyxFQUFVLFVBQWtCO1FBQS9GLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQWlELGVBQVUsR0FBVixVQUFVLENBQVE7UUFKakcsYUFBUSxHQUFrQixFQUFFLENBQUE7UUFDNUIsZ0JBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7UUFLN0MsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUN0QyxJQUFJLENBQUMsZUFBZSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtRQUNqRSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUE7SUFDNUMsQ0FBQztJQU9ELE9BQU8sQ0FBRSxJQUFZLEVBQUUsSUFBaUI7UUFDdEMsSUFBSSxRQUFRLENBQUE7UUFDWixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDN0MsS0FBSyxFQUFFLHVCQUFlO2dCQUN0QixPQUFPLEVBQUUsQ0FBRSxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFFO2FBQzFDO1NBQ0EsQ0FBQyxDQUFDLENBQUE7UUFDSCxN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VUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3hELEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQTtRQUFDLENBQUM7UUFDM0IsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUMvQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUE7UUFBQyxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDdEIsQ0FBQztDQUNGO0FBdk9ELGtDQXVPQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlOm1lbWJlci1hY2Nlc3MgKi9cbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIFBvaW50LCBUZXh0RWRpdG9yLCBSYW5nZSB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBNQUlOX01FTlVfTEFCRUwsIGdldEV2ZW50VHlwZSB9IGZyb20gJy4uL3V0aWxzJ1xuaW1wb3J0IHtQbHVnaW5NYW5hZ2VyfSBmcm9tICcuLi9wbHVnaW4tbWFuYWdlcidcbmltcG9ydCB7SVN0YXR1cywgSVNldmVyaXR5VGFiRGVmaW5pdGlvbiwgSUNvbnRyb2xPcHRzfSBmcm9tICcuLi9vdXRwdXQtcGFuZWwnXG5pbXBvcnQge0lSZXN1bHRJdGVtLCBUU2V2ZXJpdHl9IGZyb20gJy4uL3Jlc3VsdHMtZGInXG5pbXBvcnQge1RFdmVudFJhbmdlVHlwZX0gZnJvbSAnLi4vZWRpdG9yLWNvbnRyb2wvdG9vbHRpcC1tYW5hZ2VyJ1xuaW1wb3J0IHtUUG9zaXRpb259IGZyb20gJy4uL3Jlc3VsdHMtZGInXG5pbXBvcnQge1Byb3ZpZGVyIGFzIE1lc3NhZ2VQcm92aWRlcn0gZnJvbSAnLi4vcmVzdWx0cy1kYi9wcm92aWRlcidcbmltcG9ydCB7SVBhcmFtU3BlY30gZnJvbSAnLi4vY29uZmlnLXBhcmFtcydcbmltcG9ydCB7VFRleHRCdWZmZXJDYWxsYmFja30gZnJvbSAnLi4vZWRpdG9yLWNvbnRyb2wnXG5pbXBvcnQge1RUb29sdGlwSGFuZGxlciwgVFRvb2x0aXBGdW5jdGlvbn0gZnJvbSAnLi4vdG9vbHRpcC1yZWdpc3RyeSdcbmltcG9ydCB7RHVtbXlFbGVtZW50fSBmcm9tICcuL2R1bW15LWVsZW1lbnQnXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNob3dUb29sdGlwUGFyYW1zIHtcbiAgZWRpdG9yOiBUZXh0RWRpdG9yXG4gIHBvczogVFBvc2l0aW9uXG4gIGV2ZW50VHlwZT86IFRFdmVudFJhbmdlVHlwZVxuICBkZXRhaWw/OiBPYmplY3RcbiAgdG9vbHRpcDogVFRvb2x0aXBGdW5jdGlvblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFdmVudFJhbmdlUGFyYW1zIHtcbiAgZWRpdG9yOiBUZXh0RWRpdG9yXG4gIGRldGFpbD86IE9iamVjdFxuICBldmVudFR5cGU/OiBURXZlbnRSYW5nZVR5cGVcbiAgcG9zOiBUUG9zaXRpb25cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQXRvbU1lbnVDb21tYW5kIHtcbiAgbGFiZWw6IHN0cmluZ1xuICBjb21tYW5kOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQXRvbVN1Ym1lbnUge1xuICBsYWJlbDogc3RyaW5nXG4gIHN1Ym1lbnU6IFRBdG9tTWVudVtdXG59XG5cbmV4cG9ydCB0eXBlIFRBdG9tTWVudSA9IElBdG9tTWVudUNvbW1hbmQgfCBJQXRvbVN1Ym1lbnVcblxuZXhwb3J0IHR5cGUgVEV2ZW50UmFuZ2VDYWxsYmFjazxUPiA9IChwYXJzOiB7XG4gIC8qKiBldmVudCBwb3NpdGlvbiAqL1xuICBwb3M6IFBvaW50XG4gIC8qKiBldmVudCByYW5nZSAqL1xuICBjcmFuZ2U6IFJhbmdlXG4gIC8qKiBldmVudCB0eXBlICovXG4gIGV2ZW50VHlwZTogVEV2ZW50UmFuZ2VUeXBlXG59KSA9PiBUXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YW5jZSAocGx1Z2luTWFuYWdlcjogUGx1Z2luTWFuYWdlciwgb3V0ZXJEaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSwgcGx1Z2luTmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiBuZXcgVVBJSW5zdGFuY2UocGx1Z2luTWFuYWdlciwgb3V0ZXJEaXNwb3NhYmxlcywgcGx1Z2luTmFtZSlcbn1cblxuZXhwb3J0IGNsYXNzIFVQSUluc3RhbmNlIHtcbiAgcHJpdmF0ZSBtZXNzYWdlczogSVJlc3VsdEl0ZW1bXSA9IFtdXG4gIHByaXZhdGUgZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gIHByaXZhdGUgbWVzc2FnZVByb3ZpZGVyOiBNZXNzYWdlUHJvdmlkZXJcbiAgY29uc3RydWN0b3IgKFxuICAgIHByaXZhdGUgcGx1Z2luTWFuYWdlcjogUGx1Z2luTWFuYWdlciwgb3V0ZXJEaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSwgcHJpdmF0ZSBwbHVnaW5OYW1lOiBzdHJpbmdcbiAgKSB7XG4gICAgb3V0ZXJEaXNwb3NhYmxlcy5hZGQodGhpcy5kaXNwb3NhYmxlcylcbiAgICB0aGlzLm1lc3NhZ2VQcm92aWRlciA9IHBsdWdpbk1hbmFnZXIucmVzdWx0c0RCLnJlZ2lzdGVyUHJvdmlkZXIoKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHRoaXMubWVzc2FnZVByb3ZpZGVyKVxuICB9XG4gIC8qKlxuICBBZGRzIG5ldyBzdW1iZW51IHRvICdIYXNrZWxsIElERScgbWVudSBpdGVtXG5cbiAgQHBhcmFtIG5hbWUgc3VibWVudSBsYWJlbCwgc2hvdWxkIGJlIGRlc2NyaXB0aXZlIG9mIGEgcGFja2FnZVxuICBAcGFyYW0gbWVudSBBdG9tIG1lbnUgb2JqZWN0XG4gICovXG4gIHNldE1lbnUgKG5hbWU6IHN0cmluZywgbWVudTogVEF0b21NZW51W10pIHtcbiAgICBsZXQgbWVudURpc3BcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChtZW51RGlzcCA9IGF0b20ubWVudS5hZGQoW3tcbiAgICAgIGxhYmVsOiBNQUlOX01FTlVfTEFCRUwsXG4gICAgICBzdWJtZW51OiBbIHtsYWJlbDogbmFtZSwgc3VibWVudTogbWVudX0gXVxuICAgIH1cbiAgICBdKSlcbiAgICByZXR1cm4gbWVudURpc3BcbiAgfVxuXG4gIC8qKlxuICBTZXRzIGJhY2tlbmQgc3RhdHVzXG5cbiAgQHBhcmFtIHN0YXR1cyBjdXJyZW50IGJhY2tlbmQgc3RhdHVzXG4gICovXG4gIHNldFN0YXR1cyAoc3RhdHVzOiBJU3RhdHVzKSB7XG4gICAgcmV0dXJuIHRoaXMucGx1Z2luTWFuYWdlci5iYWNrZW5kU3RhdHVzKHRoaXMucGx1Z2luTmFtZSwgc3RhdHVzKVxuICB9XG5cbiAgLyoqXG4gIEFkZCBtZXNzYWdlcyB0byBpZGUtaGFza2VsbCBvdXRwdXRcblxuICBAcGFyYW0gbWVzc2FnZXMgYXJyYXkgb2YgbWVzc2FnZXNcbiAgQHBhcmFtIHR5cGVzIGFycmF5LCBjb250YWluaW5nIHBvc3NpYmxlIG1lc3NhZ2UgYHNldmVyaXR5YC4gSWYgdW5kZWZpbmVkLFxuICAgICAgICAgd2lsbCBiZSB0YWtlbiBmcm9tIGBtZXNzYWdlc2BcbiAgKi9cbiAgYWRkTWVzc2FnZXMgKG5ld01lc3NhZ2VzOiBJUmVzdWx0SXRlbVtdLCB0eXBlcz86IFRTZXZlcml0eVtdKSB7XG4gICAgdGhpcy5tZXNzYWdlcy5wdXNoKC4uLm5ld01lc3NhZ2VzKVxuICAgIHRoaXMubWVzc2FnZVByb3ZpZGVyLnNldE1lc3NhZ2VzKHRoaXMubWVzc2FnZXMpXG4gIH1cblxuICAvKipcbiAgU2V0IG1lc3NhZ2VzIGluIGlkZS1oYXNrZWxsIG91dHB1dC4gQ2xlYXJzIGFsbCBleGlzdGluZyBtZXNzYWdlcyB3aXRoXG4gIGBzZXZlcml0eWAgaW4gYHR5cGVzYFxuXG4gIEBwYXJhbSBtZXNzYWdlczogYXJyYXkgb2YgbWVzc2FnZXNcbiAgQHBhcmFtIHR5cGVzIGFycmF5LCBjb250YWluaW5nIHBvc3NpYmxlIG1lc3NhZ2UgYHNldmVyaXR5YC4gSWYgdW5kZWZpbmVkLFxuICAgICAgICAgd2lsbCBiZSB0YWtlbiBmcm9tIGBtZXNzYWdlc2BcbiAgKi9cbiAgc2V0TWVzc2FnZXMgKG5ld01lc3NhZ2VzOiBJUmVzdWx0SXRlbVtdLCB0eXBlczogVFNldmVyaXR5W10pIHtcbiAgICB0aGlzLm1lc3NhZ2VzID0gWy4uLm5ld01lc3NhZ2VzXVxuICAgIHRoaXMubWVzc2FnZVByb3ZpZGVyLnNldE1lc3NhZ2VzKHRoaXMubWVzc2FnZXMpXG4gIH1cblxuICAvKipcbiAgQ2xlYXIgYWxsIGV4aXN0aW5nIG1lc3NhZ2VzIHdpdGggYHNldmVyaXR5YCBpbiBgdHlwZXNgXG5cbiAgQHBhcmFtIHR5cGVzIG1lc3NhZ2Ugc2V2ZXJpdGllcyB0byBjbGVhbiBvdXRcbiAgKi9cbiAgY2xlYXJNZXNzYWdlcyAodHlwZXM6IFRTZXZlcml0eVtdKSB7XG4gICAgdGhpcy5tZXNzYWdlcyA9IHRoaXMubWVzc2FnZXMuZmlsdGVyKCh7c2V2ZXJpdHl9KSA9PiAhdHlwZXMuaW5jbHVkZXMoc2V2ZXJpdHkpKVxuICAgIHRoaXMubWVzc2FnZVByb3ZpZGVyLnNldE1lc3NhZ2VzKHRoaXMubWVzc2FnZXMpXG4gIH1cblxuICAvKipcbiAgU2V0IHBvc3NpYmxlIG1lc3NhZ2UgYHNldmVyaXR5YCB0aGF0IHlvdXIgcGFja2FnZSB3aWxsIHVzZS5cbiAgVGhpcyBhbGxvd3MgZGVmaW5pdGlvbiBvZiBjdXN0b20gb3V0cHV0IHBhbmVsIHRhYnMuXG5cbiAgQHBhcmFtIHR5cGVzOiBPYmplY3Qgd2l0aCBrZXlzIHJlcHJlc2VudGluZyBwb3NzaWJsZSBtZXNzYWdlIGBzZXZlcml0eWAgKGkuZS4gdGFiIG5hbWUpXG4gICAgICAgICBhbmQgdmFsdWVzIGJlaW5nIE9iamVjdHMgd2l0aCBrZXlzXG4gICovXG4gIHNldE1lc3NhZ2VUeXBlcyAodHlwZXM6IHsgW3NldmVyaXR5OiBzdHJpbmddOiBJU2V2ZXJpdHlUYWJEZWZpbml0aW9ufSkge1xuICAgIHJldHVybiAoKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gW11cbiAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBPYmplY3Qua2V5cyh0eXBlcykpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHR5cGVzW3R5cGVdXG4gICAgICAgIHJlc3VsdC5wdXNoKHRoaXMucGx1Z2luTWFuYWdlci5vdXRwdXRQYW5lbC5jcmVhdGVUYWIodHlwZSwgb3B0cykpXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSkoKVxuICB9XG5cbiAgLyoqXG4gIEVkaXRvciBldmVudCBzdWJzY3JpcHRpb24uIEZpcmVzIHdoZW4gbW91c2UgY3Vyc29yIHN0b3BwZWQgb3ZlciBhIHN5bWJvbCBpblxuICBlZGl0b3IuXG5cbiAgQHBhcmFtIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHRvIHByb3ZpZGUgYSB0b29sdGlwIG9uY2UgbmVlZGVkXG4gICovXG4gIG9uU2hvdWxkU2hvd1Rvb2x0aXAgKGNhbGxiYWNrOiBUVG9vbHRpcEhhbmRsZXIpIHtcbiAgICBjb25zdCBkaXNwID0gdGhpcy5wbHVnaW5NYW5hZ2VyLnRvb2x0aXBSZWdpc3RyeS5yZWdpc3RlcihcbiAgICAgIHRoaXMucGx1Z2luTmFtZSwge3ByaW9yaXR5OiAxMDAsIGhhbmRsZXI6IGNhbGxiYWNrfVxuICAgIClcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChkaXNwKVxuICAgIHJldHVybiBkaXNwXG4gIH1cblxuICAvKipcbiAgU2hvdyB0b29sdGlwIGluIGVkaXRvci5cblxuICBAcGFyYW0gZWRpdG9yIGVkaXRvciB0aGF0IHdpbGwgc2hvdyB0b29sdGlwXG4gIEBwYXJhbSBwb3MgdG9vbHRpcCBwb3NpdGlvblxuICBAcGFyYW0gZXZlbnRUeXBlIHR5cGUgb2YgZXZlbnRcbiAgQHBhcmFtIGRldGFpbCBET00gZXZlbnQgZGV0YWlsLCBmb3IgYXV0b21hdGljIGV2ZW50IHR5cGUgc2VsZWN0aW9uLCBpZ25vcmVkIGlmIGBldmVudFR5cGVgIGlzIHNldC5cbiAgQHBhcmFtIHRvb2x0aXAgdG9vbHRpcCBnZW5lcmF0b3IgZnVuY3Rpb25cbiAgKi9cbiAgc2hvd1Rvb2x0aXAgKHtlZGl0b3IsIHBvcywgZXZlbnRUeXBlLCBkZXRhaWwsIHRvb2x0aXB9OiBJU2hvd1Rvb2x0aXBQYXJhbXMpIHtcbiAgICBpZiAoIWV2ZW50VHlwZSkge1xuICAgICAgZXZlbnRUeXBlID0gZ2V0RXZlbnRUeXBlKGRldGFpbClcbiAgICB9XG4gICAgdGhpcy5wbHVnaW5NYW5hZ2VyLnRvb2x0aXBSZWdpc3RyeS5zaG93VG9vbHRpcChcbiAgICAgIGVkaXRvciwgZXZlbnRUeXBlLCB7cGx1Z2luTmFtZTogdGhpcy5wbHVnaW5OYW1lLCB0b29sdGlwfVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICBDb252ZW5pZW5jZSBmdW5jdGlvbi4gV2lsbCBmaXJlIGJlZm9yZSBIYXNrZWxsIGJ1ZmZlciBpcyBzYXZlZC5cbiAgKi9cbiAgb25XaWxsU2F2ZUJ1ZmZlciAoY2FsbGJhY2s6IFRUZXh0QnVmZmVyQ2FsbGJhY2spIHtcbiAgICBjb25zdCBkaXNwID0gdGhpcy5wbHVnaW5NYW5hZ2VyLm9uV2lsbFNhdmVCdWZmZXIoY2FsbGJhY2spXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQoZGlzcClcbiAgICByZXR1cm4gZGlzcFxuICB9XG5cbiAgLyoqXG4gIENvbnZlbmllbmNlIGZ1bmN0aW9uLiBXaWxsIGZpcmUgYWZ0ZXIgSGFza2VsbCBidWZmZXIgaXMgc2F2ZWQuXG4gICovXG4gIG9uRGlkU2F2ZUJ1ZmZlciAoY2FsbGJhY2s6IFRUZXh0QnVmZmVyQ2FsbGJhY2spIHtcbiAgICBjb25zdCBkaXNwID0gdGhpcy5wbHVnaW5NYW5hZ2VyLm9uRGlkU2F2ZUJ1ZmZlcihjYWxsYmFjaylcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChkaXNwKVxuICAgIHJldHVybiBkaXNwXG4gIH1cblxuICAvKipcbiAgQ29udmVuaWVuY2UgZnVuY3Rpb24uIFdpbGwgZmlyZSBhZnRlciBIYXNrZWxsIGJ1ZmZlciBzdG9wZWQgY2hhbmdpbmcuXG4gICovXG4gIG9uRGlkU3RvcENoYW5naW5nIChjYWxsYmFjazogVFRleHRCdWZmZXJDYWxsYmFjaykge1xuICAgIGNvbnN0IGRpc3AgPSB0aGlzLnBsdWdpbk1hbmFnZXIub25EaWRTdG9wQ2hhbmdpbmcoY2FsbGJhY2spXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQoZGlzcClcbiAgICByZXR1cm4gZGlzcFxuICB9XG5cbiAgLyoqXG4gIEFkZCBhIG5ldyBjb250cm9sIHRvIG91cHR1dCBwYW5lbCBoZWFkaW5nLlxuXG4gIEBwYXJhbSBlbGVtZW50IEhUTUxFbGVtZW50IG9mIGNvbnRyb2wsIG9yIHN0cmluZyB3aXRoIHRhZyBuYW1lXG4gIEBwYXJhbSBvcHRzIGRlc2NyaXB0aW9uIG9mIGVsZW1lbnRcbiAgKi9cbiAgYWRkUGFuZWxDb250cm9sIChlbGVtZW50OiBzdHJpbmcgfCBIVE1MRWxlbWVudCwgb3B0czogSUNvbnRyb2xPcHRzKSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRoaXMucGx1Z2luTWFuYWdlci5vdXRwdXRQYW5lbC5hZGRQYW5lbENvbnRyb2woe2VsZW1lbnQsIG9wdHN9KVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuZXdPcHRzOiBJQ29udHJvbE9wdHMgJiB7ZWxlbWVudDogSFRNTEVsZW1lbnR9ID0gey4uLm9wdHMsIGVsZW1lbnR9XG4gICAgICByZXR1cm4gdGhpcy5wbHVnaW5NYW5hZ2VyLm91dHB1dFBhbmVsLmFkZFBhbmVsQ29udHJvbCh7ZWxlbWVudDogRHVtbXlFbGVtZW50LCBvcHRzOiBuZXdPcHRzfSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgQWRkIHBlci1wcm9qZWN0IGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyB0byBiZSBtYW5hZ2VkIGJ5IGlkZS1oYXNrZWxsLiBUaGlzXG4gIHdpbGwgYWxzbyBhZGQgYSBjb250cm9sIGVsZW1lbnQgdG8gb3V0cHV0IHBhbmVsLlxuXG4gIEBwYXJhbSBzcGVjcyBzcGVjaWZpY2F0aW9uIG9mIHBhcmFtZXRlcnNcbiAgQHBhcmFtIHBhcmFtTmFtZSBuYW1lIG9mIGEgcGFyYW1ldGVyXG4gICovXG4gIGFkZENvbmZpZ1BhcmFtIChzcGVjczogeyBbcGFyYW1OYW1lOiBzdHJpbmddOiBJUGFyYW1TcGVjPE9iamVjdD4gfSkge1xuICAgIGNvbnN0IGRpc3AgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgZm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5rZXlzKHNwZWNzKSkge1xuICAgICAgY29uc3Qgc3BlYyA9IHNwZWNzW25hbWVdXG4gICAgICBkaXNwLmFkZChcbiAgICAgICAgdGhpcy5wbHVnaW5NYW5hZ2VyLmNvbmZpZ1BhcmFtTWFuYWdlci5hZGQodGhpcy5wbHVnaW5OYW1lLCBuYW1lLCBzcGVjKVxuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gZGlzcFxuICB9XG5cbiAgLyoqXG4gIEdldCB2YWx1ZSBvZiBhIGNvbmZpZyBwYXJhbWV0ZXIsIGVpdGhlciBmb3IgdGhpcyBwbHVnaW4sIG9yIGZvciBhbm90aGVyXG4gIG5hbWVkIHBsdWdpbi4gSWYgdmFsdWUgaXNuJ3Qgc2V0IGFuZCBkZWZhdWx0IGlzIGB1bmRlZmluZWRgLCB3aWxsIHNob3dcbiAgYSBzZWxlY3Rpb24gZGlhbG9nLlxuXG4gIEByZXR1cm5zIGBQcm9taXNlYCB0aGF0IHJlc29sdmVzIHRvIHBhcmFtZXRlciB2YWx1ZS4gSWYgdXNlciBjYW5jZWxzIHNlbGVjdGlvblxuICBkaWFsb2csIGl0IHdpbGwgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYFxuICAqL1xuICBhc3luYyBnZXRDb25maWdQYXJhbSAobmFtZTogc3RyaW5nKTogUHJvbWlzZTxPYmplY3QgfCB1bmRlZmluZWQ+XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp1bmlmaWVkLXNpZ25hdHVyZXNcbiAgYXN5bmMgZ2V0Q29uZmlnUGFyYW0gKG90aGVyUGx1Z2luTmFtZTogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPE9iamVjdCB8IHVuZGVmaW5lZD5cbiAgYXN5bmMgZ2V0Q29uZmlnUGFyYW0gKG90aGVyUGx1Z2luTmFtZTogc3RyaW5nLCBuYW1lPzogc3RyaW5nKSB7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICBuYW1lID0gb3RoZXJQbHVnaW5OYW1lXG4gICAgICBvdGhlclBsdWdpbk5hbWUgPSB0aGlzLnBsdWdpbk5hbWVcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucGx1Z2luTWFuYWdlci5jb25maWdQYXJhbU1hbmFnZXIuZ2V0KG90aGVyUGx1Z2luTmFtZSwgbmFtZSlcbiAgfVxuXG4gIC8qKlxuICBAcGFyYW0gbmFtZSBQYXJhbWV0ZXIgbmFtZVxuICBAcGFyYW0gdmFsdWUgSWYgb21pdHRlZCwgYSBzZWxlY3Rpb24gZGlhbG9nIHdpbGwgYmUgcHJlc2VudGVkIHRvIHVzZXIuXG5cbiAgQHJldHVybnMgYSBgUHJvbWlzZWAgdGhhdCByZXNvbHZlcyB0byBwYXJhbWV0ZXIgdmFsdWUuIElmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGBcbiAgYW5kIHVzZXIgY2FuY2VscyBzZWxlY3Rpb24gZGlhbG9nLCByZXNvbHZlcyB0byBgdW5kZWZpbmVkYFxuICAqL1xuICBhc3luYyBzZXRDb25maWdQYXJhbSAobmFtZTogc3RyaW5nLCB2YWx1ZT86IE9iamVjdCkge1xuICAgIHJldHVybiB0aGlzLnBsdWdpbk1hbmFnZXIuY29uZmlnUGFyYW1NYW5hZ2VyLnNldCh0aGlzLnBsdWdpbk5hbWUsIG5hbWUsIHZhbHVlKVxuICB9XG5cbiAgLyoqXG4gIFV0aWxpdHkgZnVuY3Rpb24gdG8gZXh0cmFjdCBldmVudCByYW5nZS90eXBlIGZvciBhIGdpdmVuIGV2ZW50XG5cbiAgQHBhcmFtIGVkaXRvciBlZGl0b3IgdGhhdCBnZW5lcmF0ZWQgZXZlbnRcbiAgQHBhcmFtIGRldGFpbCBldmVudCBkZXRhaWwsIGlnbm9yZWQgaWYgYGV2ZW50VHlwZWAgaXMgc2V0XG4gIEBwYXJhbSBldmVudFR5cGUgdHlwZSBvZiBldmVudFxuICBAcGFyYW0gcG9zIGV2ZW50IHBvc2l0aW9uLCBjYW4gYmUgdW5kZWZpbmVkXG5cbiAgQHBhcmFtIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGltbWVkaWF0ZWx5IHdpdGggZXZlbnQgcmFuZ2UvdHlwZSBhcyBhcmd1bWVudHNcbiAgKi9cbiAgd2l0aEV2ZW50UmFuZ2U8VD4gKHtlZGl0b3IsIGRldGFpbCwgZXZlbnRUeXBlLCBwb3N9OiBJRXZlbnRSYW5nZVBhcmFtcywgY2FsbGJhY2s6IFRFdmVudFJhbmdlQ2FsbGJhY2s8VD4pIHtcbiAgICBsZXQgcHBvczogUG9pbnQgfCB1bmRlZmluZWRcbiAgICBpZiAocG9zKSB7IHBwb3MgPSBQb2ludC5mcm9tT2JqZWN0KHBvcykgfVxuICAgIGlmICghZXZlbnRUeXBlKSB7IGV2ZW50VHlwZSA9IGdldEV2ZW50VHlwZShkZXRhaWwpIH1cbiAgICBjb25zdCBjb250cm9sbGVyID0gdGhpcy5wbHVnaW5NYW5hZ2VyLmNvbnRyb2xsZXIoZWRpdG9yKVxuICAgIGlmICghY29udHJvbGxlcikgeyByZXR1cm4gfVxuICAgIGNvbnN0IHJlcyA9IGNvbnRyb2xsZXIuZ2V0RXZlbnRSYW5nZShldmVudFR5cGUpXG4gICAgaWYgKCFyZXMpIHsgcmV0dXJuIH1cbiAgICByZXR1cm4gY2FsbGJhY2socmVzKVxuICB9XG59XG4iXX0=