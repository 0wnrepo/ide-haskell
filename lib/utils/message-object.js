"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const highlight = require("atom-highlight");
function isTextMessage(msg) {
    return !!(msg && msg.text);
}
function isHTMLMessage(msg) {
    return !!(msg && msg.html);
}
function isIMessageObject(msg) {
    return !!(msg && msg.toHtml && msg.raw);
}
class MessageObject {
    constructor(msg) {
        this.msg = msg;
    }
    static fromObject(message) {
        if (isIMessageObject(message)) {
            return message;
        }
        else {
            return new MessageObject(message);
        }
    }
    toHtml(linter = false) {
        if (this.htmlCache !== undefined) {
            return this.htmlCache;
        }
        if (isTextMessage(this.msg) && this.msg.highlighter) {
            const html = highlight({
                fileContents: this.msg.text,
                scopeName: this.msg.highlighter,
                nbsp: linter,
                lineDivs: linter,
            });
            if (html) {
                return this.htmlCache = html;
            }
            this.msg.highlighter = undefined;
            return this.toHtml();
        }
        else if (isHTMLMessage(this.msg)) {
            return this.htmlCache = this.msg.html;
        }
        else {
            let text;
            if (isTextMessage(this.msg)) {
                text = this.msg.text;
            }
            else {
                text = this.msg;
            }
            const div = document.createElement('div');
            div.innerText = text;
            return this.htmlCache = div.innerHTML;
        }
    }
    raw() {
        if (isTextMessage(this.msg)) {
            return this.msg.text;
        }
        else if (isHTMLMessage(this.msg)) {
            return this.msg.html;
        }
        else {
            return this.msg;
        }
    }
}
exports.MessageObject = MessageObject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1vYmplY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvbWVzc2FnZS1vYmplY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBNEM7QUFFNUMsdUJBQXdCLEdBQWlCO0lBQ3ZDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUssR0FBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNsRCxDQUFDO0FBRUQsdUJBQXdCLEdBQWlCO0lBQ3ZDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUssR0FBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNsRCxDQUFDO0FBRUQsMEJBQTJCLEdBQXNDO0lBQy9ELE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUssR0FBMEIsQ0FBQyxNQUFNLElBQUssR0FBMEIsQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUN6RixDQUFDO0FBRUQ7SUFVRSxZQUFxQixHQUFpQjtRQUFqQixRQUFHLEdBQUgsR0FBRyxDQUFjO0lBRXRDLENBQUM7SUFYTSxNQUFNLENBQUMsVUFBVSxDQUFFLE9BQTBDO1FBQ2xFLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixNQUFNLENBQUMsT0FBTyxDQUFBO1FBQ2hCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNuQyxDQUFDO0lBQ0gsQ0FBQztJQU9NLE1BQU0sQ0FBRSxTQUFrQixLQUFLO1FBQ3BDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFBO1FBQUMsQ0FBQztRQUMzRCxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNwRCxNQUFNLElBQUksR0FBRyxTQUFTLENBQUM7Z0JBQ3JCLFlBQVksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUk7Z0JBQzNCLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVc7Z0JBQy9CLElBQUksRUFBRSxNQUFNO2dCQUNaLFFBQVEsRUFBRSxNQUFNO2FBQ2pCLENBQUMsQ0FBQTtZQUNGLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFBO1lBQUMsQ0FBQztZQUUxQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUE7WUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUN0QixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFBO1FBQ3ZDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksSUFBWSxDQUFBO1lBQ2hCLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUE7WUFDdEIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFBO1lBQ2pCLENBQUM7WUFDRCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3pDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFBO1lBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUE7UUFDdkMsQ0FBQztJQUNILENBQUM7SUFFTSxHQUFHO1FBQ1IsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFBO1FBQ3RCLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFBO1FBQ3RCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFBO1FBQ2pCLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFuREQsc0NBbURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGhpZ2hsaWdodCA9IHJlcXVpcmUoJ2F0b20taGlnaGxpZ2h0JylcblxuZnVuY3Rpb24gaXNUZXh0TWVzc2FnZSAobXNnOiBVUEkuVE1lc3NhZ2UpOiBtc2cgaXMgVVBJLklNZXNzYWdlVGV4dCB7XG4gIHJldHVybiAhIShtc2cgJiYgKG1zZyBhcyBVUEkuSU1lc3NhZ2VUZXh0KS50ZXh0KVxufVxuXG5mdW5jdGlvbiBpc0hUTUxNZXNzYWdlIChtc2c6IFVQSS5UTWVzc2FnZSk6IG1zZyBpcyBVUEkuSU1lc3NhZ2VIVE1MIHtcbiAgcmV0dXJuICEhKG1zZyAmJiAobXNnIGFzIFVQSS5JTWVzc2FnZUhUTUwpLmh0bWwpXG59XG5cbmZ1bmN0aW9uIGlzSU1lc3NhZ2VPYmplY3QgKG1zZzogVVBJLlRNZXNzYWdlIHwgVVBJLklNZXNzYWdlT2JqZWN0KTogbXNnIGlzIFVQSS5JTWVzc2FnZU9iamVjdCB7XG4gIHJldHVybiAhIShtc2cgJiYgKG1zZyBhcyBVUEkuSU1lc3NhZ2VPYmplY3QpLnRvSHRtbCAmJiAobXNnIGFzIFVQSS5JTWVzc2FnZU9iamVjdCkucmF3KVxufVxuXG5leHBvcnQgY2xhc3MgTWVzc2FnZU9iamVjdCBpbXBsZW1lbnRzIFVQSS5JTWVzc2FnZU9iamVjdCB7XG4gIHB1YmxpYyBzdGF0aWMgZnJvbU9iamVjdCAobWVzc2FnZTogVVBJLlRNZXNzYWdlIHwgVVBJLklNZXNzYWdlT2JqZWN0KTogVVBJLklNZXNzYWdlT2JqZWN0IHtcbiAgICBpZiAoaXNJTWVzc2FnZU9iamVjdChtZXNzYWdlKSkge1xuICAgICAgcmV0dXJuIG1lc3NhZ2VcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBNZXNzYWdlT2JqZWN0KG1lc3NhZ2UpXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBodG1sQ2FjaGU/OiBzdHJpbmdcbiAgY29uc3RydWN0b3IgKHByaXZhdGUgbXNnOiBVUEkuVE1lc3NhZ2UpIHtcbiAgICAvLyBub29wXG4gIH1cblxuICBwdWJsaWMgdG9IdG1sIChsaW50ZXI6IGJvb2xlYW4gPSBmYWxzZSk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMuaHRtbENhY2hlICE9PSB1bmRlZmluZWQpIHsgcmV0dXJuIHRoaXMuaHRtbENhY2hlIH1cbiAgICBpZiAoaXNUZXh0TWVzc2FnZSh0aGlzLm1zZykgJiYgdGhpcy5tc2cuaGlnaGxpZ2h0ZXIpIHtcbiAgICAgIGNvbnN0IGh0bWwgPSBoaWdobGlnaHQoe1xuICAgICAgICBmaWxlQ29udGVudHM6IHRoaXMubXNnLnRleHQsXG4gICAgICAgIHNjb3BlTmFtZTogdGhpcy5tc2cuaGlnaGxpZ2h0ZXIsXG4gICAgICAgIG5ic3A6IGxpbnRlcixcbiAgICAgICAgbGluZURpdnM6IGxpbnRlcixcbiAgICAgIH0pXG4gICAgICBpZiAoaHRtbCkgeyByZXR1cm4gdGhpcy5odG1sQ2FjaGUgPSBodG1sIH1cblxuICAgICAgdGhpcy5tc2cuaGlnaGxpZ2h0ZXIgPSB1bmRlZmluZWRcbiAgICAgIHJldHVybiB0aGlzLnRvSHRtbCgpXG4gICAgfSBlbHNlIGlmIChpc0hUTUxNZXNzYWdlKHRoaXMubXNnKSkge1xuICAgICAgcmV0dXJuIHRoaXMuaHRtbENhY2hlID0gdGhpcy5tc2cuaHRtbFxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdGV4dDogc3RyaW5nXG4gICAgICBpZiAoaXNUZXh0TWVzc2FnZSh0aGlzLm1zZykpIHtcbiAgICAgICAgdGV4dCA9IHRoaXMubXNnLnRleHRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRleHQgPSB0aGlzLm1zZ1xuICAgICAgfVxuICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIGRpdi5pbm5lclRleHQgPSB0ZXh0XG4gICAgICByZXR1cm4gdGhpcy5odG1sQ2FjaGUgPSBkaXYuaW5uZXJIVE1MXG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJhdyAoKTogc3RyaW5nIHtcbiAgICBpZiAoaXNUZXh0TWVzc2FnZSh0aGlzLm1zZykpIHtcbiAgICAgIHJldHVybiB0aGlzLm1zZy50ZXh0XG4gICAgfSBlbHNlIGlmIChpc0hUTUxNZXNzYWdlKHRoaXMubXNnKSkge1xuICAgICAgcmV0dXJuIHRoaXMubXNnLmh0bWxcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMubXNnXG4gICAgfVxuICB9XG59XG4iXX0=