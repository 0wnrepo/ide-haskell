"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const highlight = require("atom-highlight");
const cast = require("./cast");
class MessageObject {
    constructor(msg) {
        this.msg = msg;
    }
    static fromObject(message) {
        if (cast.isIMessageObject(message)) {
            return message;
        }
        else {
            return new MessageObject(message);
        }
    }
    toHtml(linter = false) {
        if (this.htmlCache !== undefined) {
            return this.htmlCache;
        }
        if (cast.isTextMessage(this.msg) && this.msg.highlighter) {
            const html = highlight({
                fileContents: this.msg.text,
                scopeName: this.msg.highlighter,
                nbsp: linter,
                lineDivs: linter,
            });
            if (html) {
                return this.htmlCache = html;
            }
            this.msg.highlighter = undefined;
            return this.toHtml();
        }
        else if (cast.isHTMLMessage(this.msg)) {
            return this.htmlCache = this.msg.html;
        }
        else {
            let text;
            if (cast.isTextMessage(this.msg)) {
                text = this.msg.text;
            }
            else {
                text = this.msg;
            }
            const div = document.createElement('div');
            div.innerText = text;
            return this.htmlCache = div.innerHTML;
        }
    }
    raw() {
        if (cast.isTextMessage(this.msg)) {
            return this.msg.text;
        }
        else if (cast.isHTMLMessage(this.msg)) {
            return this.msg.html;
        }
        else {
            return this.msg;
        }
    }
}
exports.MessageObject = MessageObject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1vYmplY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvbWVzc2FnZS1vYmplY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBNEM7QUFDNUMsK0JBQThCO0FBSTlCO0lBRUUsWUFBb0IsR0FBaUI7UUFBakIsUUFBRyxHQUFILEdBQUcsQ0FBYztJQUVyQyxDQUFDO0lBRU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUEwQztRQUNqRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25DLE1BQU0sQ0FBQyxPQUFPLENBQUE7UUFDaEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ25DLENBQUM7SUFDSCxDQUFDO0lBRU0sTUFBTSxDQUFDLFNBQWtCLEtBQUs7UUFDbkMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUE7UUFBQyxDQUFDO1FBQzNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUN6RCxNQUFNLElBQUksR0FBRyxTQUFTLENBQUM7Z0JBQ3JCLFlBQVksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUk7Z0JBQzNCLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVc7Z0JBQy9CLElBQUksRUFBRSxNQUFNO2dCQUNaLFFBQVEsRUFBRSxNQUFNO2FBQ2pCLENBQUMsQ0FBQTtZQUNGLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFBO1lBQUMsQ0FBQztZQUUxQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUE7WUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUN0QixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQTtRQUN2QyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLElBQVksQ0FBQTtZQUNoQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQTtZQUN0QixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUE7WUFDakIsQ0FBQztZQUNELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDekMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUE7WUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQTtRQUN2QyxDQUFDO0lBQ0gsQ0FBQztJQUVNLEdBQUc7UUFDUixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFBO1FBQ3RCLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQTtRQUN0QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQTtRQUNqQixDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBbkRELHNDQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBoaWdobGlnaHQgPSByZXF1aXJlKCdhdG9tLWhpZ2hsaWdodCcpXG5pbXBvcnQgKiBhcyBjYXN0IGZyb20gJy4vY2FzdCdcblxudHlwZSBJTWVzc2FnZU9iamVjdCA9IFVQSS5JTWVzc2FnZU9iamVjdFxuXG5leHBvcnQgY2xhc3MgTWVzc2FnZU9iamVjdCBpbXBsZW1lbnRzIElNZXNzYWdlT2JqZWN0IHtcbiAgcHJpdmF0ZSBodG1sQ2FjaGU/OiBzdHJpbmdcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtc2c6IFVQSS5UTWVzc2FnZSkge1xuICAgIC8vIG5vb3BcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZnJvbU9iamVjdChtZXNzYWdlOiBVUEkuVE1lc3NhZ2UgfCBVUEkuSU1lc3NhZ2VPYmplY3QpOiBVUEkuSU1lc3NhZ2VPYmplY3Qge1xuICAgIGlmIChjYXN0LmlzSU1lc3NhZ2VPYmplY3QobWVzc2FnZSkpIHtcbiAgICAgIHJldHVybiBtZXNzYWdlXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgTWVzc2FnZU9iamVjdChtZXNzYWdlKVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB0b0h0bWwobGludGVyOiBib29sZWFuID0gZmFsc2UpOiBzdHJpbmcge1xuICAgIGlmICh0aGlzLmh0bWxDYWNoZSAhPT0gdW5kZWZpbmVkKSB7IHJldHVybiB0aGlzLmh0bWxDYWNoZSB9XG4gICAgaWYgKGNhc3QuaXNUZXh0TWVzc2FnZSh0aGlzLm1zZykgJiYgdGhpcy5tc2cuaGlnaGxpZ2h0ZXIpIHtcbiAgICAgIGNvbnN0IGh0bWwgPSBoaWdobGlnaHQoe1xuICAgICAgICBmaWxlQ29udGVudHM6IHRoaXMubXNnLnRleHQsXG4gICAgICAgIHNjb3BlTmFtZTogdGhpcy5tc2cuaGlnaGxpZ2h0ZXIsXG4gICAgICAgIG5ic3A6IGxpbnRlcixcbiAgICAgICAgbGluZURpdnM6IGxpbnRlcixcbiAgICAgIH0pXG4gICAgICBpZiAoaHRtbCkgeyByZXR1cm4gdGhpcy5odG1sQ2FjaGUgPSBodG1sIH1cblxuICAgICAgdGhpcy5tc2cuaGlnaGxpZ2h0ZXIgPSB1bmRlZmluZWRcbiAgICAgIHJldHVybiB0aGlzLnRvSHRtbCgpXG4gICAgfSBlbHNlIGlmIChjYXN0LmlzSFRNTE1lc3NhZ2UodGhpcy5tc2cpKSB7XG4gICAgICByZXR1cm4gdGhpcy5odG1sQ2FjaGUgPSB0aGlzLm1zZy5odG1sXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCB0ZXh0OiBzdHJpbmdcbiAgICAgIGlmIChjYXN0LmlzVGV4dE1lc3NhZ2UodGhpcy5tc2cpKSB7XG4gICAgICAgIHRleHQgPSB0aGlzLm1zZy50ZXh0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0ID0gdGhpcy5tc2dcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICBkaXYuaW5uZXJUZXh0ID0gdGV4dFxuICAgICAgcmV0dXJuIHRoaXMuaHRtbENhY2hlID0gZGl2LmlubmVySFRNTFxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByYXcoKTogc3RyaW5nIHtcbiAgICBpZiAoY2FzdC5pc1RleHRNZXNzYWdlKHRoaXMubXNnKSkge1xuICAgICAgcmV0dXJuIHRoaXMubXNnLnRleHRcbiAgICB9IGVsc2UgaWYgKGNhc3QuaXNIVE1MTWVzc2FnZSh0aGlzLm1zZykpIHtcbiAgICAgIHJldHVybiB0aGlzLm1zZy5odG1sXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLm1zZ1xuICAgIH1cbiAgfVxufVxuIl19