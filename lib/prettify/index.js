"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_haskell_utils_1 = require("atom-haskell-utils");
const util_cabal_format_1 = require("./util-cabal-format");
const util_stylish_haskell_1 = require("./util-stylish-haskell");
async function prettifyFile(editor) {
    const [firstCursor, ...cursors] = editor
        .getCursors()
        .map((cursor) => cursor.getBufferPosition());
    const format = editor.getGrammar().scopeName;
    const prettify = format === 'source.cabal' ? util_cabal_format_1.format : util_stylish_haskell_1.format;
    const workDir = (await atom_haskell_utils_1.getRootDir(editor.getBuffer())).getPath();
    try {
        const { stdout, stderr } = await prettify(editor.getText(), workDir, editor.getRootScopeDescriptor());
        editor.setText(stdout);
        if (editor.getLastCursor()) {
            editor
                .getLastCursor()
                .setBufferPosition(firstCursor, { autoscroll: false });
        }
        cursors.forEach((cursor) => {
            editor.addCursorAtBufferPosition(cursor, { autoscroll: false });
        });
        if (stderr.length > 0) {
            atom.notifications.addWarning('Prettifier reported the following problems:', {
                detail: stderr,
                dismissable: true,
            });
        }
    }
    catch (e) {
        const err = e.error || e;
        let stderr = e.stderr ? e.stderr.trim() : '';
        if (err.message.includes(stderr)) {
            stderr = '';
        }
        atom.notifications.addError('Failed to prettify', {
            detail: `${stderr ? `${stderr}\n\n` : ''}${err.message}`,
            stack: err.stack,
            dismissable: true,
        });
    }
}
exports.prettifyFile = prettifyFile;
var editor_controller_1 = require("./editor-controller");
exports.PrettifyEditorController = editor_controller_1.PrettifyEditorController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJldHRpZnkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwyREFBK0M7QUFDL0MsMkRBQTJEO0FBQzNELGlFQUErRDtBQUV4RCxLQUFLLHVCQUF1QixNQUFrQjtJQUNuRCxNQUFNLENBQUMsV0FBVyxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsTUFBTTtTQUNyQyxVQUFVLEVBQUU7U0FDWixHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUE7SUFDOUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQTtJQUM1QyxNQUFNLFFBQVEsR0FBRyxNQUFNLEtBQUssY0FBYyxDQUFDLENBQUMsQ0FBQywwQkFBVyxDQUFDLENBQUMsQ0FBQyw2QkFBWSxDQUFBO0lBQ3ZFLE1BQU0sT0FBTyxHQUFHLENBQUMsTUFBTSwrQkFBVSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDaEUsSUFBSSxDQUFDO1FBQ0gsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLFFBQVEsQ0FDdkMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUNoQixPQUFPLEVBQ1AsTUFBTSxDQUFDLHNCQUFzQixFQUFFLENBQ2hDLENBQUE7UUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3RCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDM0IsTUFBTTtpQkFDSCxhQUFhLEVBQUU7aUJBQ2YsaUJBQWlCLENBQUMsV0FBVyxFQUFFLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7UUFDMUQsQ0FBQztRQUNELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUN6QixNQUFNLENBQUMseUJBQXlCLENBQUMsTUFBTSxFQUFFLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7UUFDakUsQ0FBQyxDQUFDLENBQUE7UUFDRixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQzNCLDZDQUE2QyxFQUM3QztnQkFDRSxNQUFNLEVBQUUsTUFBTTtnQkFDZCxXQUFXLEVBQUUsSUFBSTthQUNsQixDQUNGLENBQUE7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFWCxNQUFNLEdBQUcsR0FBVSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQTtRQUUvQixJQUFJLE1BQU0sR0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7UUFDcEQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sR0FBRyxFQUFFLENBQUE7UUFDYixDQUFDO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLEVBQUU7WUFDaEQsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLE9BQU8sRUFBRTtZQUN4RCxLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUs7WUFDaEIsV0FBVyxFQUFFLElBQUk7U0FDbEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztBQUNILENBQUM7QUE3Q0Qsb0NBNkNDO0FBRUQseURBQThEO0FBQXJELHVEQUFBLHdCQUF3QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGV4dEVkaXRvciB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBnZXRSb290RGlyIH0gZnJvbSAnYXRvbS1oYXNrZWxsLXV0aWxzJ1xuaW1wb3J0IHsgZm9ybWF0IGFzIGNhYmFsRm9ybWF0IH0gZnJvbSAnLi91dGlsLWNhYmFsLWZvcm1hdCdcbmltcG9ydCB7IGZvcm1hdCBhcyBmaWx0ZXJGb3JtYXQgfSBmcm9tICcuL3V0aWwtc3R5bGlzaC1oYXNrZWxsJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJldHRpZnlGaWxlKGVkaXRvcjogVGV4dEVkaXRvcikge1xuICBjb25zdCBbZmlyc3RDdXJzb3IsIC4uLmN1cnNvcnNdID0gZWRpdG9yXG4gICAgLmdldEN1cnNvcnMoKVxuICAgIC5tYXAoKGN1cnNvcikgPT4gY3Vyc29yLmdldEJ1ZmZlclBvc2l0aW9uKCkpXG4gIGNvbnN0IGZvcm1hdCA9IGVkaXRvci5nZXRHcmFtbWFyKCkuc2NvcGVOYW1lXG4gIGNvbnN0IHByZXR0aWZ5ID0gZm9ybWF0ID09PSAnc291cmNlLmNhYmFsJyA/IGNhYmFsRm9ybWF0IDogZmlsdGVyRm9ybWF0XG4gIGNvbnN0IHdvcmtEaXIgPSAoYXdhaXQgZ2V0Um9vdERpcihlZGl0b3IuZ2V0QnVmZmVyKCkpKS5nZXRQYXRoKClcbiAgdHJ5IHtcbiAgICBjb25zdCB7IHN0ZG91dCwgc3RkZXJyIH0gPSBhd2FpdCBwcmV0dGlmeShcbiAgICAgIGVkaXRvci5nZXRUZXh0KCksXG4gICAgICB3b3JrRGlyLFxuICAgICAgZWRpdG9yLmdldFJvb3RTY29wZURlc2NyaXB0b3IoKSxcbiAgICApXG4gICAgZWRpdG9yLnNldFRleHQoc3Rkb3V0KVxuICAgIGlmIChlZGl0b3IuZ2V0TGFzdEN1cnNvcigpKSB7XG4gICAgICBlZGl0b3JcbiAgICAgICAgLmdldExhc3RDdXJzb3IoKVxuICAgICAgICAuc2V0QnVmZmVyUG9zaXRpb24oZmlyc3RDdXJzb3IsIHsgYXV0b3Njcm9sbDogZmFsc2UgfSlcbiAgICB9XG4gICAgY3Vyc29ycy5mb3JFYWNoKChjdXJzb3IpID0+IHtcbiAgICAgIGVkaXRvci5hZGRDdXJzb3JBdEJ1ZmZlclBvc2l0aW9uKGN1cnNvciwgeyBhdXRvc2Nyb2xsOiBmYWxzZSB9KVxuICAgIH0pXG4gICAgaWYgKHN0ZGVyci5sZW5ndGggPiAwKSB7XG4gICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkV2FybmluZyhcbiAgICAgICAgJ1ByZXR0aWZpZXIgcmVwb3J0ZWQgdGhlIGZvbGxvd2luZyBwcm9ibGVtczonLFxuICAgICAgICB7XG4gICAgICAgICAgZGV0YWlsOiBzdGRlcnIsXG4gICAgICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICApXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVuc2FmZS1hbnlcbiAgICBjb25zdCBlcnI6IEVycm9yID0gZS5lcnJvciB8fCBlXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVuc2FmZS1hbnlcbiAgICBsZXQgc3RkZXJyOiBzdHJpbmcgPSBlLnN0ZGVyciA/IGUuc3RkZXJyLnRyaW0oKSA6ICcnXG4gICAgaWYgKGVyci5tZXNzYWdlLmluY2x1ZGVzKHN0ZGVycikpIHtcbiAgICAgIHN0ZGVyciA9ICcnXG4gICAgfVxuICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcignRmFpbGVkIHRvIHByZXR0aWZ5Jywge1xuICAgICAgZGV0YWlsOiBgJHtzdGRlcnIgPyBgJHtzdGRlcnJ9XFxuXFxuYCA6ICcnfSR7ZXJyLm1lc3NhZ2V9YCxcbiAgICAgIHN0YWNrOiBlcnIuc3RhY2ssXG4gICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcbiAgICB9KVxuICB9XG59XG5cbmV4cG9ydCB7IFByZXR0aWZ5RWRpdG9yQ29udHJvbGxlciB9IGZyb20gJy4vZWRpdG9yLWNvbnRyb2xsZXInXG4iXX0=