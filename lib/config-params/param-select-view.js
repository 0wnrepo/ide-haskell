"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SelectListView = require("atom-select-list");
async function selectListView({ items, heading, itemTemplate, itemFilterKey, itemElement }) {
    const itemElementDefault = (item) => {
        const li = document.createElement('li');
        if (itemTemplate) {
            li.innerHTML = itemTemplate(item);
        }
        else {
            li.innerText = `${item}`;
        }
        if (li.firstElementChild && li.firstElementChild.tagName === 'LI') {
            li.innerHTML = li.firstElementChild.innerHTML;
        }
        return li;
    };
    const filterKeyFn = (item) => {
        if (typeof itemFilterKey === 'string') {
            return `${item[itemFilterKey]}`;
        }
        else if (itemFilterKey) {
            return itemFilterKey(item);
        }
        else {
            return `${item}`;
        }
    };
    const myitems = await Promise.resolve(items);
    let panel;
    let res;
    try {
        res = await new Promise((resolve) => {
            const select = new SelectListView({
                items: myitems,
                infoMessage: heading,
                itemsClassList: ['ide-haskell'],
                elementForItem: itemElement || itemElementDefault,
                filterKeyForItem: filterKeyFn,
                didCancelSelection: () => {
                    resolve();
                },
                didConfirmSelection: (item) => {
                    resolve(item);
                },
            });
            select.element.classList.add('ide-haskell');
            panel = atom.workspace.addModalPanel({
                item: select,
                visible: true,
            });
            select.focus();
        });
    }
    finally {
        panel && panel.destroy();
    }
    return res;
}
exports.selectListView = selectListView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW0tc2VsZWN0LXZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnLXBhcmFtcy9wYXJhbS1zZWxlY3Qtdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFtRDtBQVc1QyxLQUFLLHlCQUNWLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBd0I7SUFFbEYsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLElBQU8sRUFBRSxFQUFFO1FBQ3JDLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUNqQixFQUFFLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNuQyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixFQUFFLENBQUMsU0FBUyxHQUFHLEdBQUcsSUFBSSxFQUFFLENBQUE7UUFDMUIsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsSUFBSSxFQUFFLENBQUMsaUJBQWlCLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDbEUsRUFBRSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFBO1FBQy9DLENBQUM7UUFDRCxNQUFNLENBQUMsRUFBRSxDQUFBO0lBQ1gsQ0FBQyxDQUFBO0lBQ0QsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFPLEVBQUUsRUFBRTtRQUM5QixFQUFFLENBQUMsQ0FBQyxPQUFPLGFBQWEsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFBO1FBQ2pDLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUN6QixNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzVCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFBO1FBQ2xCLENBQUM7SUFDSCxDQUFDLENBQUE7SUFDRCxNQUFNLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDNUMsSUFBSSxLQUEyQyxDQUFBO0lBQy9DLElBQUksR0FBa0IsQ0FBQTtJQUN0QixJQUFJLENBQUM7UUFDSCxHQUFHLEdBQUcsTUFBTSxJQUFJLE9BQU8sQ0FBZ0IsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNqRCxNQUFNLE1BQU0sR0FBRyxJQUFJLGNBQWMsQ0FBQztnQkFDaEMsS0FBSyxFQUFFLE9BQU87Z0JBQ2QsV0FBVyxFQUFFLE9BQU87Z0JBQ3BCLGNBQWMsRUFBRSxDQUFDLGFBQWEsQ0FBQztnQkFDL0IsY0FBYyxFQUFFLFdBQVcsSUFBSSxrQkFBa0I7Z0JBQ2pELGdCQUFnQixFQUFFLFdBQVc7Z0JBQzdCLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtvQkFDdkIsT0FBTyxFQUFFLENBQUE7Z0JBQ1gsQ0FBQztnQkFDRCxtQkFBbUIsRUFBRSxDQUFDLElBQU8sRUFBRSxFQUFFO29CQUMvQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7Z0JBQ2YsQ0FBQzthQUNGLENBQUMsQ0FBQTtZQUNGLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQTtZQUMzQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7Z0JBQ25DLElBQUksRUFBRSxNQUFNO2dCQUNaLE9BQU8sRUFBRSxJQUFJO2FBQ2QsQ0FBQyxDQUFBO1lBQ0YsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ2hCLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztZQUFTLENBQUM7UUFDVCxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzFCLENBQUM7SUFDRCxNQUFNLENBQUMsR0FBRyxDQUFBO0FBQ1osQ0FBQztBQXRERCx3Q0FzREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2VsZWN0TGlzdFZpZXcgPSByZXF1aXJlKCdhdG9tLXNlbGVjdC1saXN0JylcbmltcG9ydCB7IFBhbmVsIH0gZnJvbSAnYXRvbSdcblxuZXhwb3J0IGludGVyZmFjZSBJU2VsZWN0TGlzdFBhcmFtczxUPiB7XG4gIGl0ZW1zOiBUW10gfCBQcm9taXNlPFRbXT5cbiAgaGVhZGluZz86IHN0cmluZ1xuICBpdGVtVGVtcGxhdGU/OiAoaXRlbTogVCkgPT4gc3RyaW5nXG4gIGl0ZW1GaWx0ZXJLZXk/OiBzdHJpbmcgfCAoKGl0ZW06IFQpID0+IHN0cmluZylcbiAgaXRlbUVsZW1lbnQ/OiAoaXRlbTogVCkgPT4gSFRNTEVsZW1lbnRcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbGVjdExpc3RWaWV3PFQ+KFxuICB7IGl0ZW1zLCBoZWFkaW5nLCBpdGVtVGVtcGxhdGUsIGl0ZW1GaWx0ZXJLZXksIGl0ZW1FbGVtZW50IH06IElTZWxlY3RMaXN0UGFyYW1zPFQ+LFxuKTogUHJvbWlzZTxUIHwgdW5kZWZpbmVkPiB7XG4gIGNvbnN0IGl0ZW1FbGVtZW50RGVmYXVsdCA9IChpdGVtOiBUKSA9PiB7XG4gICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpXG4gICAgaWYgKGl0ZW1UZW1wbGF0ZSkge1xuICAgICAgbGkuaW5uZXJIVE1MID0gaXRlbVRlbXBsYXRlKGl0ZW0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGxpLmlubmVyVGV4dCA9IGAke2l0ZW19YFxuICAgIH1cbiAgICAvLyBoYWNrIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgIGlmIChsaS5maXJzdEVsZW1lbnRDaGlsZCAmJiBsaS5maXJzdEVsZW1lbnRDaGlsZC50YWdOYW1lID09PSAnTEknKSB7XG4gICAgICBsaS5pbm5lckhUTUwgPSBsaS5maXJzdEVsZW1lbnRDaGlsZC5pbm5lckhUTUxcbiAgICB9XG4gICAgcmV0dXJuIGxpXG4gIH1cbiAgY29uc3QgZmlsdGVyS2V5Rm4gPSAoaXRlbTogVCkgPT4ge1xuICAgIGlmICh0eXBlb2YgaXRlbUZpbHRlcktleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBgJHtpdGVtW2l0ZW1GaWx0ZXJLZXldfWBcbiAgICB9IGVsc2UgaWYgKGl0ZW1GaWx0ZXJLZXkpIHtcbiAgICAgIHJldHVybiBpdGVtRmlsdGVyS2V5KGl0ZW0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgJHtpdGVtfWBcbiAgICB9XG4gIH1cbiAgY29uc3QgbXlpdGVtcyA9IGF3YWl0IFByb21pc2UucmVzb2x2ZShpdGVtcylcbiAgbGV0IHBhbmVsOiBQYW5lbDxTZWxlY3RMaXN0VmlldzxUPj4gfCB1bmRlZmluZWRcbiAgbGV0IHJlczogVCB8IHVuZGVmaW5lZFxuICB0cnkge1xuICAgIHJlcyA9IGF3YWl0IG5ldyBQcm9taXNlPFQgfCB1bmRlZmluZWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgICBjb25zdCBzZWxlY3QgPSBuZXcgU2VsZWN0TGlzdFZpZXcoe1xuICAgICAgICBpdGVtczogbXlpdGVtcyxcbiAgICAgICAgaW5mb01lc3NhZ2U6IGhlYWRpbmcsXG4gICAgICAgIGl0ZW1zQ2xhc3NMaXN0OiBbJ2lkZS1oYXNrZWxsJ10sXG4gICAgICAgIGVsZW1lbnRGb3JJdGVtOiBpdGVtRWxlbWVudCB8fCBpdGVtRWxlbWVudERlZmF1bHQsXG4gICAgICAgIGZpbHRlcktleUZvckl0ZW06IGZpbHRlcktleUZuLFxuICAgICAgICBkaWRDYW5jZWxTZWxlY3Rpb246ICgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgfSxcbiAgICAgICAgZGlkQ29uZmlybVNlbGVjdGlvbjogKGl0ZW06IFQpID0+IHtcbiAgICAgICAgICByZXNvbHZlKGl0ZW0pXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgc2VsZWN0LmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaWRlLWhhc2tlbGwnKVxuICAgICAgcGFuZWwgPSBhdG9tLndvcmtzcGFjZS5hZGRNb2RhbFBhbmVsKHtcbiAgICAgICAgaXRlbTogc2VsZWN0LFxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgfSlcbiAgICAgIHNlbGVjdC5mb2N1cygpXG4gICAgfSlcbiAgfSBmaW5hbGx5IHtcbiAgICBwYW5lbCAmJiBwYW5lbC5kZXN0cm95KClcbiAgfVxuICByZXR1cm4gcmVzXG59XG4iXX0=