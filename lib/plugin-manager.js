"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const results_db_1 = require("./results-db");
const config_params_1 = require("./config-params");
const editor_control_1 = require("./editor-control");
const linter_support_1 = require("./linter-support");
const tooltip_registry_1 = require("./tooltip-registry");
const check_results_provider_1 = require("./check-results-provider");
const status_bar_1 = require("./status-bar");
const prettify_1 = require("./prettify");
const editor_mark_control_1 = require("./editor-mark-control");
class PluginManager {
    constructor(state, outputPanel) {
        this.outputPanel = outputPanel;
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.controllers = new Map();
        this.disposables.add(this.emitter);
        this.resultsDB = new results_db_1.ResultsDB();
        this.outputPanel.connectResults(this.resultsDB);
        this.tooltipRegistry = new tooltip_registry_1.TooltipRegistry(this);
        this.configParamManager = new config_params_1.ConfigParamManager(this.outputPanel, state.configParams);
        this.disposables.add(this.addEditorController(editor_control_1.EditorControl), this.addEditorController(prettify_1.PrettifyEditorController), this.addEditorController(editor_mark_control_1.EditorMarkControl));
        if (atom.config.get('ide-haskell.messageDisplayFrontend') === 'builtin') {
            this.checkResultsProvider = new check_results_provider_1.CheckResultsProvider(this);
        }
        this.subscribeEditorController();
    }
    deactivate() {
        this.resultsDB.destroy();
        this.disposables.dispose();
        this.checkResultsProvider && this.checkResultsProvider.destroy();
        this.outputPanel.reallyDestroy();
        this.configParamManager.destroy();
        this.removeStatusBar();
        if (this.linterSupport) {
            this.linterSupport.destroy();
            this.linterSupport = undefined;
        }
    }
    serialize() {
        return {
            configParams: this.configParamManager.serialize(),
        };
    }
    onWillSaveBuffer(callback) {
        return this.emitter.on('will-save-buffer', callback);
    }
    onDidSaveBuffer(callback) {
        return this.emitter.on('did-save-buffer', callback);
    }
    onDidStopChanging(callback) {
        return this.emitter.on('did-stop-changing', callback);
    }
    willSaveBuffer(buffer) {
        return this.emitter.emit('will-save-buffer', buffer);
    }
    didSaveBuffer(buffer) {
        return this.emitter.emit('did-save-buffer', buffer);
    }
    didStopChanging(buffer) {
        return this.emitter.emit('did-stop-changing', buffer);
    }
    togglePanel() {
        atom.workspace.toggle(this.outputPanel);
    }
    controller(editor) {
        const ecmap = this.controllers.get(editor_control_1.EditorControl);
        const rec = ecmap && ecmap.get(editor);
        return rec && rec.controller;
    }
    controllerType(factory, editor) {
        const ecmap = this.controllers.get(factory);
        const rec = ecmap && ecmap.get(editor);
        return rec && rec.controller;
    }
    setLinter(linter) {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'linter') {
            return;
        }
        this.linterSupport = new linter_support_1.LinterSupport(linter, this.resultsDB);
    }
    nextError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputPanel.showNextError();
    }
    prevError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputPanel.showPrevError();
    }
    backendStatus(pluginName, st) {
        if (this.outputPanel) {
            this.outputPanel.backendStatus(pluginName, st);
        }
        if (this.statusBarView) {
            this.statusBarView.backendStatus(pluginName, st);
        }
    }
    addEditorController(factory) {
        if (this.controllers.has(factory)) {
            throw new Error(`Duplicate controller factory ${factory.toString()}`);
        }
        const map = new WeakMap();
        this.controllers.set(factory, map);
        return new atom_1.Disposable(() => {
            this.controllers.delete(factory);
            for (const te of atom.workspace.getTextEditors()) {
                const rec = map.get(te);
                rec && rec.disposable.dispose();
            }
        });
    }
    setStatusBar(sb) {
        this.statusBarView = new status_bar_1.StatusBarView(this.outputPanel);
        this.statusBarTile = sb.addRightTile({
            item: this.statusBarView.element,
            priority: 100,
        });
    }
    removeStatusBar() {
        if (this.statusBarTile) {
            this.statusBarTile.destroy();
            this.statusBarTile = undefined;
        }
        if (this.statusBarView) {
            this.statusBarView.destroy();
            this.statusBarView = undefined;
        }
    }
    controllerOnGrammar(editor, grammar) {
        for (const [factory, map] of this.controllers.entries()) {
            const rec = map.get(editor);
            if (!rec && factory.supportsGrammar(grammar.scopeName)) {
                const controller = new factory(editor, this);
                const disposable = new atom_1.CompositeDisposable();
                disposable.add(new atom_1.Disposable(() => {
                    map.delete(editor);
                    controller.destroy();
                }), editor.onDidDestroy(() => disposable.dispose()));
                map.set(editor, { controller, disposable });
            }
            else if (rec && !factory.supportsGrammar(grammar.scopeName)) {
                rec.disposable.dispose();
            }
        }
    }
    subscribeEditorController() {
        this.disposables.add(atom.workspace.observeTextEditors((editor) => {
            const editorDisp = new atom_1.CompositeDisposable();
            editorDisp.add(editor.onDidChangeGrammar((grammar) => {
                this.controllerOnGrammar(editor, grammar);
            }), editor.onDidDestroy(() => {
                editorDisp.dispose();
                this.disposables.remove(editorDisp);
            }));
            this.disposables.add(editorDisp);
            this.controllerOnGrammar(editor, editor.getGrammar());
        }));
    }
}
exports.PluginManager = PluginManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGx1Z2luLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBZ0c7QUFDaEcsNkNBQXdDO0FBRXhDLG1EQUEyRTtBQUMzRSxxREFBZ0Q7QUFDaEQscURBQWdEO0FBQ2hELHlEQUFvRDtBQUNwRCxxRUFBK0Q7QUFDL0QsNkNBQTRDO0FBQzVDLHlDQUFxRDtBQUNyRCwrREFBeUQ7QUErQnpEO0lBZUUsWUFBYSxLQUFhLEVBQVMsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFUbkQsZ0JBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7UUFDdkMsWUFBTyxHQUlWLElBQUksY0FBTyxFQUFFLENBQUE7UUFHVixnQkFBVyxHQUFTLElBQUksR0FBRyxFQUFFLENBQUE7UUFFbkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRWxDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxzQkFBUyxFQUFFLENBQUE7UUFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQy9DLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxrQ0FBZSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2hELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLGtDQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBRXRGLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUNsQixJQUFJLENBQUMsbUJBQW1CLENBQUMsOEJBQWEsQ0FBQyxFQUN2QyxJQUFJLENBQUMsbUJBQW1CLENBQUMsbUNBQXdCLENBQUMsRUFDbEQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLHVDQUFpQixDQUFDLENBQzVDLENBQUE7UUFD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RUFBRSxDQUFDLENBQUE7WUFDN0MsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzlELEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUE7WUFDMUIsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBR08seUJBQXlCO1FBQy9CLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDM0MsTUFBTSxVQUFVLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1lBQzVDLFVBQVUsQ0FBQyxHQUFHLENBQ1osTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ3BDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUE7WUFDM0MsQ0FBQyxDQUFDLEVBQ0YsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUU7Z0JBQ3ZCLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtnQkFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDckMsQ0FBQyxDQUFDLENBQ0gsQ0FBQTtZQUNELElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1lBQ2hDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUE7UUFDdkQsQ0FBQyxDQUFDLENBQ0gsQ0FBQTtJQUNILENBQUM7Q0FDRjtBQXRNRCxzQ0FzTUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlLCBFbWl0dGVyLCBUZXh0RWRpdG9yLCBUZXh0QnVmZmVyLCBHcmFtbWFyLCBEaXNwb3NhYmxlIH0gZnJvbSAnYXRvbSdcbmltcG9ydCB7IFJlc3VsdHNEQiB9IGZyb20gJy4vcmVzdWx0cy1kYidcbmltcG9ydCB7IE91dHB1dFBhbmVsLCBJU3RhdGUgYXMgSU91dHB1dFZpZXdTdGF0ZSB9IGZyb20gJy4vb3V0cHV0LXBhbmVsJ1xuaW1wb3J0IHsgQ29uZmlnUGFyYW1NYW5hZ2VyLCBJU3RhdGUgYXMgSVBhcmFtU3RhdGUgfSBmcm9tICcuL2NvbmZpZy1wYXJhbXMnXG5pbXBvcnQgeyBFZGl0b3JDb250cm9sIH0gZnJvbSAnLi9lZGl0b3ItY29udHJvbCdcbmltcG9ydCB7IExpbnRlclN1cHBvcnQgfSBmcm9tICcuL2xpbnRlci1zdXBwb3J0J1xuaW1wb3J0IHsgVG9vbHRpcFJlZ2lzdHJ5IH0gZnJvbSAnLi90b29sdGlwLXJlZ2lzdHJ5J1xuaW1wb3J0IHsgQ2hlY2tSZXN1bHRzUHJvdmlkZXIgfSBmcm9tICcuL2NoZWNrLXJlc3VsdHMtcHJvdmlkZXInXG5pbXBvcnQgeyBTdGF0dXNCYXJWaWV3IH0gZnJvbSAnLi9zdGF0dXMtYmFyJ1xuaW1wb3J0IHsgUHJldHRpZnlFZGl0b3JDb250cm9sbGVyIH0gZnJvbSAnLi9wcmV0dGlmeSdcbmltcG9ydCB7IEVkaXRvck1hcmtDb250cm9sIH0gZnJvbSAnLi9lZGl0b3ItbWFyay1jb250cm9sJ1xuaW1wb3J0ICogYXMgVVBJIGZyb20gJ2F0b20taGFza2VsbC11cGknXG5pbXBvcnQgKiBhcyBMaW50ZXIgZnJvbSAnYXRvbS9saW50ZXInXG5pbXBvcnQgKiBhcyBTdGF0dXNCYXIgZnJvbSAnYXRvbS9zdGF0dXMtYmFyJ1xuXG5leHBvcnQgeyBJUGFyYW1TdGF0ZSwgSU91dHB1dFZpZXdTdGF0ZSB9XG5cbmV4cG9ydCB0eXBlIFRFdmVudFR5cGUgPSAna2V5Ym9hcmQnIHwgJ2NvbnRleHQnIHwgJ21vdXNlJyB8ICdzZWxlY3Rpb24nXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIHtcbiAgY29uZmlnUGFyYW1zOiBJUGFyYW1TdGF0ZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFZGl0b3JDb250cm9sbGVyIHtcbiAgZGVzdHJveSAoKTogdm9pZFxufVxuXG5leHBvcnQgdHlwZSBJRWRpdG9yQ29udHJvbGxlckZhY3RvcnkgPSBJRWRpdG9yQ29udHJvbGxlckZhY3RvcnlUPElFZGl0b3JDb250cm9sbGVyPlxuXG5leHBvcnQgaW50ZXJmYWNlIElFZGl0b3JDb250cm9sbGVyRmFjdG9yeVQ8VD4ge1xuICBuZXcgKGVkaXRvcjogVGV4dEVkaXRvciwgbWFuYWdlcjogUGx1Z2luTWFuYWdlcik6IFRcbiAgc3VwcG9ydHNHcmFtbWFyIChncmFtbWFyOiBzdHJpbmcpOiBib29sZWFuXG59XG5cbmV4cG9ydCB0eXBlIEVDTWFwPFQgZXh0ZW5kcyBJRWRpdG9yQ29udHJvbGxlcj4gPSBXZWFrTWFwPFRleHRFZGl0b3IsIHtjb250cm9sbGVyOiBULCBkaXNwb3NhYmxlOiBEaXNwb3NhYmxlfT5cblxuZXhwb3J0IGludGVyZmFjZSBUTWFwIGV4dGVuZHMgTWFwPElFZGl0b3JDb250cm9sbGVyRmFjdG9yeSwgRUNNYXA8SUVkaXRvckNvbnRyb2xsZXI+PiB7XG4gIGdldDxVIGV4dGVuZHMgSUVkaXRvckNvbnRyb2xsZXIsIFQgZXh0ZW5kcyBJRWRpdG9yQ29udHJvbGxlckZhY3RvcnlUPFU+PiAoa2V5OiBUKTogRUNNYXA8VT5cbiAgc2V0PFUgZXh0ZW5kcyBJRWRpdG9yQ29udHJvbGxlciwgVCBleHRlbmRzIElFZGl0b3JDb250cm9sbGVyRmFjdG9yeVQ8VT4+IChrZXk6IFQsIHZhbDogRUNNYXA8VT4pOiB0aGlzXG59XG5cbmV4cG9ydCBjbGFzcyBQbHVnaW5NYW5hZ2VyIHtcbiAgcHVibGljIHJlc3VsdHNEQjogUmVzdWx0c0RCXG4gIHB1YmxpYyBjb25maWdQYXJhbU1hbmFnZXI6IENvbmZpZ1BhcmFtTWFuYWdlclxuICBwdWJsaWMgdG9vbHRpcFJlZ2lzdHJ5OiBUb29sdGlwUmVnaXN0cnlcbiAgcHJpdmF0ZSBjaGVja1Jlc3VsdHNQcm92aWRlcj86IENoZWNrUmVzdWx0c1Byb3ZpZGVyXG4gIHByaXZhdGUgbGludGVyU3VwcG9ydD86IExpbnRlclN1cHBvcnRcbiAgcHJpdmF0ZSBkaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgcHJpdmF0ZSBlbWl0dGVyOiBFbWl0dGVyPHtcbiAgICAnd2lsbC1zYXZlLWJ1ZmZlcic6IFRleHRCdWZmZXJcbiAgICAnZGlkLXNhdmUtYnVmZmVyJzogVGV4dEJ1ZmZlclxuICAgICdkaWQtc3RvcC1jaGFuZ2luZyc6IFRleHRCdWZmZXJcbiAgfT4gPSBuZXcgRW1pdHRlcigpXG4gIHByaXZhdGUgc3RhdHVzQmFyVGlsZT86IFN0YXR1c0Jhci5UaWxlXG4gIHByaXZhdGUgc3RhdHVzQmFyVmlldz86IFN0YXR1c0JhclZpZXdcbiAgcHJpdmF0ZSBjb250cm9sbGVyczogVE1hcCA9IG5ldyBNYXAoKVxuICBjb25zdHJ1Y3RvciAoc3RhdGU6IElTdGF0ZSwgcHVibGljIG91dHB1dFBhbmVsOiBPdXRwdXRQYW5lbCkge1xuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHRoaXMuZW1pdHRlcilcblxuICAgIHRoaXMucmVzdWx0c0RCID0gbmV3IFJlc3VsdHNEQigpXG4gICAgdGhpcy5vdXRwdXRQYW5lbC5jb25uZWN0UmVzdWx0cyh0aGlzLnJlc3VsdHNEQilcbiAgICB0aGlzLnRvb2x0aXBSZWdpc3RyeSA9IG5ldyBUb29sdGlwUmVnaXN0cnkodGhpcylcbiAgICB0aGlzLmNvbmZpZ1BhcmFtTWFuYWdlciA9IG5ldyBDb25maWdQYXJhbU1hbmFnZXIodGhpcy5vdXRwdXRQYW5lbCwgc3RhdGUuY29uZmlnUGFyYW1zKVxuXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQoXG4gICAgICB0aGlzLmFkZEVkaXRvckNvbnRyb2xsZXIoRWRpdG9yQ29udHJvbCksXG4gICAgICB0aGlzLmFkZEVkaXRvckNvbnRyb2xsZXIoUHJldHRpZnlFZGl0b3JDb250cm9sbGVyKSxcbiAgICAgIHRoaXMuYWRkRWRpdG9yQ29udHJvbGxlcihFZGl0b3JNYXJrQ29udHJvbCksXG4gICAgKVxuICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLm1lc3NhZ2VEaXNwbGF5RnJvbnRlbmQnKSA9PT0gJ2J1aWx0aW4nKSB7XG4gICAgICB0aGlzLmNoZWNrUmVzdWx0c1Byb3ZpZGVyID0gbmV3IENoZWNrUmVzdWx0c1Byb3ZpZGVyKHRoaXMpXG4gICAgfVxuXG4gICAgdGhpcy5zdWJzY3JpYmVFZGl0b3JDb250cm9sbGVyKClcbiAgfVxuXG4gIHB1YmxpYyBkZWFjdGl2YXRlICgpIHtcbiAgICB0aGlzLnJlc3VsdHNEQi5kZXN0cm95KClcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICAgIHRoaXMuY2hlY2tSZXN1bHRzUHJvdmlkZXIgJiYgdGhpcy5jaGVja1Jlc3VsdHNQcm92aWRlci5kZXN0cm95KClcblxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1mbG9hdGluZy1wcm9taXNlc1xuICAgIHRoaXMub3V0cHV0UGFuZWwucmVhbGx5RGVzdHJveSgpXG4gICAgdGhpcy5jb25maWdQYXJhbU1hbmFnZXIuZGVzdHJveSgpXG4gICAgdGhpcy5yZW1vdmVTdGF0dXNCYXIoKVxuICAgIGlmICh0aGlzLmxpbnRlclN1cHBvcnQpIHtcbiAgICAgIHRoaXMubGludGVyU3VwcG9ydC5kZXN0cm95KClcbiAgICAgIHRoaXMubGludGVyU3VwcG9ydCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzZXJpYWxpemUgKCk6IElTdGF0ZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbmZpZ1BhcmFtczogdGhpcy5jb25maWdQYXJhbU1hbmFnZXIuc2VyaWFsaXplKCksXG4gICAgfVxuICB9XG5cbiAgcHVibGljIG9uV2lsbFNhdmVCdWZmZXIgKGNhbGxiYWNrOiBVUEkuVFRleHRCdWZmZXJDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ3dpbGwtc2F2ZS1idWZmZXInLCBjYWxsYmFjaylcbiAgfVxuXG4gIHB1YmxpYyBvbkRpZFNhdmVCdWZmZXIgKGNhbGxiYWNrOiBVUEkuVFRleHRCdWZmZXJDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC1zYXZlLWJ1ZmZlcicsIGNhbGxiYWNrKVxuICB9XG5cbiAgcHVibGljIG9uRGlkU3RvcENoYW5naW5nIChjYWxsYmFjazogVVBJLlRUZXh0QnVmZmVyQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtc3RvcC1jaGFuZ2luZycsIGNhbGxiYWNrKVxuICB9XG5cbiAgcHVibGljIHdpbGxTYXZlQnVmZmVyIChidWZmZXI6IFRleHRCdWZmZXIpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLmVtaXQoJ3dpbGwtc2F2ZS1idWZmZXInLCBidWZmZXIpXG4gIH1cblxuICBwdWJsaWMgZGlkU2F2ZUJ1ZmZlciAoYnVmZmVyOiBUZXh0QnVmZmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtc2F2ZS1idWZmZXInLCBidWZmZXIpXG4gIH1cblxuICBwdWJsaWMgZGlkU3RvcENoYW5naW5nIChidWZmZXI6IFRleHRCdWZmZXIpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLmVtaXQoJ2RpZC1zdG9wLWNoYW5naW5nJywgYnVmZmVyKVxuICB9XG5cbiAgcHVibGljIHRvZ2dsZVBhbmVsICgpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICBhdG9tLndvcmtzcGFjZS50b2dnbGUodGhpcy5vdXRwdXRQYW5lbClcbiAgfVxuXG4gIHB1YmxpYyBjb250cm9sbGVyIChlZGl0b3I6IFRleHRFZGl0b3IpOiBFZGl0b3JDb250cm9sIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBlY21hcCA9IHRoaXMuY29udHJvbGxlcnMuZ2V0PEVkaXRvckNvbnRyb2wsIHR5cGVvZiBFZGl0b3JDb250cm9sPihFZGl0b3JDb250cm9sKVxuICAgIGNvbnN0IHJlYyA9IGVjbWFwICYmIGVjbWFwLmdldChlZGl0b3IpXG4gICAgcmV0dXJuIHJlYyAmJiByZWMuY29udHJvbGxlclxuICB9XG5cbiAgcHVibGljIGNvbnRyb2xsZXJUeXBlPFUgZXh0ZW5kcyBJRWRpdG9yQ29udHJvbGxlciwgVCBleHRlbmRzIElFZGl0b3JDb250cm9sbGVyRmFjdG9yeVQ8VT4+IChcbiAgICBmYWN0b3J5OiBULCBlZGl0b3I6IFRleHRFZGl0b3IsXG4gICk6IFUgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IGVjbWFwID0gdGhpcy5jb250cm9sbGVycy5nZXQ8VSwgVD4oZmFjdG9yeSlcbiAgICBjb25zdCByZWMgPSBlY21hcCAmJiBlY21hcC5nZXQoZWRpdG9yKVxuICAgIHJldHVybiByZWMgJiYgcmVjLmNvbnRyb2xsZXJcbiAgfVxuXG4gIHB1YmxpYyBzZXRMaW50ZXIgKGxpbnRlcjogTGludGVyLkluZGllRGVsZWdhdGUpIHtcbiAgICBpZiAoYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC5tZXNzYWdlRGlzcGxheUZyb250ZW5kJykgIT09ICdsaW50ZXInKSB7IHJldHVybiB9XG4gICAgdGhpcy5saW50ZXJTdXBwb3J0ID0gbmV3IExpbnRlclN1cHBvcnQobGludGVyLCB0aGlzLnJlc3VsdHNEQilcbiAgfVxuXG4gIHB1YmxpYyBuZXh0RXJyb3IgKCkge1xuICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLm1lc3NhZ2VEaXNwbGF5RnJvbnRlbmQnKSAhPT0gJ2J1aWx0aW4nKSB7IHJldHVybiB9XG4gICAgdGhpcy5vdXRwdXRQYW5lbC5zaG93TmV4dEVycm9yKClcbiAgfVxuXG4gIHB1YmxpYyBwcmV2RXJyb3IgKCkge1xuICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLm1lc3NhZ2VEaXNwbGF5RnJvbnRlbmQnKSAhPT0gJ2J1aWx0aW4nKSB7IHJldHVybiB9XG4gICAgdGhpcy5vdXRwdXRQYW5lbC5zaG93UHJldkVycm9yKClcbiAgfVxuXG4gIHB1YmxpYyBiYWNrZW5kU3RhdHVzIChwbHVnaW5OYW1lOiBzdHJpbmcsIHN0OiBVUEkuSVN0YXR1cykge1xuICAgIGlmICh0aGlzLm91dHB1dFBhbmVsKSB7XG4gICAgICB0aGlzLm91dHB1dFBhbmVsLmJhY2tlbmRTdGF0dXMocGx1Z2luTmFtZSwgc3QpXG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXR1c0JhclZpZXcpIHtcbiAgICAgIHRoaXMuc3RhdHVzQmFyVmlldy5iYWNrZW5kU3RhdHVzKHBsdWdpbk5hbWUsIHN0KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhZGRFZGl0b3JDb250cm9sbGVyPFUgZXh0ZW5kcyBJRWRpdG9yQ29udHJvbGxlciwgVCBleHRlbmRzIElFZGl0b3JDb250cm9sbGVyRmFjdG9yeVQ8VT4+IChcbiAgICBmYWN0b3J5OiBULFxuICApOiBEaXNwb3NhYmxlIHtcbiAgICBpZiAodGhpcy5jb250cm9sbGVycy5oYXMoZmFjdG9yeSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRHVwbGljYXRlIGNvbnRyb2xsZXIgZmFjdG9yeSAke2ZhY3RvcnkudG9TdHJpbmcoKX1gKVxuICAgIH1cbiAgICBjb25zdCBtYXA6IEVDTWFwPFU+ID0gbmV3IFdlYWtNYXAoKVxuICAgIHRoaXMuY29udHJvbGxlcnMuc2V0KGZhY3RvcnksIG1hcClcbiAgICByZXR1cm4gbmV3IERpc3Bvc2FibGUoKCkgPT4ge1xuICAgICAgdGhpcy5jb250cm9sbGVycy5kZWxldGUoZmFjdG9yeSlcbiAgICAgIGZvciAoY29uc3QgdGUgb2YgYXRvbS53b3Jrc3BhY2UuZ2V0VGV4dEVkaXRvcnMoKSkge1xuICAgICAgICBjb25zdCByZWMgPSBtYXAuZ2V0KHRlKVxuICAgICAgICByZWMgJiYgcmVjLmRpc3Bvc2FibGUuZGlzcG9zZSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBzZXRTdGF0dXNCYXIgKHNiOiBTdGF0dXNCYXIuU3RhdHVzQmFyKSB7XG4gICAgdGhpcy5zdGF0dXNCYXJWaWV3ID0gbmV3IFN0YXR1c0JhclZpZXcodGhpcy5vdXRwdXRQYW5lbClcbiAgICB0aGlzLnN0YXR1c0JhclRpbGUgPSBzYi5hZGRSaWdodFRpbGUoe1xuICAgICAgaXRlbTogdGhpcy5zdGF0dXNCYXJWaWV3LmVsZW1lbnQsXG4gICAgICBwcmlvcml0eTogMTAwLFxuICAgIH0pXG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlU3RhdHVzQmFyICgpIHtcbiAgICBpZiAodGhpcy5zdGF0dXNCYXJUaWxlKSB7XG4gICAgICB0aGlzLnN0YXR1c0JhclRpbGUuZGVzdHJveSgpXG4gICAgICB0aGlzLnN0YXR1c0JhclRpbGUgPSB1bmRlZmluZWRcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdHVzQmFyVmlldykge1xuICAgICAgdGhpcy5zdGF0dXNCYXJWaWV3LmRlc3Ryb3koKVxuICAgICAgdGhpcy5zdGF0dXNCYXJWaWV3ID0gdW5kZWZpbmVkXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjb250cm9sbGVyT25HcmFtbWFyIChlZGl0b3I6IFRleHRFZGl0b3IsIGdyYW1tYXI6IEdyYW1tYXIpIHtcbiAgICBmb3IgKGNvbnN0IFtmYWN0b3J5LCBtYXBdIG9mIHRoaXMuY29udHJvbGxlcnMuZW50cmllcygpKSB7XG4gICAgICBjb25zdCByZWMgPSBtYXAuZ2V0KGVkaXRvcilcbiAgICAgIGlmICghcmVjICYmIGZhY3Rvcnkuc3VwcG9ydHNHcmFtbWFyKGdyYW1tYXIuc2NvcGVOYW1lKSkge1xuICAgICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IGZhY3RvcnkoZWRpdG9yLCB0aGlzKVxuICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICAgICAgICBkaXNwb3NhYmxlLmFkZChcbiAgICAgICAgICBuZXcgRGlzcG9zYWJsZSgoKSA9PiB7XG4gICAgICAgICAgICBtYXAuZGVsZXRlKGVkaXRvcilcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZGVzdHJveSgpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgZWRpdG9yLm9uRGlkRGVzdHJveSgoKSA9PiBkaXNwb3NhYmxlLmRpc3Bvc2UoKSksXG4gICAgICAgIClcbiAgICAgICAgbWFwLnNldChlZGl0b3IsIHsgY29udHJvbGxlciwgZGlzcG9zYWJsZSB9KVxuICAgICAgfSBlbHNlIGlmIChyZWMgJiYgIWZhY3Rvcnkuc3VwcG9ydHNHcmFtbWFyKGdyYW1tYXIuc2NvcGVOYW1lKSkge1xuICAgICAgICByZWMuZGlzcG9zYWJsZS5kaXNwb3NlKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBPYnNlcnZlIHRleHQgZWRpdG9ycyB0byBhdHRhY2ggY29udHJvbGxlclxuICBwcml2YXRlIHN1YnNjcmliZUVkaXRvckNvbnRyb2xsZXIgKCkge1xuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKFxuICAgICAgYXRvbS53b3Jrc3BhY2Uub2JzZXJ2ZVRleHRFZGl0b3JzKChlZGl0b3IpID0+IHtcbiAgICAgICAgY29uc3QgZWRpdG9yRGlzcCA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgICAgICAgZWRpdG9yRGlzcC5hZGQoXG4gICAgICAgICAgZWRpdG9yLm9uRGlkQ2hhbmdlR3JhbW1hcigoZ3JhbW1hcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyT25HcmFtbWFyKGVkaXRvciwgZ3JhbW1hcilcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBlZGl0b3Iub25EaWREZXN0cm95KCgpID0+IHtcbiAgICAgICAgICAgIGVkaXRvckRpc3AuZGlzcG9zZSgpXG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2FibGVzLnJlbW92ZShlZGl0b3JEaXNwKVxuICAgICAgICAgIH0pLFxuICAgICAgICApXG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKGVkaXRvckRpc3ApXG4gICAgICAgIHRoaXMuY29udHJvbGxlck9uR3JhbW1hcihlZGl0b3IsIGVkaXRvci5nZXRHcmFtbWFyKCkpXG4gICAgICB9KSxcbiAgICApXG4gIH1cbn1cbiJdfQ==