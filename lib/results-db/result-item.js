"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const atom_1 = require("atom");
const utils_1 = require("../utils");
class ResultItem {
    constructor(providerId, { uri, message, severity, position, context }) {
        this.providerId = providerId;
        this.uri = uri;
        this.message = utils_1.MessageObject.fromObject(message);
        this.severity = severity;
        this.position = position && atom_1.Point.fromObject(position);
        this.context = context;
        this._isValid = true;
    }
    isValid() {
        return this._isValid;
    }
    setValid(isValid) {
        this._isValid = isValid;
    }
    hash() {
        if (this._hash) {
            return this._hash;
        }
        const h = crypto_1.createHash('sha1');
        h.update(JSON.stringify({
            uri: this.uri,
            position: this.position && this.position.serialize(),
            message: this.message.raw(),
            severity: this.severity,
            context: this.context,
        }));
        this._hash = h.digest('base64');
        return this._hash;
    }
}
exports.ResultItem = ResultItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdWx0LWl0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9yZXN1bHQtaXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQywrQkFBNEI7QUFDNUIsb0NBQXdDO0FBR3hDO0lBUUUsWUFDa0IsVUFBa0IsRUFDbEMsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFtQjtRQUQ5QyxlQUFVLEdBQVYsVUFBVSxDQUFRO1FBR2xDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBO1FBQ2QsSUFBSSxDQUFDLE9BQU8sR0FBRyxxQkFBYSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNoRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtRQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsSUFBSSxZQUFLLENBQUMsVUFBVSxDQUFDLFFBQWUsQ0FBQyxDQUFBO1FBQzdELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFBO0lBQ3RCLENBQUM7SUFFTSxPQUFPO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUE7SUFDdEIsQ0FBQztJQUVNLFFBQVEsQ0FBQyxPQUFnQjtRQUM5QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQTtJQUN6QixDQUFDO0lBRU0sSUFBSTtRQUNULEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7UUFDbkIsQ0FBQztRQUNELE1BQU0sQ0FBQyxHQUFHLG1CQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDNUIsQ0FBQyxDQUFDLE1BQU0sQ0FDTixJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2IsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUU7WUFDcEQsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFO1lBQzNCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87U0FDdEIsQ0FBQyxDQUNILENBQUE7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDbkIsQ0FBQztDQUNGO0FBN0NELGdDQTZDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tICdjcnlwdG8nXG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBNZXNzYWdlT2JqZWN0IH0gZnJvbSAnLi4vdXRpbHMnXG5pbXBvcnQgKiBhcyBVUEkgZnJvbSAnYXRvbS1oYXNrZWxsLXVwaSdcblxuZXhwb3J0IGNsYXNzIFJlc3VsdEl0ZW0ge1xuICBwdWJsaWMgcmVhZG9ubHkgdXJpPzogc3RyaW5nXG4gIHB1YmxpYyByZWFkb25seSBwb3NpdGlvbj86IFBvaW50XG4gIHB1YmxpYyByZWFkb25seSBtZXNzYWdlOiBNZXNzYWdlT2JqZWN0XG4gIHB1YmxpYyByZWFkb25seSBzZXZlcml0eTogVVBJLlRTZXZlcml0eVxuICBwdWJsaWMgcmVhZG9ubHkgY29udGV4dD86IHN0cmluZ1xuICBwcml2YXRlIF9pc1ZhbGlkOiBib29sZWFuXG4gIHByaXZhdGUgX2hhc2g/OiBzdHJpbmdcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IHByb3ZpZGVySWQ6IG51bWJlcixcbiAgICB7IHVyaSwgbWVzc2FnZSwgc2V2ZXJpdHksIHBvc2l0aW9uLCBjb250ZXh0IH06IFVQSS5JUmVzdWx0SXRlbSxcbiAgKSB7XG4gICAgdGhpcy51cmkgPSB1cmlcbiAgICB0aGlzLm1lc3NhZ2UgPSBNZXNzYWdlT2JqZWN0LmZyb21PYmplY3QobWVzc2FnZSlcbiAgICB0aGlzLnNldmVyaXR5ID0gc2V2ZXJpdHlcbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb24gJiYgUG9pbnQuZnJvbU9iamVjdChwb3NpdGlvbiBhcyBhbnkpIC8vIFRPRE86IGZpeCB0aGlzIGFzIHNvb24gYXMgbmV3IHR5cGluZ3MgYXZhaWxhYmxlXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dFxuICAgIHRoaXMuX2lzVmFsaWQgPSB0cnVlXG4gIH1cblxuICBwdWJsaWMgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNWYWxpZFxuICB9XG5cbiAgcHVibGljIHNldFZhbGlkKGlzVmFsaWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9pc1ZhbGlkID0gaXNWYWxpZFxuICB9XG5cbiAgcHVibGljIGhhc2goKSB7XG4gICAgaWYgKHRoaXMuX2hhc2gpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oYXNoXG4gICAgfVxuICAgIGNvbnN0IGggPSBjcmVhdGVIYXNoKCdzaGExJylcbiAgICBoLnVwZGF0ZShcbiAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdXJpOiB0aGlzLnVyaSxcbiAgICAgICAgcG9zaXRpb246IHRoaXMucG9zaXRpb24gJiYgdGhpcy5wb3NpdGlvbi5zZXJpYWxpemUoKSxcbiAgICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLnJhdygpLFxuICAgICAgICBzZXZlcml0eTogdGhpcy5zZXZlcml0eSxcbiAgICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0LFxuICAgICAgfSksXG4gICAgKVxuICAgIHRoaXMuX2hhc2ggPSBoLmRpZ2VzdCgnYmFzZTY0JylcbiAgICByZXR1cm4gdGhpcy5faGFzaFxuICB9XG59XG4iXX0=