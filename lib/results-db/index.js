"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const result_item_1 = require("./result-item");
exports.ResultItem = result_item_1.ResultItem;
const atom_1 = require("atom");
const provider_1 = require("./provider");
class ResultsDB {
    constructor() {
        this.currentId = 0;
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.messages = new Map();
    }
    destroy() {
        this.disposables.dispose();
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    didUpdate(providerId, msgs) {
        const uris = msgs.map((v) => v.uri).filter((v) => v);
        for (const [k, v] of Array.from(this.messages)) {
            if (v.providerId === providerId || v.uri && uris.includes(v.uri)) {
                this.messages.delete(k);
            }
        }
        for (const msg of msgs) {
            this.messages.set(msg.hash(), msg);
        }
        const severities = msgs.map((v) => v.severity);
        this.emitter.emit('did-update', severities);
    }
    registerProvider() {
        const p = new provider_1.Provider(this, ++this.currentId);
        this.disposables.add(p);
        return p;
    }
    results() {
        return this.messages.values();
    }
    *filter(f) {
        for (const v of this.results()) {
            if (f(v)) {
                yield v;
            }
        }
    }
    isEmpty() {
        return this.messages.size === 0;
    }
}
exports.ResultsDB = ResultsDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUF3QztBQUlOLHFCQUoxQix3QkFBVSxDQUkwQjtBQUg1QywrQkFBaUQ7QUFDakQseUNBQTZEO0FBTTdEO0lBS0U7UUFDRSxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQTtRQUNsQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtRQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksY0FBTyxFQUFFLENBQUE7UUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2xDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtJQUMzQixDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDNUIsQ0FBQztJQUVNLFdBQVcsQ0FBRSxRQUF5QjtRQUMzQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFFTSxTQUFTLENBQUUsVUFBa0IsRUFBRSxJQUFrQjtRQUN0RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFhLENBQUE7UUFDaEUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsS0FBSyxVQUFVLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pFLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3pCLENBQUM7UUFDSCxDQUFDO1FBQ0QsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDcEMsQ0FBQztRQUNELE1BQU0sVUFBVSxHQUFvQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUMvRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFDN0MsQ0FBQztJQUVNLGdCQUFnQjtRQUNyQixNQUFNLENBQUMsR0FBRyxJQUFJLG1CQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQzlDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3ZCLE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFDVixDQUFDO0lBRU0sT0FBTztRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQy9CLENBQUM7SUFFRCxDQUFTLE1BQU0sQ0FBRSxDQUFnQztRQUMvQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQy9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsTUFBTSxDQUFDLENBQUE7WUFBQyxDQUFDO1FBQ3ZCLENBQUM7SUFDSCxDQUFDO0lBRU0sT0FBTztRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUE7SUFDakMsQ0FBQztDQUNGO0FBdERELDhCQXNEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UmVzdWx0SXRlbX0gZnJvbSAnLi9yZXN1bHQtaXRlbSdcbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZSwgRW1pdHRlcn0gZnJvbSAnYXRvbSdcbmltcG9ydCB7UHJvdmlkZXIsIFRNZXNzYWdlUHJvdmlkZXJGdW5jdGlvbn0gZnJvbSAnLi9wcm92aWRlcidcblxuZXhwb3J0IHtUTWVzc2FnZVByb3ZpZGVyRnVuY3Rpb24sIFJlc3VsdEl0ZW19XG5cbmV4cG9ydCB0eXBlIFRVcGRhdGVDYWxsYmFjayA9IChzZXZlcml0aWVzOiBVUEkuVFNldmVyaXR5W10pID0+IHZvaWRcblxuZXhwb3J0IGNsYXNzIFJlc3VsdHNEQiB7XG4gIHByaXZhdGUgY3VycmVudElkOiBudW1iZXJcbiAgcHJpdmF0ZSBtZXNzYWdlczogTWFwPHN0cmluZywgUmVzdWx0SXRlbT5cbiAgcHJpdmF0ZSBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZVxuICBwcml2YXRlIGVtaXR0ZXI6IEVtaXR0ZXJcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuY3VycmVudElkID0gMFxuICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHRoaXMuZW1pdHRlcilcbiAgICB0aGlzLm1lc3NhZ2VzID0gbmV3IE1hcCgpXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgfVxuXG4gIHB1YmxpYyBvbkRpZFVwZGF0ZSAoY2FsbGJhY2s6IFRVcGRhdGVDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC11cGRhdGUnLCBjYWxsYmFjaylcbiAgfVxuXG4gIHB1YmxpYyBkaWRVcGRhdGUgKHByb3ZpZGVySWQ6IG51bWJlciwgbXNnczogUmVzdWx0SXRlbVtdKSB7XG4gICAgY29uc3QgdXJpcyA9IG1zZ3MubWFwKCh2KSA9PiB2LnVyaSkuZmlsdGVyKCh2KSA9PiB2KSBhcyBzdHJpbmdbXVxuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIEFycmF5LmZyb20odGhpcy5tZXNzYWdlcykpIHtcbiAgICAgIGlmICh2LnByb3ZpZGVySWQgPT09IHByb3ZpZGVySWQgfHwgdi51cmkgJiYgdXJpcy5pbmNsdWRlcyh2LnVyaSkpIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcy5kZWxldGUoaylcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBtc2cgb2YgbXNncykge1xuICAgICAgdGhpcy5tZXNzYWdlcy5zZXQobXNnLmhhc2goKSwgbXNnKVxuICAgIH1cbiAgICBjb25zdCBzZXZlcml0aWVzOiBVUEkuVFNldmVyaXR5W10gPSBtc2dzLm1hcCgodikgPT4gdi5zZXZlcml0eSlcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLXVwZGF0ZScsIHNldmVyaXRpZXMpXG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXJQcm92aWRlciAoKSB7XG4gICAgY29uc3QgcCA9IG5ldyBQcm92aWRlcih0aGlzLCArK3RoaXMuY3VycmVudElkKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHApXG4gICAgcmV0dXJuIHBcbiAgfVxuXG4gIHB1YmxpYyByZXN1bHRzICgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlcy52YWx1ZXMoKVxuICB9XG5cbiAgcHVibGljICogZmlsdGVyIChmOiAoaXRlbTogUmVzdWx0SXRlbSkgPT4gYm9vbGVhbikge1xuICAgIGZvciAoY29uc3QgdiBvZiB0aGlzLnJlc3VsdHMoKSkge1xuICAgICAgaWYgKGYodikpIHsgeWllbGQgdiB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGlzRW1wdHkgKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzLnNpemUgPT09IDBcbiAgfVxufVxuIl19