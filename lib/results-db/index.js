"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const result_item_1 = require("./result-item");
exports.ResultItem = result_item_1.ResultItem;
const atom_1 = require("atom");
const provider_1 = require("./provider");
const utils_1 = require("../utils");
class ResultsDB {
    constructor() {
        this.currentId = 0;
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.messages = new Map();
    }
    destroy() {
        this.disposables.dispose();
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    didUpdate(providerId, msgs) {
        const uris = msgs.map((v) => v.uri).filter(utils_1.notUndefined);
        for (const [k, v] of Array.from(this.messages)) {
            if (v.providerId === providerId || v.uri && uris.includes(v.uri)) {
                this.messages.delete(k);
            }
        }
        for (const msg of msgs) {
            this.messages.set(msg.hash(), msg);
        }
        const severities = msgs.map((v) => v.severity);
        this.emitter.emit('did-update', severities);
    }
    registerProvider() {
        const p = new provider_1.Provider(this, ++this.currentId);
        this.disposables.add(p);
        return p;
    }
    results() {
        return this.messages.values();
    }
    *filter(f) {
        for (const v of this.results()) {
            if (f(v)) {
                yield v;
            }
        }
    }
    isEmpty() {
        return this.messages.size === 0;
    }
}
exports.ResultsDB = ResultsDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUF3QztBQUtOLHFCQUwxQix3QkFBVSxDQUswQjtBQUo1QywrQkFBaUQ7QUFDakQseUNBQTZEO0FBQzdELG9DQUFxQztBQU1yQztJQUtFO1FBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUE7UUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7UUFDNUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGNBQU8sRUFBRSxDQUFBO1FBQzVCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7SUFDM0IsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFFTSxXQUFXLENBQUUsUUFBeUI7UUFDM0MsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNoRCxDQUFDO0lBRU0sU0FBUyxDQUFFLFVBQWtCLEVBQUUsSUFBa0I7UUFDdEQsTUFBTSxJQUFJLEdBQWEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLG9CQUFZLENBQUMsQ0FBQTtRQUNsRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxLQUFLLFVBQVUsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDekIsQ0FBQztRQUNILENBQUM7UUFDRCxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUNwQyxDQUFDO1FBQ0QsTUFBTSxVQUFVLEdBQW9CLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQy9ELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUM3QyxDQUFDO0lBRU0sZ0JBQWdCO1FBQ3JCLE1BQU0sQ0FBQyxHQUFHLElBQUksbUJBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDOUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDdkIsTUFBTSxDQUFDLENBQUMsQ0FBQTtJQUNWLENBQUM7SUFFTSxPQUFPO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUE7SUFDL0IsQ0FBQztJQUVELENBQVMsTUFBTSxDQUFFLENBQWdDO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDL0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFBQyxNQUFNLENBQUMsQ0FBQTtZQUFDLENBQUM7UUFDdkIsQ0FBQztJQUNILENBQUM7SUFFTSxPQUFPO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQTtJQUNqQyxDQUFDO0NBQ0Y7QUF0REQsOEJBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZXN1bHRJdGVtfSBmcm9tICcuL3Jlc3VsdC1pdGVtJ1xuaW1wb3J0IHtDb21wb3NpdGVEaXNwb3NhYmxlLCBFbWl0dGVyfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHtQcm92aWRlciwgVE1lc3NhZ2VQcm92aWRlckZ1bmN0aW9ufSBmcm9tICcuL3Byb3ZpZGVyJ1xuaW1wb3J0IHtub3RVbmRlZmluZWR9IGZyb20gJy4uL3V0aWxzJ1xuXG5leHBvcnQge1RNZXNzYWdlUHJvdmlkZXJGdW5jdGlvbiwgUmVzdWx0SXRlbX1cblxuZXhwb3J0IHR5cGUgVFVwZGF0ZUNhbGxiYWNrID0gKHNldmVyaXRpZXM6IFVQSS5UU2V2ZXJpdHlbXSkgPT4gdm9pZFxuXG5leHBvcnQgY2xhc3MgUmVzdWx0c0RCIHtcbiAgcHJpdmF0ZSBjdXJyZW50SWQ6IG51bWJlclxuICBwcml2YXRlIG1lc3NhZ2VzOiBNYXA8c3RyaW5nLCBSZXN1bHRJdGVtPlxuICBwcml2YXRlIGRpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlXG4gIHByaXZhdGUgZW1pdHRlcjogRW1pdHRlclxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5jdXJyZW50SWQgPSAwXG4gICAgdGhpcy5kaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQodGhpcy5lbWl0dGVyKVxuICAgIHRoaXMubWVzc2FnZXMgPSBuZXcgTWFwKClcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95ICgpIHtcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICB9XG5cbiAgcHVibGljIG9uRGlkVXBkYXRlIChjYWxsYmFjazogVFVwZGF0ZUNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbignZGlkLXVwZGF0ZScsIGNhbGxiYWNrKVxuICB9XG5cbiAgcHVibGljIGRpZFVwZGF0ZSAocHJvdmlkZXJJZDogbnVtYmVyLCBtc2dzOiBSZXN1bHRJdGVtW10pIHtcbiAgICBjb25zdCB1cmlzOiBzdHJpbmdbXSA9IG1zZ3MubWFwKCh2KSA9PiB2LnVyaSkuZmlsdGVyKG5vdFVuZGVmaW5lZClcbiAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBBcnJheS5mcm9tKHRoaXMubWVzc2FnZXMpKSB7XG4gICAgICBpZiAodi5wcm92aWRlcklkID09PSBwcm92aWRlcklkIHx8IHYudXJpICYmIHVyaXMuaW5jbHVkZXModi51cmkpKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZXMuZGVsZXRlKGspXG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgbXNnIG9mIG1zZ3MpIHtcbiAgICAgIHRoaXMubWVzc2FnZXMuc2V0KG1zZy5oYXNoKCksIG1zZylcbiAgICB9XG4gICAgY29uc3Qgc2V2ZXJpdGllczogVVBJLlRTZXZlcml0eVtdID0gbXNncy5tYXAoKHYpID0+IHYuc2V2ZXJpdHkpXG4gICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2RpZC11cGRhdGUnLCBzZXZlcml0aWVzKVxuICB9XG5cbiAgcHVibGljIHJlZ2lzdGVyUHJvdmlkZXIgKCkge1xuICAgIGNvbnN0IHAgPSBuZXcgUHJvdmlkZXIodGhpcywgKyt0aGlzLmN1cnJlbnRJZClcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChwKVxuICAgIHJldHVybiBwXG4gIH1cblxuICBwdWJsaWMgcmVzdWx0cyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZXMudmFsdWVzKClcbiAgfVxuXG4gIHB1YmxpYyAqIGZpbHRlciAoZjogKGl0ZW06IFJlc3VsdEl0ZW0pID0+IGJvb2xlYW4pIHtcbiAgICBmb3IgKGNvbnN0IHYgb2YgdGhpcy5yZXN1bHRzKCkpIHtcbiAgICAgIGlmIChmKHYpKSB7IHlpZWxkIHYgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBpc0VtcHR5ICgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlcy5zaXplID09PSAwXG4gIH1cbn1cbiJdfQ==