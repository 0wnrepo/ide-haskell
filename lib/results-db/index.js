"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const result_item_1 = require("./result-item");
exports.ResultItem = result_item_1.ResultItem;
const atom_1 = require("atom");
const provider_1 = require("./provider");
const utils_1 = require("../utils");
class ResultsDB {
    constructor() {
        this.currentId = 0;
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.messages = new Map();
    }
    destroy() {
        this.disposables.dispose();
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    didUpdate(providerId, msgs) {
        const uris = msgs.map((v) => v.uri).filter(utils_1.notUndefined);
        for (const [k, v] of Array.from(this.messages)) {
            if (v.providerId === providerId || v.uri && uris.includes(v.uri)) {
                this.messages.delete(k);
            }
        }
        for (const msg of msgs) {
            this.messages.set(msg.hash(), msg);
        }
        const severities = new Set(msgs.map((v) => v.severity));
        this.emitter.emit('did-update', Array.from(severities));
    }
    registerProvider() {
        const p = new provider_1.Provider(this, ++this.currentId);
        this.disposables.add(p);
        return p;
    }
    results() {
        return this.messages.values();
    }
    *filter(f) {
        for (const v of this.results()) {
            if (f(v)) {
                yield v;
            }
        }
    }
    isEmpty(severities) {
        return !Array.from(this.messages.values()).some(({ severity }) => severities.includes(severity));
    }
}
exports.ResultsDB = ResultsDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUF3QztBQUtOLHFCQUwxQix3QkFBVSxDQUswQjtBQUo1QywrQkFBMkQ7QUFDM0QseUNBQTZEO0FBQzdELG9DQUFxQztBQU1yQztJQU9FO1FBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUE7UUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7UUFDNUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGNBQU8sRUFBRSxDQUFBO1FBQzVCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7SUFDM0IsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFFTSxXQUFXLENBQUUsUUFBeUI7UUFDM0MsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNoRCxDQUFDO0lBRU0sU0FBUyxDQUFFLFVBQWtCLEVBQUUsSUFBa0I7UUFDdEQsTUFBTSxJQUFJLEdBQWEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLG9CQUFZLENBQUMsQ0FBQTtRQUNsRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxLQUFLLFVBQVUsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDekIsQ0FBQztRQUNILENBQUM7UUFDRCxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUNwQyxDQUFDO1FBQ0QsTUFBTSxVQUFVLEdBQXVCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7UUFDM0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtJQUN6RCxDQUFDO0lBRU0sZ0JBQWdCO1FBQ3JCLE1BQU0sQ0FBQyxHQUFHLElBQUksbUJBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDOUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDdkIsTUFBTSxDQUFDLENBQUMsQ0FBQTtJQUNWLENBQUM7SUFFTSxPQUFPO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUE7SUFDL0IsQ0FBQztJQUVELENBQVMsTUFBTSxDQUFFLENBQWdDO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDL0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFBQyxNQUFNLENBQUMsQ0FBQTtZQUFDLENBQUM7UUFDdkIsQ0FBQztJQUNILENBQUM7SUFFTSxPQUFPLENBQUUsVUFBMkI7UUFDekMsTUFBTSxDQUFDLENBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxRQUFRLEVBQUMsS0FBSyxVQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFDakcsQ0FBQztDQUNGO0FBeERELDhCQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UmVzdWx0SXRlbX0gZnJvbSAnLi9yZXN1bHQtaXRlbSdcbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZSwgVEVtaXR0ZXIsIEVtaXR0ZXJ9IGZyb20gJ2F0b20nXG5pbXBvcnQge1Byb3ZpZGVyLCBUTWVzc2FnZVByb3ZpZGVyRnVuY3Rpb259IGZyb20gJy4vcHJvdmlkZXInXG5pbXBvcnQge25vdFVuZGVmaW5lZH0gZnJvbSAnLi4vdXRpbHMnXG5cbmV4cG9ydCB7VE1lc3NhZ2VQcm92aWRlckZ1bmN0aW9uLCBSZXN1bHRJdGVtfVxuXG5leHBvcnQgdHlwZSBUVXBkYXRlQ2FsbGJhY2sgPSAoc2V2ZXJpdGllczogVVBJLlRTZXZlcml0eVtdKSA9PiB2b2lkXG5cbmV4cG9ydCBjbGFzcyBSZXN1bHRzREIge1xuICBwcml2YXRlIGN1cnJlbnRJZDogbnVtYmVyXG4gIHByaXZhdGUgbWVzc2FnZXM6IE1hcDxzdHJpbmcsIFJlc3VsdEl0ZW0+XG4gIHByaXZhdGUgZGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGVcbiAgcHJpdmF0ZSBlbWl0dGVyOiBURW1pdHRlcjx7XG4gICAgJ2RpZC11cGRhdGUnOiBVUEkuVFNldmVyaXR5W11cbiAgfT5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuY3VycmVudElkID0gMFxuICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHRoaXMuZW1pdHRlcilcbiAgICB0aGlzLm1lc3NhZ2VzID0gbmV3IE1hcCgpXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgfVxuXG4gIHB1YmxpYyBvbkRpZFVwZGF0ZSAoY2FsbGJhY2s6IFRVcGRhdGVDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC11cGRhdGUnLCBjYWxsYmFjaylcbiAgfVxuXG4gIHB1YmxpYyBkaWRVcGRhdGUgKHByb3ZpZGVySWQ6IG51bWJlciwgbXNnczogUmVzdWx0SXRlbVtdKSB7XG4gICAgY29uc3QgdXJpczogc3RyaW5nW10gPSBtc2dzLm1hcCgodikgPT4gdi51cmkpLmZpbHRlcihub3RVbmRlZmluZWQpXG4gICAgZm9yIChjb25zdCBbaywgdl0gb2YgQXJyYXkuZnJvbSh0aGlzLm1lc3NhZ2VzKSkge1xuICAgICAgaWYgKHYucHJvdmlkZXJJZCA9PT0gcHJvdmlkZXJJZCB8fCB2LnVyaSAmJiB1cmlzLmluY2x1ZGVzKHYudXJpKSkge1xuICAgICAgICB0aGlzLm1lc3NhZ2VzLmRlbGV0ZShrKVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IG1zZyBvZiBtc2dzKSB7XG4gICAgICB0aGlzLm1lc3NhZ2VzLnNldChtc2cuaGFzaCgpLCBtc2cpXG4gICAgfVxuICAgIGNvbnN0IHNldmVyaXRpZXM6IFNldDxVUEkuVFNldmVyaXR5PiA9IG5ldyBTZXQobXNncy5tYXAoKHYpID0+IHYuc2V2ZXJpdHkpKVxuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtdXBkYXRlJywgQXJyYXkuZnJvbShzZXZlcml0aWVzKSlcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlclByb3ZpZGVyICgpIHtcbiAgICBjb25zdCBwID0gbmV3IFByb3ZpZGVyKHRoaXMsICsrdGhpcy5jdXJyZW50SWQpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQocClcbiAgICByZXR1cm4gcFxuICB9XG5cbiAgcHVibGljIHJlc3VsdHMgKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzLnZhbHVlcygpXG4gIH1cblxuICBwdWJsaWMgKiBmaWx0ZXIgKGY6IChpdGVtOiBSZXN1bHRJdGVtKSA9PiBib29sZWFuKSB7XG4gICAgZm9yIChjb25zdCB2IG9mIHRoaXMucmVzdWx0cygpKSB7XG4gICAgICBpZiAoZih2KSkgeyB5aWVsZCB2IH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaXNFbXB0eSAoc2V2ZXJpdGllczogVVBJLlRTZXZlcml0eVtdKSB7XG4gICAgcmV0dXJuICEgQXJyYXkuZnJvbSh0aGlzLm1lc3NhZ2VzLnZhbHVlcygpKS5zb21lKCh7c2V2ZXJpdHl9KSA9PiBzZXZlcml0aWVzLmluY2x1ZGVzKHNldmVyaXR5KSlcbiAgfVxufVxuIl19