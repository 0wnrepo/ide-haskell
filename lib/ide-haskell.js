"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_manager_1 = require("./plugin-manager");
const prettify_1 = require("./prettify");
const utils_1 = require("./utils");
const UPI3 = require("./upi-3");
const OutputPanel = require("./output-panel");
const AtomTypes = require("atom");
var CompositeDisposable = AtomTypes.CompositeDisposable;
var Disposable = AtomTypes.Disposable;
let upiProvided = false;
let disposables;
let pluginManager;
let outputPanel;
let menu;
var config_1 = require("./config");
exports.config = config_1.config;
function cleanConfig() { }
function activate(state) {
    cleanConfig();
    atom.views.getView(atom.workspace).classList.add('ide-haskell');
    require('etch').setScheduler(atom.views);
    upiProvided = false;
    if (atom.config.get('ide-haskell.startupMessageIdeBackend')) {
        setTimeout(() => {
            if (!upiProvided) {
                atom.notifications.addWarning(`Ide-Haskell needs backends that provide most of functionality.
            Please refer to README for details`, { dismissable: true });
            }
        }, 5000);
    }
    disposables = new CompositeDisposable();
    pluginManager = new plugin_manager_1.PluginManager(state, outputPanel || new OutputPanel.OutputPanel());
    disposables.add(atom.commands.add('atom-workspace', {
        'ide-haskell:toggle-output': () => { pluginManager && pluginManager.togglePanel(); },
        'ide-haskell:next-error': () => { pluginManager && pluginManager.nextError(); },
        'ide-haskell:prev-error': () => { pluginManager && pluginManager.prevError(); },
    }), atom.commands.add('atom-text-editor.ide-haskell', {
        'ide-haskell:prettify-file': ({ currentTarget }) => {
            prettify_1.prettifyFile(currentTarget.getModel());
        },
    }), atom.commands.add('atom-text-editor.ide-haskell--has-tooltips', {
        'ide-haskell:close-tooltip': ({ currentTarget, abortKeyBinding }) => {
            const controller = pluginManager && pluginManager.controller(currentTarget.getModel());
            if (controller && controller.tooltips.has()) {
                controller.tooltips.hide();
            }
            else if (abortKeyBinding) {
                abortKeyBinding();
            }
        },
    }));
    menu = new CompositeDisposable();
    menu.add(atom.menu.add([{
            label: utils_1.MAIN_MENU_LABEL,
            submenu: [
                { label: 'Prettify', command: 'ide-haskell:prettify-file' },
                { label: 'Toggle Panel', command: 'ide-haskell:toggle-output' },
            ],
        }]));
}
exports.activate = activate;
function deactivate() {
    pluginManager && pluginManager.deactivate();
    disposables && disposables.dispose();
    menu && menu.dispose();
    atom.menu.update();
}
exports.deactivate = deactivate;
function serialize() {
    if (pluginManager) {
        return pluginManager.serialize();
    }
    return undefined;
}
exports.serialize = serialize;
function deserializeOutputPanel(state) {
    outputPanel = new OutputPanel.OutputPanel(state);
    return outputPanel;
}
exports.deserializeOutputPanel = deserializeOutputPanel;
function provideUpi3() {
    upiProvided = true;
    return (options) => {
        if (!pluginManager) {
            throw new Error('IDE-Haskell failed to provide UPI instance: pluginManager is undefined');
        }
        return UPI3.instance(pluginManager, options);
    };
}
exports.provideUpi3 = provideUpi3;
function consumeUpi3(registration) {
    upiProvided = true;
    if (pluginManager) {
        return UPI3.consume(pluginManager, registration);
    }
    return undefined;
}
exports.consumeUpi3 = consumeUpi3;
function consumeLinter(register) {
    if (!(disposables && pluginManager)) {
        return undefined;
    }
    const linter = register({ name: 'IDE-Haskell' });
    disposables.add(linter);
    pluginManager.setLinter(linter);
    return linter;
}
exports.consumeLinter = consumeLinter;
function consumeStatusBar(statusBar) {
    if (!pluginManager) {
        return undefined;
    }
    pluginManager.setStatusBar(statusBar);
    return new Disposable(() => {
        if (pluginManager) {
            pluginManager.removeStatusBar();
        }
    });
}
exports.consumeStatusBar = consumeStatusBar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlLWhhc2tlbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaWRlLWhhc2tlbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxREFBd0Q7QUFDeEQseUNBQXlDO0FBQ3pDLG1DQUF5QztBQUN6QyxnQ0FBK0I7QUFDL0IsOENBQTZDO0FBQzdDLGtDQUFpQztBQUlqQyxJQUFPLG1CQUFtQixHQUFHLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQTtBQUMxRCxJQUFPLFVBQVUsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFBO0FBRXhDLElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQTtBQUN2QixJQUFJLFdBQTRDLENBQUE7QUFDaEQsSUFBSSxhQUF3QyxDQUFBO0FBQzVDLElBQUksV0FBZ0QsQ0FBQTtBQUNwRCxJQUFJLElBQXFDLENBQUE7QUFFekMsbUNBQWlDO0FBQXhCLDBCQUFBLE1BQU0sQ0FBQTtBQUVmLHlCQUFrQyxDQUFDO0FBRW5DLGtCQUF5QixLQUFhO0lBQ3BDLFdBQVcsRUFBRSxDQUFBO0lBRWIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUE7SUFHL0QsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFeEMsV0FBVyxHQUFHLEtBQUssQ0FBQTtJQUVuQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RCxVQUFVLENBQ1IsR0FBRyxFQUFFO1lBQ0gsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO2dCQUNqQixJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FDM0I7K0NBQ21DLEVBQ25DLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxD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QUMsU0FBUyxDQUFBO0lBQUMsQ0FBQztJQUN4QyxhQUFhLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3JDLE1BQU0sQ0FBQyxJQUFJLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDekIsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUNsQixhQUFhLENBQUMsZUFBZSxFQUFFLENBQUE7UUFDakMsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQVJELDRDQVFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGx1Z2luTWFuYWdlciwgSVN0YXRlIH0gZnJvbSAnLi9wbHVnaW4tbWFuYWdlcidcbmltcG9ydCB7IHByZXR0aWZ5RmlsZSB9IGZyb20gJy4vcHJldHRpZnknXG5pbXBvcnQgeyBNQUlOX01FTlVfTEFCRUwgfSBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0ICogYXMgVVBJMyBmcm9tICcuL3VwaS0zJ1xuaW1wb3J0ICogYXMgT3V0cHV0UGFuZWwgZnJvbSAnLi9vdXRwdXQtcGFuZWwnXG5pbXBvcnQgKiBhcyBBdG9tVHlwZXMgZnJvbSAnYXRvbSdcbmltcG9ydCAqIGFzIFVQSSBmcm9tICdhdG9tLWhhc2tlbGwtdXBpJ1xuaW1wb3J0ICogYXMgTGludGVyIGZyb20gJ2F0b20vbGludGVyJ1xuaW1wb3J0ICogYXMgU3RhdHVzQmFyIGZyb20gJ2F0b20vc3RhdHVzLWJhcidcbmltcG9ydCBDb21wb3NpdGVEaXNwb3NhYmxlID0gQXRvbVR5cGVzLkNvbXBvc2l0ZURpc3Bvc2FibGVcbmltcG9ydCBEaXNwb3NhYmxlID0gQXRvbVR5cGVzLkRpc3Bvc2FibGVcblxubGV0IHVwaVByb3ZpZGVkID0gZmFsc2VcbmxldCBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSB8IHVuZGVmaW5lZFxubGV0IHBsdWdpbk1hbmFnZXI6IFBsdWdpbk1hbmFnZXIgfCB1bmRlZmluZWRcbmxldCBvdXRwdXRQYW5lbDogT3V0cHV0UGFuZWwuT3V0cHV0UGFuZWwgfCB1bmRlZmluZWRcbmxldCBtZW51OiBDb21wb3NpdGVEaXNwb3NhYmxlIHwgdW5kZWZpbmVkXG5cbmV4cG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJ1xuXG5mdW5jdGlvbiBjbGVhbkNvbmZpZygpIHsgLypub29wKi8gfVxuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUoc3RhdGU6IElTdGF0ZSkge1xuICBjbGVhbkNvbmZpZygpXG5cbiAgYXRvbS52aWV3cy5nZXRWaWV3KGF0b20ud29ya3NwYWNlKS5jbGFzc0xpc3QuYWRkKCdpZGUtaGFza2VsbCcpXG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVuc2FmZS1hbnlcbiAgcmVxdWlyZSgnZXRjaCcpLnNldFNjaGVkdWxlcihhdG9tLnZpZXdzKVxuXG4gIHVwaVByb3ZpZGVkID0gZmFsc2VcblxuICBpZiAoYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC5zdGFydHVwTWVzc2FnZUlkZUJhY2tlbmQnKSkge1xuICAgIHNldFRpbWVvdXQoXG4gICAgICAoKSA9PiB7XG4gICAgICAgIGlmICghdXBpUHJvdmlkZWQpIHtcbiAgICAgICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkV2FybmluZyhcbiAgICAgICAgICAgIGBJZGUtSGFza2VsbCBuZWVkcyBiYWNrZW5kcyB0aGF0IHByb3ZpZGUgbW9zdCBvZiBmdW5jdGlvbmFsaXR5LlxuICAgICAgICAgICAgUGxlYXNlIHJlZmVyIHRvIFJFQURNRSBmb3IgZGV0YWlsc2AsXG4gICAgICAgICAgICB7IGRpc21pc3NhYmxlOiB0cnVlIH0pXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICA1MDAwLFxuICAgIClcbiAgfVxuXG4gIGRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuXG4gIHBsdWdpbk1hbmFnZXIgPSBuZXcgUGx1Z2luTWFuYWdlcihzdGF0ZSwgb3V0cHV0UGFuZWwgfHwgbmV3IE91dHB1dFBhbmVsLk91dHB1dFBhbmVsKCkpXG5cbiAgLy8gZ2xvYmFsIGNvbW1hbmRzXG4gIGRpc3Bvc2FibGVzLmFkZChcbiAgICBhdG9tLmNvbW1hbmRzLmFkZCgnYXRvbS13b3Jrc3BhY2UnLCB7XG4gICAgICAnaWRlLWhhc2tlbGw6dG9nZ2xlLW91dHB1dCc6ICgpID0+IHsgcGx1Z2luTWFuYWdlciAmJiBwbHVnaW5NYW5hZ2VyLnRvZ2dsZVBhbmVsKCkgfSxcbiAgICAgICdpZGUtaGFza2VsbDpuZXh0LWVycm9yJzogKCkgPT4geyBwbHVnaW5NYW5hZ2VyICYmIHBsdWdpbk1hbmFnZXIubmV4dEVycm9yKCkgfSxcbiAgICAgICdpZGUtaGFza2VsbDpwcmV2LWVycm9yJzogKCkgPT4geyBwbHVnaW5NYW5hZ2VyICYmIHBsdWdpbk1hbmFnZXIucHJldkVycm9yKCkgfSxcbiAgICB9KSxcbiAgICBhdG9tLmNvbW1hbmRzLmFkZCgnYXRvbS10ZXh0LWVkaXRvci5pZGUtaGFza2VsbCcsIHtcbiAgICAgICdpZGUtaGFza2VsbDpwcmV0dGlmeS1maWxlJzogKHsgY3VycmVudFRhcmdldCB9OiBBdG9tVHlwZXMuQ29tbWFuZEV2ZW50KSA9PiB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICBwcmV0dGlmeUZpbGUoY3VycmVudFRhcmdldC5nZXRNb2RlbCgpKVxuICAgICAgfSxcbiAgICB9KSxcbiAgICBhdG9tLmNvbW1hbmRzLmFkZCgnYXRvbS10ZXh0LWVkaXRvci5pZGUtaGFza2VsbC0taGFzLXRvb2x0aXBzJywge1xuICAgICAgJ2lkZS1oYXNrZWxsOmNsb3NlLXRvb2x0aXAnOiAoeyBjdXJyZW50VGFyZ2V0LCBhYm9ydEtleUJpbmRpbmcgfTogQXRvbVR5cGVzLkNvbW1hbmRFdmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjb250cm9sbGVyID0gcGx1Z2luTWFuYWdlciAmJiBwbHVnaW5NYW5hZ2VyLmNvbnRyb2xsZXIoY3VycmVudFRhcmdldC5nZXRNb2RlbCgpKVxuICAgICAgICBpZiAoY29udHJvbGxlciAmJiBjb250cm9sbGVyLnRvb2x0aXBzLmhhcygpKSB7XG4gICAgICAgICAgY29udHJvbGxlci50b29sdGlwcy5oaWRlKClcbiAgICAgICAgfSBlbHNlIGlmIChhYm9ydEtleUJpbmRpbmcpIHtcbiAgICAgICAgICBhYm9ydEtleUJpbmRpbmcoKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pLFxuICApXG5cbiAgbWVudSA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgbWVudS5hZGQoYXRvbS5tZW51LmFkZChbe1xuICAgIGxhYmVsOiBNQUlOX01FTlVfTEFCRUwsXG4gICAgc3VibWVudTogW1xuICAgICAgeyBsYWJlbDogJ1ByZXR0aWZ5JywgY29tbWFuZDogJ2lkZS1oYXNrZWxsOnByZXR0aWZ5LWZpbGUnIH0sXG4gICAgICB7IGxhYmVsOiAnVG9nZ2xlIFBhbmVsJywgY29tbWFuZDogJ2lkZS1oYXNrZWxsOnRvZ2dsZS1vdXRwdXQnIH0sXG4gICAgXSxcbiAgfV0pKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVhY3RpdmF0ZSgpIHtcbiAgcGx1Z2luTWFuYWdlciAmJiBwbHVnaW5NYW5hZ2VyLmRlYWN0aXZhdGUoKVxuXG4gIC8vIGNsZWFyIGNvbW1hbmRzXG4gIGRpc3Bvc2FibGVzICYmIGRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuXG4gIG1lbnUgJiYgbWVudS5kaXNwb3NlKClcbiAgYXRvbS5tZW51LnVwZGF0ZSgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUoKSB7XG4gIGlmIChwbHVnaW5NYW5hZ2VyKSB7XG4gICAgcmV0dXJuIHBsdWdpbk1hbmFnZXIuc2VyaWFsaXplKClcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZU91dHB1dFBhbmVsKHN0YXRlOiBPdXRwdXRQYW5lbC5JU3RhdGUpIHtcbiAgb3V0cHV0UGFuZWwgPSBuZXcgT3V0cHV0UGFuZWwuT3V0cHV0UGFuZWwoc3RhdGUpXG4gIHJldHVybiBvdXRwdXRQYW5lbFxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVVwaTMoKTogVVBJLklVUElSZWdpc3RyYXRpb24ge1xuICB1cGlQcm92aWRlZCA9IHRydWVcbiAgcmV0dXJuIChvcHRpb25zOiBVUEkuSVJlZ2lzdHJhdGlvbk9wdGlvbnMpID0+IHtcbiAgICBpZiAoIXBsdWdpbk1hbmFnZXIpIHsgdGhyb3cgbmV3IEVycm9yKCdJREUtSGFza2VsbCBmYWlsZWQgdG8gcHJvdmlkZSBVUEkgaW5zdGFuY2U6IHBsdWdpbk1hbmFnZXIgaXMgdW5kZWZpbmVkJykgfVxuICAgIHJldHVybiBVUEkzLmluc3RhbmNlKHBsdWdpbk1hbmFnZXIsIG9wdGlvbnMpXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN1bWVVcGkzKHJlZ2lzdHJhdGlvbjogVVBJLklSZWdpc3RyYXRpb25PcHRpb25zKTogRGlzcG9zYWJsZSB8IHVuZGVmaW5lZCB7XG4gIHVwaVByb3ZpZGVkID0gdHJ1ZVxuICBpZiAocGx1Z2luTWFuYWdlcikge1xuICAgIHJldHVybiBVUEkzLmNvbnN1bWUocGx1Z2luTWFuYWdlciwgcmVnaXN0cmF0aW9uKVxuICB9XG4gIHJldHVybiB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN1bWVMaW50ZXIocmVnaXN0ZXI6IChvcHRzOiB7fSkgPT4gTGludGVyLkluZGllRGVsZWdhdGUpOiBEaXNwb3NhYmxlIHwgdW5kZWZpbmVkIHtcbiAgaWYgKCEoZGlzcG9zYWJsZXMgJiYgcGx1Z2luTWFuYWdlcikpIHsgcmV0dXJuIHVuZGVmaW5lZCB9XG4gIGNvbnN0IGxpbnRlciA9IHJlZ2lzdGVyKHsgbmFtZTogJ0lERS1IYXNrZWxsJyB9KVxuICBkaXNwb3NhYmxlcy5hZGQobGludGVyKVxuICBwbHVnaW5NYW5hZ2VyLnNldExpbnRlcihsaW50ZXIpXG4gIHJldHVybiBsaW50ZXJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN1bWVTdGF0dXNCYXIoc3RhdHVzQmFyOiBTdGF0dXNCYXIuU3RhdHVzQmFyKTogRGlzcG9zYWJsZSB8IHVuZGVmaW5lZCB7XG4gIGlmICghcGx1Z2luTWFuYWdlcikgeyByZXR1cm4gdW5kZWZpbmVkIH1cbiAgcGx1Z2luTWFuYWdlci5zZXRTdGF0dXNCYXIoc3RhdHVzQmFyKVxuICByZXR1cm4gbmV3IERpc3Bvc2FibGUoKCkgPT4ge1xuICAgIGlmIChwbHVnaW5NYW5hZ2VyKSB7XG4gICAgICBwbHVnaW5NYW5hZ2VyLnJlbW92ZVN0YXR1c0JhcigpXG4gICAgfVxuICB9KVxufVxuIl19