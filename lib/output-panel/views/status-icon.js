"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const etch = require("etch");
const atom_1 = require("atom");
class StatusIcon {
    constructor(props) {
        this.props = props;
        this.disposables = new atom_1.CompositeDisposable();
        etch.initialize(this);
        this.disposables.add(atom.tooltips.add(this.element, {
            class: 'ide-haskell-status-tooltip',
            title: () => {
                const res = [];
                for (const [plugin, { status, detail },] of this.props.statusMap.entries()) {
                    res.push(`
          <ide-haskell-status-item>
            <ide-haskell-status-icon data-status="${status}">${plugin}</ide-haskell-status-icon>
            <ide-haskell-status-detail>${detail ||
                        ''}</ide-haskell-status-detail>
          </ide-haskell-status-item>
          `);
                }
                return res.join('');
            },
        }));
    }
    render() {
        return (etch.dom("ide-haskell-status-icon", { dataset: { status: this.calcCurrentStatus() } }));
    }
    async update(props) {
        this.props.statusMap = props.statusMap;
        return etch.update(this);
    }
    async destroy() {
        await etch.destroy(this);
        this.props.statusMap.clear();
    }
    calcCurrentStatus() {
        const prio = {
            progress: 5,
            error: 20,
            warning: 10,
            ready: 0,
        };
        const stArr = Array.from(this.props.statusMap.values());
        const [consensus] = stArr.sort((a, b) => prio[b.status] - prio[a.status]);
        return consensus ? consensus.status : 'ready';
    }
}
exports.StatusIcon = StatusIcon;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLWljb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvb3V0cHV0LXBhbmVsL3ZpZXdzL3N0YXR1cy1pY29uLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE0QjtBQUM1QiwrQkFBMEM7QUFTMUM7SUFJRSxZQUFtQixLQUFhO1FBQWIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUM5QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtRQUU1QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRXJCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQzlCLEtBQUssRUFBRSw0QkFBNEI7WUFDbkMsS0FBSyxFQUFFLEdBQUcsRUFBRTtnQkFDVixNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUE7Z0JBQ2QsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUNULE1BQU0sRUFDTixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFDbkIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ3BDLEdBQUcsQ0FBQyxJQUFJLENBQUM7O29EQUUrQixNQUFNLEtBQUssTUFBTTt5Q0FDNUIsTUFBTTt3QkFDakMsRUFBRTs7V0FFTCxDQUFDLENBQUE7Z0JBQ0YsQ0FBQztnQkFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUNyQixDQUFDO1NBQ0YsQ0FBQyxDQUNILENBQUE7SUFDSCxDQUFDO0lBRU0sTUFBTTtRQUNYLE1BQU0sQ0FBQyxDQUVMLHNDQUF5QixPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsR0FBSSxDQUMzRSxDQUFBO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBYTtRQUUvQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFBO1FBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzFCLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTztRQUNsQixNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDOUIsQ0FBQztJQUVPLGlCQUFpQjtRQUN2QixNQUFNLElBQUksR0FBRztZQUNYLFFBQVEsRUFBRSxDQUFDO1lBQ1gsS0FBSyxFQUFFLEVBQUU7WUFDVCxPQUFPLEVBQUUsRUFBRTtZQUNYLEtBQUssRUFBRSxDQUFDO1NBQ1QsQ0FBQTtRQUNELE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtRQUN2RCxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO1FBQ3pFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQTtJQUMvQyxDQUFDO0NBQ0Y7QUE3REQsZ0NBNkRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXRjaCBmcm9tICdldGNoJ1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSB9IGZyb20gJ2F0b20nXG5pbXBvcnQgKiBhcyBVUEkgZnJvbSAnYXRvbS1oYXNrZWxsLXVwaSdcblxuZXhwb3J0IGludGVyZmFjZSBJUHJvcHMgZXh0ZW5kcyBKU1guUHJvcHMge1xuICBzdGF0dXNNYXA6IE1hcDxzdHJpbmcsIFVQSS5JU3RhdHVzPlxufVxuXG50eXBlIEVsZW1lbnRDbGFzcyA9IEpTWC5FbGVtZW50Q2xhc3NcblxuZXhwb3J0IGNsYXNzIFN0YXR1c0ljb24gaW1wbGVtZW50cyBFbGVtZW50Q2xhc3Mge1xuICBwcml2YXRlIGRpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bmluaXRpYWxpemVkXG4gIHByaXZhdGUgZWxlbWVudDogSFRNTEVsZW1lbnRcbiAgY29uc3RydWN0b3IocHVibGljIHByb3BzOiBJUHJvcHMpIHtcbiAgICB0aGlzLmRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuXG4gICAgZXRjaC5pbml0aWFsaXplKHRoaXMpXG5cbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChcbiAgICAgIGF0b20udG9vbHRpcHMuYWRkKHRoaXMuZWxlbWVudCwge1xuICAgICAgICBjbGFzczogJ2lkZS1oYXNrZWxsLXN0YXR1cy10b29sdGlwJyxcbiAgICAgICAgdGl0bGU6ICgpID0+IHtcbiAgICAgICAgICBjb25zdCByZXMgPSBbXVxuICAgICAgICAgIGZvciAoY29uc3QgW1xuICAgICAgICAgICAgcGx1Z2luLFxuICAgICAgICAgICAgeyBzdGF0dXMsIGRldGFpbCB9LFxuICAgICAgICAgIF0gb2YgdGhpcy5wcm9wcy5zdGF0dXNNYXAuZW50cmllcygpKSB7XG4gICAgICAgICAgICByZXMucHVzaChgXG4gICAgICAgICAgPGlkZS1oYXNrZWxsLXN0YXR1cy1pdGVtPlxuICAgICAgICAgICAgPGlkZS1oYXNrZWxsLXN0YXR1cy1pY29uIGRhdGEtc3RhdHVzPVwiJHtzdGF0dXN9XCI+JHtwbHVnaW59PC9pZGUtaGFza2VsbC1zdGF0dXMtaWNvbj5cbiAgICAgICAgICAgIDxpZGUtaGFza2VsbC1zdGF0dXMtZGV0YWlsPiR7ZGV0YWlsIHx8XG4gICAgICAgICAgICAgICcnfTwvaWRlLWhhc2tlbGwtc3RhdHVzLWRldGFpbD5cbiAgICAgICAgICA8L2lkZS1oYXNrZWxsLXN0YXR1cy1pdGVtPlxuICAgICAgICAgIGApXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXMuam9pbignJylcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgIClcbiAgfVxuXG4gIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnNhZmUtYW55XG4gICAgICA8aWRlLWhhc2tlbGwtc3RhdHVzLWljb24gZGF0YXNldD17eyBzdGF0dXM6IHRoaXMuY2FsY0N1cnJlbnRTdGF0dXMoKSB9fSAvPlxuICAgIClcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB1cGRhdGUocHJvcHM6IElQcm9wcykge1xuICAgIC8vIFRPRE86IERpZmYgYWxnb1xuICAgIHRoaXMucHJvcHMuc3RhdHVzTWFwID0gcHJvcHMuc3RhdHVzTWFwXG4gICAgcmV0dXJuIGV0Y2gudXBkYXRlKHRoaXMpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVzdHJveSgpIHtcbiAgICBhd2FpdCBldGNoLmRlc3Ryb3kodGhpcylcbiAgICB0aGlzLnByb3BzLnN0YXR1c01hcC5jbGVhcigpXG4gIH1cblxuICBwcml2YXRlIGNhbGNDdXJyZW50U3RhdHVzKCk6ICdyZWFkeScgfCAnd2FybmluZycgfCAnZXJyb3InIHwgJ3Byb2dyZXNzJyB7XG4gICAgY29uc3QgcHJpbyA9IHtcbiAgICAgIHByb2dyZXNzOiA1LFxuICAgICAgZXJyb3I6IDIwLFxuICAgICAgd2FybmluZzogMTAsXG4gICAgICByZWFkeTogMCxcbiAgICB9XG4gICAgY29uc3Qgc3RBcnIgPSBBcnJheS5mcm9tKHRoaXMucHJvcHMuc3RhdHVzTWFwLnZhbHVlcygpKVxuICAgIGNvbnN0IFtjb25zZW5zdXNdID0gc3RBcnIuc29ydCgoYSwgYikgPT4gcHJpb1tiLnN0YXR1c10gLSBwcmlvW2Euc3RhdHVzXSlcbiAgICByZXR1cm4gY29uc2Vuc3VzID8gY29uc2Vuc3VzLnN0YXR1cyA6ICdyZWFkeSdcbiAgfVxufVxuIl19