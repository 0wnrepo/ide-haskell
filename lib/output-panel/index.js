"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const etch = require("etch");
const atom_1 = require("atom");
const output_panel_buttons_1 = require("./views/output-panel-buttons");
const output_panel_checkbox_1 = require("./views/output-panel-checkbox");
const progress_bar_1 = require("./views/progress-bar");
const output_panel_items_1 = require("./views/output-panel-items");
const status_icon_1 = require("./views/status-icon");
const utils_1 = require("../utils");
const $ = etch.dom;
class OutputPanel {
    constructor(state = { fileFilter: false, activeTab: 'error' }) {
        this.state = state;
        this.elements = new Set();
        this.disposables = new atom_1.CompositeDisposable();
        this.currentResult = 0;
        this.statusMap = new Map();
        this.progress = [];
        this.tabs = new Map();
        this.switchFileFilter = () => {
            this.state.fileFilter = !this.state.fileFilter;
            this.updateItems();
        };
        etch.initialize(this);
        for (const tab of ['error', 'warning', 'lint']) {
            this.createTab(tab, {});
        }
        this.disposables.add(atom.workspace.onDidChangeActivePaneItem(() => {
            if (this.state.fileFilter)
                this.updateItems();
        }));
        setImmediate(() => __awaiter(this, void 0, void 0, function* () {
            yield this.show();
            if (atom.config.get('ide-haskell.autoHideOutput')) {
                this.hide();
            }
        }));
    }
    connectResults(results) {
        if (this.results)
            throw new Error('Results already connected!');
        this.results = results;
        const didUpdate = (severities) => {
            this.currentResult = 0;
            this.updateItems();
            if (atom.config.get('ide-haskell.autoHideOutput') && (!this.results || this.results.isEmpty(severities))) {
                this.hide();
            }
            else if (atom.config.get('ide-haskell.switchTabOnCheck')) {
                this.show();
                this.activateFirstNonEmptyTab(severities);
            }
        };
        this.disposables.add(this.results.onDidUpdate(didUpdate));
        this.update();
    }
    render() {
        if (!this.results) {
            return etch.dom("ide-haskell-panel", null);
        }
        return (etch.dom("ide-haskell-panel", null,
            etch.dom("ide-haskell-panel-heading", null,
                etch.dom(status_icon_1.StatusIcon, { statusMap: this.statusMap }),
                etch.dom(output_panel_buttons_1.OutputPanelButtons, { buttons: Array.from(this.tabs.values()), activeBtn: this.state.activeTab }),
                etch.dom(output_panel_checkbox_1.OutputPanelCheckbox, { class: "ide-haskell-checkbox--uri-filter", state: this.state.fileFilter || false, onSwitched: this.switchFileFilter, enabledHint: "Show current file messages", disabledHint: "Show all project messages" }),
                Array.from(this.elements.values()),
                etch.dom(progress_bar_1.ProgressBar, { progress: this.progress })),
            etch.dom(output_panel_items_1.OutputPanelItems, { model: this.results, filter: this.itemFilter || (() => true), ref: "items" })));
    }
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            return etch.update(this);
        });
    }
    destroy() {
        this.hide();
    }
    reallyDestroy() {
        return __awaiter(this, void 0, void 0, function* () {
            yield etch.destroy(this);
            this.disposables.dispose();
        });
    }
    toggle() {
        return __awaiter(this, void 0, void 0, function* () {
            const pane = atom.workspace.paneContainerForItem(this);
            if (!pane || utils_1.isDock(pane) && !pane.isVisible()) {
                return this.show();
            }
            else {
                return this.hide();
            }
        });
    }
    show() {
        return __awaiter(this, void 0, void 0, function* () {
            yield atom.workspace.open(this, { searchAllPanes: true, activatePane: false });
            const pane = atom.workspace.paneContainerForItem(this);
            if (pane && utils_1.isDock(pane)) {
                pane.show();
            }
        });
    }
    hide() {
        const pane = atom.workspace.paneContainerForItem(this);
        if (pane && utils_1.isDock(pane)) {
            atom.workspace.hide(this);
        }
    }
    getTitle() {
        return 'IDE-Haskell';
    }
    getURI() {
        return `ide-haskell://output-panel/`;
    }
    getDefaultLocation() {
        return atom.config.get('ide-haskell.panelPosition');
    }
    addPanelControl(def) {
        let newElement;
        if (utils_1.isSimpleControlDef(def)) {
            const { events, classes, style, attrs } = def.opts;
            const props = {};
            if (classes) {
                props.class = classes.join(' ');
            }
            if (style) {
                props.style = style;
            }
            if (attrs) {
                props.attributes = attrs;
            }
            if (events) {
                props.on = events;
            }
            newElement = $(def.element, props);
        }
        else {
            newElement = $(def.element, def.opts);
        }
        this.elements.add(newElement);
        this.update();
        return new atom_1.Disposable(() => {
            this.elements.delete(newElement);
            this.update();
        });
    }
    updateItems() {
        return __awaiter(this, void 0, void 0, function* () {
            const activeTab = this.getActiveTab();
            let currentUri;
            if (this.state.fileFilter) {
                const ed = atom.workspace.getActiveTextEditor();
                currentUri = ed && ed.getPath();
            }
            let scroll = false;
            if (activeTab) {
                const ato = this.tabs.get(activeTab);
                if (currentUri && ato && ato.uriFilter) {
                    this.itemFilter = ({ uri, severity }) => (severity === activeTab) && (uri === currentUri);
                }
                else {
                    this.itemFilter = ({ severity }) => severity === activeTab;
                }
                scroll = (ato && ato.autoScroll && this.refs.items && this.refs.items.atEnd()) || false;
            }
            if (this.results) {
                for (const [btn, ato] of this.tabs.entries()) {
                    ato.count = Array.from(this.results.filter(({ severity }) => (severity === btn))).length;
                }
            }
            yield this.update();
            if (scroll && this.refs.items)
                this.refs.items.scrollToEnd();
        });
    }
    activateTab(tab) {
        this.state.activeTab = tab;
        this.updateItems();
    }
    activateFirstNonEmptyTab(severities) {
        const sevs = severities;
        for (const i of sevs) {
            const tab = this.tabs.get(i);
            if (!tab)
                continue;
            const count = tab.count;
            if (count && count > 0) {
                this.activateTab(i);
                break;
            }
        }
    }
    showItem(item) {
        this.activateTab(item.severity);
        this.refs.items && this.refs.items.showItem(item);
    }
    getActiveTab() {
        return this.state.activeTab;
    }
    createTab(name, { uriFilter = true, autoScroll = false }) {
        if (!Array.from(this.tabs.keys()).includes(name)) {
            this.tabs.set(name, {
                name,
                count: 0,
                onClick: () => this.activateTab(name),
                uriFilter,
                autoScroll,
            });
            this.state.activeTab && this.activateTab(this.state.activeTab);
        }
        this.update();
    }
    serialize() {
        return Object.assign({}, this.state, { deserializer: 'ide-haskell/OutputPanel' });
    }
    backendStatus(pluginName, st) {
        this.statusMap.set(pluginName, st);
        this.progress =
            Array.from(this.statusMap.values())
                .reduce((cv, i) => {
                if (i.status === 'progress' && i.progress !== undefined) {
                    cv.push(i.progress);
                }
                return cv;
            }, []);
        this.update();
    }
    showNextError() {
        if (!this.results)
            return;
        const rs = Array.from(this.results.filter(({ uri }) => !!uri));
        if (rs.length === 0) {
            return;
        }
        this.currentResult++;
        if (this.currentResult >= rs.length) {
            this.currentResult = 0;
        }
        this.showItem(rs[this.currentResult]);
    }
    showPrevError() {
        if (!this.results)
            return;
        const rs = Array.from(this.results.filter(({ uri }) => !!uri));
        if (rs.length === 0) {
            return;
        }
        this.currentResult--;
        if (this.currentResult < 0) {
            this.currentResult = rs.length - 1;
        }
        this.showItem(rs[this.currentResult]);
    }
}
exports.OutputPanel = OutputPanel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvb3V0cHV0LXBhbmVsL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsNkJBQTRCO0FBQzVCLCtCQUFzRDtBQUN0RCx1RUFBMkU7QUFDM0UseUVBQW1FO0FBQ25FLHVEQUFrRDtBQUNsRCxtRUFBNkQ7QUFFN0QscURBQWdEO0FBQ2hELG9DQUFxRDtBQUNyRCxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFBO0FBU2xCO0lBYUUsWUFBb0IsUUFBZ0IsRUFBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUM7UUFBdkQsVUFBSyxHQUFMLEtBQUssQ0FBa0Q7UUFSbkUsYUFBUSxHQUFxQixJQUFJLEdBQUcsRUFBRSxDQUFBO1FBQ3RDLGdCQUFXLEdBQXdCLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtRQUM1RCxrQkFBYSxHQUFXLENBQUMsQ0FBQTtRQUN6QixjQUFTLEdBQTZCLElBQUksR0FBRyxFQUFFLENBQUE7UUFDL0MsYUFBUSxHQUFhLEVBQUUsQ0FBQTtRQUN2QixTQUFJLEdBQTBCLElBQUksR0FBRyxFQUFFLENBQUE7UUFnUXZDLHFCQUFnQixHQUFHO1lBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUE7WUFDOUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ3BCLENBQUMsQ0FBQTtRQS9QQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRXJCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDekIsQ0FBQztRQUVE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L0IsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBO1FBQ3BCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7UUFBQyxDQUFDO1FBRWxFLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7Q0FNRjtBQTlRRCxrQ0E4UUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBldGNoIGZyb20gJ2V0Y2gnXG5pbXBvcnQgeyBEaXNwb3NhYmxlLCBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAnYXRvbSdcbmltcG9ydCB7IElCdG5EZXNjLCBPdXRwdXRQYW5lbEJ1dHRvbnMgfSBmcm9tICcuL3ZpZXdzL291dHB1dC1wYW5lbC1idXR0b25zJ1xuaW1wb3J0IHsgT3V0cHV0UGFuZWxDaGVja2JveCB9IGZyb20gJy4vdmlld3Mvb3V0cHV0LXBhbmVsLWNoZWNrYm94J1xuaW1wb3J0IHsgUHJvZ3Jlc3NCYXIgfSBmcm9tICcuL3ZpZXdzL3Byb2dyZXNzLWJhcidcbmltcG9ydCB7IE91dHB1dFBhbmVsSXRlbXMgfSBmcm9tICcuL3ZpZXdzL291dHB1dC1wYW5lbC1pdGVtcydcbmltcG9ydCB7IFJlc3VsdHNEQiwgUmVzdWx0SXRlbSB9IGZyb20gJy4uL3Jlc3VsdHMtZGInXG5pbXBvcnQgeyBTdGF0dXNJY29uIH0gZnJvbSAnLi92aWV3cy9zdGF0dXMtaWNvbidcbmltcG9ydCB7IGlzRG9jaywgaXNTaW1wbGVDb250cm9sRGVmIH0gZnJvbSAnLi4vdXRpbHMnXG5jb25zdCAkID0gZXRjaC5kb21cblxuZXhwb3J0IGludGVyZmFjZSBJU3RhdGUge1xuICBmaWxlRmlsdGVyOiBib29sZWFuXG4gIGFjdGl2ZVRhYjogc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIFRQYW5lbFBvc2l0aW9uID0gJ2JvdHRvbScgfCAnbGVmdCcgfCAndG9wJyB8ICdyaWdodCdcblxuZXhwb3J0IGNsYXNzIE91dHB1dFBhbmVsIHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVuaW5pdGlhbGl6ZWRcbiAgcHJpdmF0ZSByZWZzOiB7XG4gICAgaXRlbXM/OiBPdXRwdXRQYW5lbEl0ZW1zXG4gIH1cbiAgcHJpdmF0ZSBlbGVtZW50czogU2V0PEpTWC5FbGVtZW50PiA9IG5ldyBTZXQoKVxuICBwcml2YXRlIGRpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICBwcml2YXRlIGN1cnJlbnRSZXN1bHQ6IG51bWJlciA9IDBcbiAgcHJpdmF0ZSBzdGF0dXNNYXA6IE1hcDxzdHJpbmcsIFVQSS5JU3RhdHVzPiA9IG5ldyBNYXAoKVxuICBwcml2YXRlIHByb2dyZXNzOiBudW1iZXJbXSA9IFtdXG4gIHByaXZhdGUgdGFiczogTWFwPHN0cmluZywgSUJ0bkRlc2M+ID0gbmV3IE1hcCgpXG4gIHByaXZhdGUgaXRlbUZpbHRlcj86IChpdGVtOiBSZXN1bHRJdGVtKSA9PiBib29sZWFuXG4gIHByaXZhdGUgcmVzdWx0cz86IFJlc3VsdHNEQlxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0YXRlOiBJU3RhdGUgPSB7ZmlsZUZpbHRlcjogZmFsc2UsIGFjdGl2ZVRhYjogJ2Vycm9yJ30pIHtcbiAgICBldGNoLmluaXRpYWxpemUodGhpcylcblxuICAgIGZvciAoY29uc3QgdGFiIG9mIFsnZXJyb3InLCAnd2FybmluZycsICdsaW50J10pIHtcbiAgICAgIHRoaXMuY3JlYXRlVGFiKHRhYiwge30pXG4gICAgfVxuXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQoYXRvbS53b3Jrc3BhY2Uub25EaWRDaGFuZ2VBY3RpdmVQYW5lSXRlbSgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5maWxlRmlsdGVyKSB0aGlzLnVwZGF0ZUl0ZW1zKClcbiAgICB9KSlcbiAgICBzZXRJbW1lZGlhdGUoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgdGhpcy5zaG93KClcbiAgICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLmF1dG9IaWRlT3V0cHV0JykpIHtcbiAgICAgICAgdGhpcy5oaWRlKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcHVibGljIGNvbm5lY3RSZXN1bHRzKHJlc3VsdHM6IFJlc3VsdHNEQikge1xuICAgIGlmICh0aGlzLnJlc3VsdHMpIHRocm93IG5ldyBFcnJvcignUmVzdWx0cyBhbHJlYWR5IGNvbm5lY3RlZCEnKVxuICAgIHRoaXMucmVzdWx0cyA9IHJlc3VsdHNcblxuICAgIGNvbnN0IGRpZFVwZGF0ZSA9IChzZXZlcml0aWVzOiBVUEkuVFNldmVyaXR5W10pID0+IHtcbiAgICAgIHRoaXMuY3VycmVudFJlc3VsdCA9IDBcbiAgICAgIHRoaXMudXBkYXRlSXRlbXMoKVxuICAgICAgaWYgKGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwuYXV0b0hpZGVPdXRwdXQnKSAmJiAoIXRoaXMucmVzdWx0cyB8fCB0aGlzLnJlc3VsdHMuaXNFbXB0eShzZXZlcml0aWVzKSkpIHtcbiAgICAgICAgdGhpcy5oaWRlKClcbiAgICAgIH0gZWxzZSBpZiAoYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC5zd2l0Y2hUYWJPbkNoZWNrJykpIHtcbiAgICAgICAgdGhpcy5zaG93KClcbiAgICAgICAgdGhpcy5hY3RpdmF0ZUZpcnN0Tm9uRW1wdHlUYWIoc2V2ZXJpdGllcylcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZCh0aGlzLnJlc3VsdHMub25EaWRVcGRhdGUoZGlkVXBkYXRlKSlcbiAgICB0aGlzLnVwZGF0ZSgpXG4gIH1cblxuICBwdWJsaWMgcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy5yZXN1bHRzKSB7XG4gICAgICByZXR1cm4gPGlkZS1oYXNrZWxsLXBhbmVsLz5cbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxpZGUtaGFza2VsbC1wYW5lbD5cbiAgICAgICAgPGlkZS1oYXNrZWxsLXBhbmVsLWhlYWRpbmc+XG4gICAgICAgICAgPFN0YXR1c0ljb24gc3RhdHVzTWFwPXt0aGlzLnN0YXR1c01hcH0gLz5cbiAgICAgICAgICA8T3V0cHV0UGFuZWxCdXR0b25zXG4gICAgICAgICAgICBidXR0b25zPXtBcnJheS5mcm9tKHRoaXMudGFicy52YWx1ZXMoKSl9XG4gICAgICAgICAgICBhY3RpdmVCdG49e3RoaXMuc3RhdGUuYWN0aXZlVGFifVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPE91dHB1dFBhbmVsQ2hlY2tib3hcbiAgICAgICAgICAgIGNsYXNzPVwiaWRlLWhhc2tlbGwtY2hlY2tib3gtLXVyaS1maWx0ZXJcIlxuICAgICAgICAgICAgc3RhdGU9e3RoaXMuc3RhdGUuZmlsZUZpbHRlciB8fCBmYWxzZX1cbiAgICAgICAgICAgIG9uU3dpdGNoZWQ9e3RoaXMuc3dpdGNoRmlsZUZpbHRlcn1cbiAgICAgICAgICAgIGVuYWJsZWRIaW50PVwiU2hvdyBjdXJyZW50IGZpbGUgbWVzc2FnZXNcIlxuICAgICAgICAgICAgZGlzYWJsZWRIaW50PVwiU2hvdyBhbGwgcHJvamVjdCBtZXNzYWdlc1wiXG4gICAgICAgICAgLz5cbiAgICAgICAgICB7QXJyYXkuZnJvbSh0aGlzLmVsZW1lbnRzLnZhbHVlcygpKX1cbiAgICAgICAgICA8UHJvZ3Jlc3NCYXIgcHJvZ3Jlc3M9e3RoaXMucHJvZ3Jlc3N9IC8+XG4gICAgICAgIDwvaWRlLWhhc2tlbGwtcGFuZWwtaGVhZGluZz5cbiAgICAgICAgPE91dHB1dFBhbmVsSXRlbXNcbiAgICAgICAgICBtb2RlbD17dGhpcy5yZXN1bHRzfVxuICAgICAgICAgIGZpbHRlcj17dGhpcy5pdGVtRmlsdGVyIHx8ICgoKSA9PiB0cnVlKX1cbiAgICAgICAgICByZWY9XCJpdGVtc1wiXG4gICAgICAgIC8+XG4gICAgICA8L2lkZS1oYXNrZWxsLXBhbmVsPlxuICAgIClcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB1cGRhdGUoKSB7XG4gICAgcmV0dXJuIGV0Y2gudXBkYXRlKHRoaXMpXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICB0aGlzLmhpZGUoKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHJlYWxseURlc3Ryb3koKSB7XG4gICAgYXdhaXQgZXRjaC5kZXN0cm95KHRoaXMpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB0b2dnbGUoKSB7XG4gICAgY29uc3QgcGFuZSA9IGF0b20ud29ya3NwYWNlLnBhbmVDb250YWluZXJGb3JJdGVtKHRoaXMpXG4gICAgaWYgKCFwYW5lIHx8IGlzRG9jayhwYW5lKSAmJiAhcGFuZS5pc1Zpc2libGUoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2hvdygpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmhpZGUoKVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzaG93KCkge1xuICAgIGF3YWl0IGF0b20ud29ya3NwYWNlLm9wZW4odGhpcywgeyBzZWFyY2hBbGxQYW5lczogdHJ1ZSwgYWN0aXZhdGVQYW5lOiBmYWxzZSB9KVxuICAgIGNvbnN0IHBhbmUgPSBhdG9tLndvcmtzcGFjZS5wYW5lQ29udGFpbmVyRm9ySXRlbSh0aGlzKVxuICAgIGlmIChwYW5lICYmIGlzRG9jayhwYW5lKSkgeyBwYW5lLnNob3coKSB9XG4gIH1cblxuICBwdWJsaWMgaGlkZSgpIHtcbiAgICBjb25zdCBwYW5lID0gYXRvbS53b3Jrc3BhY2UucGFuZUNvbnRhaW5lckZvckl0ZW0odGhpcylcbiAgICBpZiAocGFuZSAmJiBpc0RvY2socGFuZSkpIHsgYXRvbS53b3Jrc3BhY2UuaGlkZSh0aGlzKSB9XG4gIH1cblxuICBwdWJsaWMgZ2V0VGl0bGUoKSB7XG4gICAgcmV0dXJuICdJREUtSGFza2VsbCdcbiAgfVxuXG4gIHB1YmxpYyBnZXRVUkkoKSB7XG4gICAgcmV0dXJuIGBpZGUtaGFza2VsbDovL291dHB1dC1wYW5lbC9gXG4gIH1cblxuICBwdWJsaWMgZ2V0RGVmYXVsdExvY2F0aW9uKCkge1xuICAgIHJldHVybiBhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLnBhbmVsUG9zaXRpb24nKVxuICB9XG5cbiAgcHVibGljIGFkZFBhbmVsQ29udHJvbDxUPihkZWY6IFVQSS5UQ29udHJvbERlZmluaXRpb248VD4pIHtcbiAgICBsZXQgbmV3RWxlbWVudDogSlNYLkVsZW1lbnRcbiAgICBpZiAoaXNTaW1wbGVDb250cm9sRGVmKGRlZikpIHtcbiAgICAgIGNvbnN0IHsgZXZlbnRzLCBjbGFzc2VzLCBzdHlsZSwgYXR0cnMgfSA9IGRlZi5vcHRzXG4gICAgICBjb25zdCBwcm9wczogeyBba2V5OiBzdHJpbmddOiBPYmplY3QgfSA9IHt9XG4gICAgICBpZiAoY2xhc3NlcykgeyBwcm9wcy5jbGFzcyA9IGNsYXNzZXMuam9pbignICcpIH1cbiAgICAgIGlmIChzdHlsZSkgeyBwcm9wcy5zdHlsZSA9IHN0eWxlIH1cbiAgICAgIGlmIChhdHRycykgeyBwcm9wcy5hdHRyaWJ1dGVzID0gYXR0cnMgfVxuICAgICAgaWYgKGV2ZW50cykgeyBwcm9wcy5vbiA9IGV2ZW50cyB9XG5cbiAgICAgIG5ld0VsZW1lbnQgPSAkKGRlZi5lbGVtZW50LCBwcm9wcylcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3RWxlbWVudCA9ICQoZGVmLmVsZW1lbnQsIGRlZi5vcHRzKVxuICAgIH1cbiAgICB0aGlzLmVsZW1lbnRzLmFkZChuZXdFbGVtZW50KVxuICAgIHRoaXMudXBkYXRlKClcbiAgICByZXR1cm4gbmV3IERpc3Bvc2FibGUoKCkgPT4ge1xuICAgICAgdGhpcy5lbGVtZW50cy5kZWxldGUobmV3RWxlbWVudClcbiAgICAgIHRoaXMudXBkYXRlKClcbiAgICB9KVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwZGF0ZUl0ZW1zKCkge1xuICAgIGNvbnN0IGFjdGl2ZVRhYiA9IHRoaXMuZ2V0QWN0aXZlVGFiKClcbiAgICBsZXQgY3VycmVudFVyaTogc3RyaW5nIHwgdW5kZWZpbmVkXG4gICAgaWYgKHRoaXMuc3RhdGUuZmlsZUZpbHRlcikge1xuICAgICAgY29uc3QgZWQgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKClcbiAgICAgIGN1cnJlbnRVcmkgPSBlZCAmJiBlZC5nZXRQYXRoKClcbiAgICB9XG4gICAgbGV0IHNjcm9sbDogYm9vbGVhbiA9IGZhbHNlXG4gICAgaWYgKGFjdGl2ZVRhYikge1xuICAgICAgY29uc3QgYXRvID0gdGhpcy50YWJzLmdldChhY3RpdmVUYWIpXG4gICAgICBpZiAoY3VycmVudFVyaSAmJiBhdG8gJiYgYXRvLnVyaUZpbHRlcikge1xuICAgICAgICB0aGlzLml0ZW1GaWx0ZXIgPSAoeyB1cmksIHNldmVyaXR5IH0pID0+IChzZXZlcml0eSA9PT0gYWN0aXZlVGFiKSAmJiAodXJpID09PSBjdXJyZW50VXJpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pdGVtRmlsdGVyID0gKHsgc2V2ZXJpdHkgfSkgPT4gc2V2ZXJpdHkgPT09IGFjdGl2ZVRhYlxuICAgICAgfVxuICAgICAgc2Nyb2xsID0gKGF0byAmJiBhdG8uYXV0b1Njcm9sbCAmJiB0aGlzLnJlZnMuaXRlbXMgJiYgdGhpcy5yZWZzLml0ZW1zLmF0RW5kKCkpIHx8IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVzdWx0cykge1xuICAgICAgZm9yIChjb25zdCBbYnRuLCBhdG9dIG9mIHRoaXMudGFicy5lbnRyaWVzKCkpIHtcbiAgICAgICAgYXRvLmNvdW50ID0gQXJyYXkuZnJvbSh0aGlzLnJlc3VsdHMuZmlsdGVyKCh7IHNldmVyaXR5IH0pID0+IChzZXZlcml0eSA9PT0gYnRuKSkpLmxlbmd0aFxuICAgICAgfVxuICAgIH1cblxuICAgIGF3YWl0IHRoaXMudXBkYXRlKClcblxuICAgIGlmIChzY3JvbGwgJiYgdGhpcy5yZWZzLml0ZW1zKSB0aGlzLnJlZnMuaXRlbXMuc2Nyb2xsVG9FbmQoKVxuICB9XG5cbiAgcHVibGljIGFjdGl2YXRlVGFiKHRhYjogc3RyaW5nKSB7XG4gICAgdGhpcy5zdGF0ZS5hY3RpdmVUYWIgPSB0YWJcbiAgICB0aGlzLnVwZGF0ZUl0ZW1zKClcbiAgfVxuXG4gIHB1YmxpYyBhY3RpdmF0ZUZpcnN0Tm9uRW1wdHlUYWIoc2V2ZXJpdGllczogVVBJLlRTZXZlcml0eVtdKSB7XG4gICAgY29uc3Qgc2V2czogVVBJLlRTZXZlcml0eVtdID0gc2V2ZXJpdGllc1xuICAgIGZvciAoY29uc3QgaSBvZiBzZXZzKSB7XG4gICAgICBjb25zdCB0YWIgPSB0aGlzLnRhYnMuZ2V0KGkpXG4gICAgICBpZiAoIXRhYikgY29udGludWVcbiAgICAgIGNvbnN0IGNvdW50ID0gdGFiLmNvdW50XG4gICAgICBpZiAoY291bnQgJiYgY291bnQgPiAwKSB7XG4gICAgICAgIHRoaXMuYWN0aXZhdGVUYWIoaSlcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2hvd0l0ZW0oaXRlbTogUmVzdWx0SXRlbSkge1xuICAgIHRoaXMuYWN0aXZhdGVUYWIoaXRlbS5zZXZlcml0eSlcbiAgICB0aGlzLnJlZnMuaXRlbXMgJiYgdGhpcy5yZWZzLml0ZW1zLnNob3dJdGVtKGl0ZW0pXG4gIH1cblxuICBwdWJsaWMgZ2V0QWN0aXZlVGFiKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmFjdGl2ZVRhYlxuICB9XG5cbiAgcHVibGljIGNyZWF0ZVRhYihcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgeyB1cmlGaWx0ZXIgPSB0cnVlLCBhdXRvU2Nyb2xsID0gZmFsc2UgfTogVVBJLklTZXZlcml0eVRhYkRlZmluaXRpb24sXG4gICkge1xuICAgIGlmICghQXJyYXkuZnJvbSh0aGlzLnRhYnMua2V5cygpKS5pbmNsdWRlcyhuYW1lKSkge1xuICAgICAgdGhpcy50YWJzLnNldChuYW1lLCB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiB0aGlzLmFjdGl2YXRlVGFiKG5hbWUpLFxuICAgICAgICB1cmlGaWx0ZXIsXG4gICAgICAgIGF1dG9TY3JvbGwsXG4gICAgICB9KVxuICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVUYWIgJiYgdGhpcy5hY3RpdmF0ZVRhYih0aGlzLnN0YXRlLmFjdGl2ZVRhYilcbiAgICB9XG4gICAgdGhpcy51cGRhdGUoKVxuICB9XG5cbiAgcHVibGljIHNlcmlhbGl6ZSgpOiBJU3RhdGUgJiB7ZGVzZXJpYWxpemVyOiAnaWRlLWhhc2tlbGwvT3V0cHV0UGFuZWwnfSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnRoaXMuc3RhdGUsXG4gICAgICBkZXNlcmlhbGl6ZXI6ICdpZGUtaGFza2VsbC9PdXRwdXRQYW5lbCcsXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGJhY2tlbmRTdGF0dXMocGx1Z2luTmFtZTogc3RyaW5nLCBzdDogVVBJLklTdGF0dXMpIHtcbiAgICB0aGlzLnN0YXR1c01hcC5zZXQocGx1Z2luTmFtZSwgc3QpXG4gICAgdGhpcy5wcm9ncmVzcyA9XG4gICAgICBBcnJheS5mcm9tKHRoaXMuc3RhdHVzTWFwLnZhbHVlcygpKVxuICAgICAgICAucmVkdWNlKFxuICAgICAgICAoY3YsIGkpID0+IHtcbiAgICAgICAgICBpZiAoaS5zdGF0dXMgPT09ICdwcm9ncmVzcycgJiYgaS5wcm9ncmVzcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjdi5wdXNoKGkucHJvZ3Jlc3MpXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjdlxuICAgICAgICB9LFxuICAgICAgICBbXSBhcyBudW1iZXJbXSxcbiAgICAgIClcbiAgICB0aGlzLnVwZGF0ZSgpXG4gIH1cblxuICBwdWJsaWMgc2hvd05leHRFcnJvcigpIHtcbiAgICBpZiAoIXRoaXMucmVzdWx0cykgcmV0dXJuXG4gICAgY29uc3QgcnMgPSBBcnJheS5mcm9tKHRoaXMucmVzdWx0cy5maWx0ZXIoKHsgdXJpIH0pID0+ICEhdXJpKSlcbiAgICBpZiAocnMubGVuZ3RoID09PSAwKSB7IHJldHVybiB9XG5cbiAgICB0aGlzLmN1cnJlbnRSZXN1bHQrK1xuICAgIGlmICh0aGlzLmN1cnJlbnRSZXN1bHQgPj0gcnMubGVuZ3RoKSB7IHRoaXMuY3VycmVudFJlc3VsdCA9IDAgfVxuXG4gICAgdGhpcy5zaG93SXRlbShyc1t0aGlzLmN1cnJlbnRSZXN1bHRdKVxuICB9XG5cbiAgcHVibGljIHNob3dQcmV2RXJyb3IoKSB7XG4gICAgaWYgKCF0aGlzLnJlc3VsdHMpIHJldHVyblxuICAgIGNvbnN0IHJzID0gQXJyYXkuZnJvbSh0aGlzLnJlc3VsdHMuZmlsdGVyKCh7IHVyaSB9KSA9PiAhIXVyaSkpXG4gICAgaWYgKHJzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gfVxuXG4gICAgdGhpcy5jdXJyZW50UmVzdWx0LS1cbiAgICBpZiAodGhpcy5jdXJyZW50UmVzdWx0IDwgMCkgeyB0aGlzLmN1cnJlbnRSZXN1bHQgPSBycy5sZW5ndGggLSAxIH1cblxuICAgIHRoaXMuc2hvd0l0ZW0ocnNbdGhpcy5jdXJyZW50UmVzdWx0XSlcbiAgfVxuXG4gIHByaXZhdGUgc3dpdGNoRmlsZUZpbHRlciA9ICgpID0+IHtcbiAgICB0aGlzLnN0YXRlLmZpbGVGaWx0ZXIgPSAhdGhpcy5zdGF0ZS5maWxlRmlsdGVyXG4gICAgdGhpcy51cGRhdGVJdGVtcygpXG4gIH1cbn1cbiJdfQ==