"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const etch = require("etch");
const atom_1 = require("atom");
const output_panel_buttons_1 = require("./views/output-panel-buttons");
const output_panel_checkbox_1 = require("./views/output-panel-checkbox");
const progress_bar_1 = require("./views/progress-bar");
const output_panel_items_1 = require("./views/output-panel-items");
const status_icon_1 = require("./views/status-icon");
const utils_1 = require("../utils");
const $ = etch.dom;
class OutputPanel {
    constructor(state = {}) {
        this.state = state;
        this.updateItems = () => {
            const activeTab = this.getActiveTab();
            let currentUri;
            if (activeTab) {
                let filterUri;
                const filterSeverity = activeTab;
                const ato = this.refs.buttons.options(activeTab);
                if (this.refs.checkboxUriFilter.getState()) {
                    const ed = atom.workspace.getActiveTextEditor();
                    currentUri = ed && ed.getPath();
                    if (currentUri && ato && ato.uriFilter) {
                        filterUri = currentUri;
                    }
                }
                this.itemFilter = ({ uri, severity }) => (severity === filterSeverity) && (!filterUri || uri === filterUri);
                if (ato && ato.autoScroll && this.refs.items && this.refs.items.atEnd()) {
                    this.refs.items.scrollToEnd();
                }
            }
            this.refs.buttons.buttonNames().forEach((btn) => {
                const f = { severity: btn };
                const ato = this.refs.buttons.options(btn);
                if (currentUri && ato && ato.uriFilter) {
                    f.uri = currentUri;
                }
                this.refs.buttons.setCount(btn, this.results
                    ? Array.from(this.results.filter(({ uri, severity }) => (severity === f.severity) && (!f.uri || uri === f.uri))).length
                    : 0);
            });
            this.update();
        };
        this.elements = new Set();
        this.statusMap = new Map();
        this.disposables = new atom_1.CompositeDisposable();
        this.currentResult = 0;
        this.progress = [];
        this.itemFilter = () => true;
        etch.initialize(this);
        this.disposables.add(atom.workspace.onDidChangeActivePaneItem(() => {
            if (this.refs.checkboxUriFilter.getState()) {
                this.updateItems();
            }
        }));
        setImmediate(() => __awaiter(this, void 0, void 0, function* () {
            yield this.show();
            if (atom.config.get('ide-haskell.autoHideOutput')) {
                this.hide();
            }
        }));
    }
    connectResults(results) {
        if (this.results)
            throw new Error('Results already connected!');
        this.results = results;
        const didUpdate = (severities) => {
            this.currentResult = 0;
            this.updateItems();
            if (atom.config.get('ide-haskell.autoHideOutput') && (!this.results || this.results.isEmpty(severities))) {
                this.hide();
            }
            else if (atom.config.get('ide-haskell.switchTabOnCheck')) {
                this.show();
                this.activateFirstNonEmptyTab(severities);
            }
        };
        this.disposables.add(this.results.onDidUpdate(didUpdate));
    }
    render() {
        const outputItems = this.results
            ? etch.dom(output_panel_items_1.OutputPanelItems, { model: this.results, filter: this.itemFilter, ref: "items" })
            : null;
        return (etch.dom("ide-haskell-panel", null,
            etch.dom("ide-haskell-panel-heading", null,
                etch.dom(status_icon_1.StatusIcon, { ref: "status", statusMap: this.statusMap }),
                etch.dom(output_panel_buttons_1.OutputPanelButtons, { ref: "buttons", onChange: this.updateItems }),
                etch.dom(output_panel_checkbox_1.OutputPanelCheckbox, { ref: "checkboxUriFilter", class: "ide-haskell-checkbox--uri-filter", initialState: this.state.fileFilter, onSwitched: this.updateItems, enabledHint: "Show current file messages", disabledHint: "Show all project messages" }),
                Array.from(this.elements.values()),
                etch.dom(progress_bar_1.ProgressBar, { progress: this.progress })),
            outputItems));
    }
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            return etch.update(this);
        });
    }
    destroy() {
        return __awaiter(this, void 0, void 0, function* () {
            this.hide();
        });
    }
    reallyDestroy() {
        return __awaiter(this, void 0, void 0, function* () {
            yield etch.destroy(this);
            this.disposables.dispose();
        });
    }
    toggle() {
        return __awaiter(this, void 0, void 0, function* () {
            const pane = atom.workspace.paneContainerForItem(this);
            if (!pane || utils_1.isDock(pane) && !pane.isVisible()) {
                this.show();
            }
            else {
                this.hide();
            }
        });
    }
    show() {
        return __awaiter(this, void 0, void 0, function* () {
            yield atom.workspace.open(this, { searchAllPanes: true, activatePane: false });
            const pane = atom.workspace.paneContainerForItem(this);
            if (pane && utils_1.isDock(pane)) {
                pane.show();
            }
        });
    }
    hide() {
        return __awaiter(this, void 0, void 0, function* () {
            const pane = atom.workspace.paneContainerForItem(this);
            if (pane && utils_1.isDock(pane)) {
                atom.workspace.hide(this);
            }
        });
    }
    getTitle() {
        return 'IDE-Haskell';
    }
    getURI() {
        return `ide-haskell://output-panel/`;
    }
    getDefaultLocation() {
        return atom.config.get('ide-haskell.panelPosition');
    }
    addPanelControl(def) {
        let newElement;
        if (utils_1.isSimpleControlDef(def)) {
            const { events, classes, style, attrs } = def.opts;
            const props = {};
            if (classes) {
                props.class = classes.join(' ');
            }
            if (style) {
                props.style = style;
            }
            if (attrs) {
                props.attributes = attrs;
            }
            if (events) {
                props.on = events;
            }
            newElement = $(def.element, props);
        }
        else {
            newElement = $(def.element, def.opts);
        }
        this.elements.add(newElement);
        this.update();
        return new atom_1.Disposable(() => {
            this.elements.delete(newElement);
            this.update();
        });
    }
    activateTab(tab) {
        this.refs.buttons.setActive(tab);
    }
    activateFirstNonEmptyTab(severities) {
        const sevs = severities;
        for (const i of sevs) {
            const count = this.refs.buttons.getCount(i);
            if (count && count > 0) {
                this.activateTab(i);
                break;
            }
        }
    }
    showItem(item) {
        this.activateTab(item.severity);
        this.refs.items && this.refs.items.showItem(item);
    }
    getActiveTab() {
        return this.refs.buttons.getActive();
    }
    createTab(name, opts) {
        if (!this.refs.buttons.buttonNames().includes(name)) {
            this.refs.buttons.createButton(name, opts);
            this.state.activeTab && this.activateTab(this.state.activeTab);
        }
    }
    serialize() {
        return {
            activeTab: this.getActiveTab(),
            fileFilter: this.refs.checkboxUriFilter.getState(),
            deserializer: 'ide-haskell/OutputPanel',
        };
    }
    backendStatus(pluginName, st) {
        this.statusMap.set(pluginName, st);
        this.progress =
            Array.from(this.statusMap.values())
                .reduce((cv, i) => {
                if (i.status === 'progress' && i.progress !== undefined) {
                    cv.push(i.progress);
                }
                return cv;
            }, []);
        this.update();
    }
    showNextError() {
        if (!this.results)
            return;
        const rs = Array.from(this.results.filter(({ uri }) => !!uri));
        if (rs.length === 0) {
            return;
        }
        this.currentResult++;
        if (this.currentResult >= rs.length) {
            this.currentResult = 0;
        }
        this.showItem(rs[this.currentResult]);
    }
    showPrevError() {
        if (!this.results)
            return;
        const rs = Array.from(this.results.filter(({ uri }) => !!uri));
        if (rs.length === 0) {
            return;
        }
        this.currentResult--;
        if (this.currentResult < 0) {
            this.currentResult = rs.length - 1;
        }
        this.showItem(rs[this.currentResult]);
    }
}
exports.OutputPanel = OutputPanel;
//# sourceMappingURL=data:application/json;base64,