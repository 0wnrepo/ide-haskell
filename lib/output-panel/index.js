"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const etch = require("etch");
const atom_1 = require("atom");
const output_panel_buttons_1 = require("./views/output-panel-buttons");
const output_panel_checkbox_1 = require("./views/output-panel-checkbox");
const progress_bar_1 = require("./views/progress-bar");
const output_panel_items_1 = require("./views/output-panel-items");
const status_icon_1 = require("./views/status-icon");
const utils_1 = require("../utils");
const $ = etch.dom;
class OutputPanel {
    constructor(state = { fileFilter: false, activeTab: 'error' }) {
        this.state = state;
        this.elements = new Set();
        this.disposables = new atom_1.CompositeDisposable();
        this.currentResult = 0;
        this.statusMap = new Map();
        this.progress = [];
        this.tabs = new Map();
        this.switchFileFilter = () => {
            this.state.fileFilter = !this.state.fileFilter;
            this.updateItems();
        };
        etch.initialize(this);
        for (const tab of ['error', 'warning', 'lint']) {
            this.createTab(tab, {});
        }
        this.disposables.add(atom.workspace.onDidChangeActivePaneItem(() => {
            if (this.state.fileFilter)
                this.updateItems();
        }));
        setImmediate(() => __awaiter(this, void 0, void 0, function* () {
            yield this.show();
            if (atom.config.get('ide-haskell.autoHideOutput')) {
                this.hide();
            }
        }));
    }
    connectResults(results) {
        if (this.results)
            throw new Error('Results already connected!');
        this.results = results;
        const didUpdate = (severities) => {
            this.currentResult = 0;
            this.updateItems();
            if (atom.config.get('ide-haskell.autoHideOutput') && (!this.results || this.results.isEmpty(severities))) {
                this.hide();
            }
            else if (atom.config.get('ide-haskell.switchTabOnCheck')) {
                this.show();
                this.activateFirstNonEmptyTab(severities);
            }
        };
        this.disposables.add(this.results.onDidUpdate(didUpdate));
        this.update();
    }
    render() {
        if (!this.results) {
            return etch.dom("ide-haskell-panel", null);
        }
        return (etch.dom("ide-haskell-panel", null,
            etch.dom("ide-haskell-panel-heading", null,
                etch.dom(status_icon_1.StatusIcon, { statusMap: this.statusMap }),
                etch.dom(output_panel_buttons_1.OutputPanelButtons, { buttons: Array.from(this.tabs.values()), activeBtn: this.state.activeTab }),
                etch.dom(output_panel_checkbox_1.OutputPanelCheckbox, { class: "ide-haskell-checkbox--uri-filter", state: this.state.fileFilter || false, onSwitched: this.switchFileFilter, enabledHint: "Show current file messages", disabledHint: "Show all project messages" }),
                Array.from(this.elements.values()),
                etch.dom(progress_bar_1.ProgressBar, { progress: this.progress })),
            etch.dom(output_panel_items_1.OutputPanelItems, { model: this.results, filter: this.itemFilter || (() => true), ref: "items" })));
    }
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            return etch.update(this);
        });
    }
    destroy() {
        this.hide();
    }
    reallyDestroy() {
        return __awaiter(this, void 0, void 0, function* () {
            yield etch.destroy(this);
            this.disposables.dispose();
        });
    }
    toggle() {
        return __awaiter(this, void 0, void 0, function* () {
            const pane = atom.workspace.paneContainerForItem(this);
            if (!pane || utils_1.isDock(pane) && !pane.isVisible()) {
                return this.show();
            }
            else {
                return this.hide();
            }
        });
    }
    show() {
        return __awaiter(this, void 0, void 0, function* () {
            yield atom.workspace.open(this, { searchAllPanes: true, activatePane: false });
            const pane = atom.workspace.paneContainerForItem(this);
            if (pane && utils_1.isDock(pane)) {
                pane.show();
            }
        });
    }
    hide() {
        const pane = atom.workspace.paneContainerForItem(this);
        if (pane && utils_1.isDock(pane)) {
            atom.workspace.hide(this);
        }
    }
    getTitle() {
        return 'IDE-Haskell';
    }
    getURI() {
        return `ide-haskell://output-panel/`;
    }
    getDefaultLocation() {
        return atom.config.get('ide-haskell.panelPosition');
    }
    addPanelControl(def) {
        let newElement;
        if (utils_1.isSimpleControlDef(def)) {
            const { events, classes, style, attrs } = def.opts;
            const props = {};
            if (classes) {
                props.class = classes.join(' ');
            }
            if (style) {
                props.style = style;
            }
            if (attrs) {
                props.attributes = attrs;
            }
            if (events) {
                props.on = events;
            }
            newElement = $(def.element, props);
        }
        else {
            newElement = $(def.element, def.opts);
        }
        this.elements.add(newElement);
        this.update();
        return new atom_1.Disposable(() => {
            this.elements.delete(newElement);
            this.update();
        });
    }
    updateItems() {
        return __awaiter(this, void 0, void 0, function* () {
            const activeTab = this.getActiveTab();
            let currentUri;
            if (this.state.fileFilter) {
                const ed = atom.workspace.getActiveTextEditor();
                currentUri = ed && ed.getPath();
            }
            let scroll = false;
            if (activeTab) {
                const ato = this.tabs.get(activeTab);
                if (currentUri && ato && ato.uriFilter) {
                    this.itemFilter = ({ uri, severity }) => (severity === activeTab) && (uri === currentUri);
                }
                else {
                    this.itemFilter = ({ severity }) => severity === activeTab;
                }
                scroll = (ato && ato.autoScroll && this.refs.items && this.refs.items.atEnd()) || false;
            }
            if (this.results) {
                for (const [btn, ato] of this.tabs.entries()) {
                    ato.count = Array.from(this.results.filter(({ severity }) => (severity === btn))).length;
                }
            }
            yield this.update();
            if (scroll && this.refs.items)
                yield this.refs.items.scrollToEnd();
        });
    }
    activateTab(tab) {
        this.state.activeTab = tab;
        this.updateItems();
    }
    activateFirstNonEmptyTab(severities) {
        const sevs = severities;
        for (const i of sevs) {
            const tab = this.tabs.get(i);
            if (!tab)
                continue;
            const count = tab.count;
            if (count && count > 0) {
                this.activateTab(i);
                break;
            }
        }
    }
    showItem(item) {
        this.activateTab(item.severity);
        this.refs.items && this.refs.items.showItem(item);
    }
    getActiveTab() {
        return this.state.activeTab;
    }
    createTab(name, { uriFilter = true, autoScroll = false }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Array.from(this.tabs.keys()).includes(name)) {
                this.tabs.set(name, {
                    name,
                    count: 0,
                    onClick: () => this.activateTab(name),
                    uriFilter,
                    autoScroll,
                });
                this.state.activeTab && this.activateTab(this.state.activeTab);
            }
            return this.update();
        });
    }
    serialize() {
        return Object.assign({}, this.state, { deserializer: 'ide-haskell/OutputPanel' });
    }
    backendStatus(pluginName, st) {
        this.statusMap.set(pluginName, st);
        this.progress =
            Array.from(this.statusMap.values())
                .reduce((cv, i) => {
                if (i.status === 'progress' && i.progress !== undefined) {
                    cv.push(i.progress);
                }
                return cv;
            }, []);
        this.update();
    }
    showNextError() {
        if (!this.results)
            return;
        const rs = Array.from(this.results.filter(({ uri }) => !!uri));
        if (rs.length === 0) {
            return;
        }
        this.currentResult++;
        if (this.currentResult >= rs.length) {
            this.currentResult = 0;
        }
        this.showItem(rs[this.currentResult]);
    }
    showPrevError() {
        if (!this.results)
            return;
        const rs = Array.from(this.results.filter(({ uri }) => !!uri));
        if (rs.length === 0) {
            return;
        }
        this.currentResult--;
        if (this.currentResult < 0) {
            this.currentResult = rs.length - 1;
        }
        this.showItem(rs[this.currentResult]);
    }
}
exports.OutputPanel = OutputPanel;
//# sourceMappingURL=data:application/json;base64,