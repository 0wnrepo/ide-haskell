"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const etch = require("etch");
const atom_1 = require("atom");
const output_panel_buttons_1 = require("./views/output-panel-buttons");
const output_panel_checkbox_1 = require("./views/output-panel-checkbox");
const progress_bar_1 = require("./views/progress-bar");
const output_panel_items_1 = require("./views/output-panel-items");
const $ = etch.dom;
class OutputPanel {
    constructor(state = {}, results) {
        this.state = state;
        this.results = results;
        this.hiddenOutput = true;
        this.elements = new Set();
        this.statusMap = new Map();
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.currentResult = 0;
        this.currentStatus = { status: 'ready' };
        etch.initialize(this);
        this.disposables.add(atom.tooltips.add(this.refs.status, {
            class: 'ide-haskell-status-tooltip',
            title: () => {
                const res = [];
                for (const [plugin, { status, detail }] of this.statusMap.entries()) {
                    res.push(`
          <ide-haskell-status-item>
            <ide-haskell-status-icon data-status="${status}">${plugin}</ide-haskell-status-icon>
            <ide-haskell-status-detail>${detail || ''}</ide-haskell-status-detail>
          </ide-haskell-status-item>
          `);
                }
                return res.join('');
            }
        }));
        this.disposables.add(this.results.onDidUpdate(() => {
            this.currentResult = 0;
            this.updateItems();
            if (atom.config.get('ide-haskell.autoHideOutput') && this.results.isEmpty()) {
                this.refs.buttons.disableAll();
            }
            else if (atom.config.get('ide-haskell.switchTabOnCheck')) {
                this.activateFirstNonEmptyTab();
            }
        }));
        this.setProgress(NaN);
        this.disposables.add(this.refs.buttons.onButtonClicked(() => this.updateItems()));
        this.disposables.add(this.refs.checkboxUriFilter.onCheckboxSwitched(() => this.updateItems()));
        this.disposables.add(atom.workspace.onDidChangeActivePaneItem(() => {
            if (this.refs.checkboxUriFilter.getFileFilter()) {
                this.updateItems();
            }
        }));
    }
    render() {
        return (etch.dom("ide-haskell-panel", { class: this.hiddenOutput ? 'hidden-output' : '' },
            etch.dom("ide-haskell-panel-heading", { ref: "heading" },
                etch.dom("ide-haskell-status-icon", { ref: "status", id: "status", dataset: { status: this.currentStatus.status } }),
                etch.dom(output_panel_buttons_1.OutputPanelButtons, { ref: "buttons", id: "buttons" }),
                etch.dom(output_panel_checkbox_1.OutputPanelCheckbox, { ref: "checkboxUriFilter", id: "checkboxUriFilter", enabled: this.state.fileFilter }),
                Array.from(this.elements.values()),
                etch.dom(progress_bar_1.ProgressBar, { ref: "progressBar", id: "progressBar" })),
            etch.dom(output_panel_items_1.OutputPanelItems, { model: this.results, ref: "items", id: "items" })));
    }
    update() {
        return etch.update(this);
    }
    destroy() {
        return __awaiter(this, void 0, void 0, function* () {
            atom.workspace.hide(this);
        });
    }
    reallyDestroy() {
        return __awaiter(this, void 0, void 0, function* () {
            yield etch.destroy(this);
            this.disposables.dispose();
            this.statusMap.clear();
        });
    }
    getTitle() {
        return 'IDE-Haskell';
    }
    getDefaultLocation() {
        return atom.config.get('ide-haskell.panelPosition');
    }
    getIconName() {
        return `ide-haskell-${this.currentStatus.status}`;
    }
    onDidChangeIcon(callback) {
        return this.emitter.on('did-change-icon', callback);
    }
    getStatus() {
        return this.currentStatus;
    }
    addPanelControl({ element, opts }) {
        if (typeof element === 'string') {
            const { events, classes, style, attrs } = opts;
            const props = {};
            if (classes) {
                props.class = classes.join(' ');
            }
            if (style) {
                props.style = style;
            }
            if (attrs) {
                props.attributes = attrs;
            }
            if (events) {
                props.on = events;
            }
            element = $(element, props);
        }
        else {
            element = $(element, opts);
        }
        this.elements.add(element);
        this.update();
        return new atom_1.Disposable(() => {
            this.elements.delete(element);
            this.update();
        });
    }
    updateItems() {
        const activeTab = this.getActiveTab();
        let currentUri;
        if (activeTab) {
            this.hiddenOutput = false;
            let filterUri;
            const filterSeverity = activeTab;
            const ato = this.refs.buttons.options(activeTab);
            if (this.refs.checkboxUriFilter.getFileFilter()) {
                currentUri = atom.workspace.getActiveTextEditor().getPath();
                if (currentUri && ato && ato.uriFilter) {
                    filterUri = currentUri;
                }
            }
            const scroll = ato && ato.autoScroll && this.refs.items.atEnd();
            this.refs.items.filter(({ uri, severity }) => (severity === filterSeverity) && (!filterUri || uri === filterUri));
            if (scroll) {
                this.refs.items.scrollToEnd();
            }
        }
        else {
            this.hiddenOutput = true;
        }
        this.refs.buttons.buttonNames().forEach((btn) => {
            const f = { severity: btn };
            const ato = this.refs.buttons.options(btn);
            if (currentUri && ato && ato.uriFilter) {
                f.uri = currentUri;
            }
            this.refs.buttons.setCount(btn, Array.from(this.results.filter(({ uri, severity }) => (severity === f.severity) && (!f.uri || uri === f.uri))).length);
        });
        this.update();
    }
    activateTab(tab) {
        this.refs.buttons.clickButton(tab);
    }
    activateFirstNonEmptyTab() {
        for (const i of this.refs.buttons.buttonNames()) {
            const count = this.refs.buttons.getCount(i);
            if (count && count > 0) {
                this.activateTab(i);
                break;
            }
        }
    }
    showItem(item) {
        this.activateTab(item.severity);
        this.refs.items.showItem(item);
    }
    getActiveTab() {
        return this.refs.buttons.getActive();
    }
    createTab(name, opts) {
        if (!this.refs.buttons.buttonNames().includes(name)) {
            this.refs.buttons.createButton(name, opts);
            this.state.activeTab && this.activateTab(this.state.activeTab);
        }
    }
    setProgress(progress) {
        this.refs.progressBar.setProgress(progress);
    }
    serialize() {
        return {
            activeTab: this.getActiveTab(),
            fileFilter: this.refs.checkboxUriFilter.getFileFilter()
        };
    }
    backendStatus(pluginName, st) {
        const prio = {
            progress: 5,
            error: 20,
            warning: 10,
            ready: 0
        };
        this.statusMap.set(pluginName, st);
        const stArr = Array.from(this.statusMap.values());
        const [consensus] = stArr.sort((a, b) => prio[b.status] - prio[a.status]);
        this.currentStatus = consensus;
        this.update();
        this.emitter.emit('did-change-icon');
        let count = 0;
        let tot = 0;
        for (const i of stArr) {
            if (i.status === 'progress' && i.progress !== undefined) {
                tot += i.progress;
                count++;
            }
        }
        const progressAve = tot / count;
        this.setProgress(progressAve);
    }
    showNextError() {
        const rs = Array.from(this.results.filter(({ uri }) => !!uri));
        if (rs.length === 0) {
            return;
        }
        if (this.currentResult !== undefined) {
            this.currentResult++;
        }
        else {
            this.currentResult = 0;
        }
        if (this.currentResult >= rs.length) {
            this.currentResult = 0;
        }
        this.showItem(rs[this.currentResult]);
    }
    showPrevError() {
        const rs = Array.from(this.results.filter(({ uri }) => !!uri));
        if (rs.length === 0) {
            return;
        }
        if (this.currentResult !== undefined) {
            this.currentResult--;
        }
        else {
            this.currentResult = rs.length - 1;
        }
        if (this.currentResult < 0) {
            this.currentResult = rs.length - 1;
        }
        this.showItem(rs[this.currentResult]);
    }
}
exports.OutputPanel = OutputPanel;
//# sourceMappingURL=data:application/json;base64,